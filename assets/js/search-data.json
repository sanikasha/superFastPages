{
  
    
        "post0": {
            "title": "P3-M 4/28 Introduction to SASS",
            "content": "What is SASS? . Sass is a preprocessor language that&#39;s interpreted into CSS. A preprocessor language takes input data and converts it to an output that&#39;s used as input by another program. This means when you run Sass code, you&#39;re actually converting your code to CSS. That CSS code output is then used directly by a browser. Fun fact CSS stands for Cascading Style Sheets and SASS stands for Syntactically Awesome Style Sheets. . SCSS vs. CSS . Understanding the differences between SCSS and CSS . What is CSS . CSS is the default technology that most programmers use when styling webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . | However, CSS is not very easy to work with lacking a lot features often making using CSS very confusing and difficult or hard to work with on lengthy projects. This is why there are tools like Bootstrap, Sass, and Tailwind that make styling a lot easier and more efficient. We will be using Sass in this course. . | . CSS Example . This is an example of CSS that can be used to change body text of an HTML document | Hack Question:Can you guess what its changing style of the text to? Changes color to blue | . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . What is SCSS . SCSS is short for Sassy Cascading Style Sheets. | SCSS very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. | . Sass Code Example . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above | . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. | SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. Such as the projects we made last and first trimester. | . Modular SCSS . Understanding how to use modular SCSS . Modular SCSS allows you to break multiple different files and then be able to compile them into a single CSS file | How do you do this? Well all you need to do is have _filenames.scss so that is compiled into its own file | Now after adding the to the file name you can import it into you file without the and all the styles will be carried over. | The benefits of a partial is that it allows you to big websites and allows you to break up the code in multiple components and easily make changes instead of having to go through a huge file. | All styles in the partial will be added and can be used into the main file as if they were defined in the main file. | . File 1 _variable.scss . $primary-button-color: #009494; $hover-color: black; $menu-color: #f2f2f2; . File 2 style.scss . We can see the importing of the .scss file&#39;s content into the other main .scss file style.scss | . {@import &#39;variables&#39;; @import &quot;{{ site.theme }}&quot;;} /* &quot;row style&quot; is flexible size and aligns pictures in center */ .row { align-items: center; display: flex; } /* &quot;column style&quot; is one-third of the width with padding */ .column { flex: 33.33%; padding: 5px; } .menu a { // float: left; display: block; color: $menu-color; text-align: center; // padding: 14px 16px; text-decoration: none; } .menu a:hover { background: $primary-button-color; color: $hover-color; } . Nesting . What is nesting? Where did the birds come from? . Nesting is a way to organize your code and make it easier to read. It also helps keep your code DRY (Don&#39;t Repeat Yourself). | Nesting is when you put one selector inside another selector. This is a great way to keep your code organized and make it easier to read. | When we make HTML we often nest different elements within each other and have a clear structure when we look at it. | The problem is that in regular CSS we don&#39;t have that so we need to use SASS to help us organize our code. | . Warning:Don&#39;t nest too much as when the CSS is processed it can make overqualified selectors which can be hard to read and maintain. Which means that it would only target that specific element type and not any other elements that have the same class name. ## Sass Nesting | Through nesting the ul, li, and a selectors within the nav selector makes your CSS better and increases its readability overall. | . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } . CSS - Lack of Nesting . We can see that through the lack of nesting the CSS is not as organized and needs extra information to be able to make it more clear exactly what is being targeted. | . nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } . Variables . What is a variable? . A variable is a container that stores information so for instance when you multiple places that refer to one value you can just use the variable name instead of the value. | This is valuable in SASS because it allows you to reuse that value in multiple places throughout you stylesheet. | Variables in CSS preprocessors such as Sass allow you to store information that you can reuse in your stylesheet, such as font stacks, colors, or any other CSS value you anticipate needing. The $ symbol is used in Sass to designate a variable. | . Pro Tip:The reason SASS variables are better than variables in regular CSS is that they are more consider and easier to read with a much simpler syntax. Fun Fact: Variables in SASS came before CSS and often SASS has features long before they are actually added to CSS as a whole. . Variable Example Syntax . $variable-name: value; | Once the sass is processed the variable name is replaced with the value throughout the program. | . $main-font: Calibri, sans-serif; $main-color: #000; $main-color-hover: #000; . Operators . Operators are used to perform operations on variables and other aspects of the language like in python we can use operators to see if values are equal, add, divide, subtract, multiply, etc. | SASS has a lot of operators that can be used to perform operations on variables and other aspects of the language as well. They can include == to check if two values are equal and != to check if two values are not equal | + to add two values together | - to subtract two values | * to multiply two values | / to divide two values | % to find the remainder of two values | &lt; to check if one value is less than another | &gt; to check if one value is greater than another | &lt;= to check if one value is less than or equal to another | &gt;= to check if one value is greater than or equal to another | Also there is and, or, &amp; not to be able to use boolean operations | . | . Operator Example Syntax . Operators are used in this example to perform string concatenation | . // Html &lt;p id=&quot;testing&quot;&gt;original text and&lt;/p&gt; // SASS #testing:after{ content: &quot; some&quot; + &quot; more&quot; + &quot; text&quot;; } // Output original text and some more text . Conditional Statements . There are conditional statements in SASS just like in Python and JavaScript they work the same way as well. | Conditional statements are used to perform different actions based on different conditions. Such as if a certain condition is true then do this, if it is false then do that and so on. | SASS has @if which allows for different styles based on if a boolean expression was true or false. | SASS has @else which allows for different set of styles if the if condition was not met or false. | SASS has @else if which allows for an alternative conditions to be run if the first is not met. | . $color: red; button { @if $color == red { background-color: $color; } } // @else: allows you to provide an alternative set of styles to apply if the condition in the @if statement isn&#39;t met $color: blue; button { @if $color == red { background-color: red; } @else { background-color: $color; } } // @else if: allows you to provide multiple alternative conditions to test $color: green; button { @if $color == red { background-color: red; } @else if $color == blue { background-color: blue; } @else { background-color: $color; } } . Loops In Sass . Loops are present in SASS through the @for and @while decorators, along with @each. | Loops are used to repeat a block of code a certain number of times or until a certain condition is met just like in any other programming language. . For Loops: Are used to iterate through a value like a list or a range of numbers | While Loops: Are used to iterate through a block of code until a certain condition is met such as a value is being equal to a certain value through an incrementing or decrementing a variable or any other condition that is met. | . | When using while loops they can be necessary but it is better to use @each and @for as it will make it clear and be able to compile faster. . | Side Note: In SASS lists care a any group of values that are separated by a comma or a space there is no special brackets used like in python or javascript. Lists can be searched for values however they are immutable meaning that they cannot be changed once they are created. . | . Some Code Examples of Loops and Lists . // A for each loop is used to interact with a group of sizes changing // the size of the element for each item in the list $sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } } // @each: allows you to loop over a list of values and generate styles $colors: red, green, blue; @each $color in $colors { .color-#{$color} { background-color: $color; } } . @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null . @use &quot;sass:math&quot;; /// Divides `$value` by `$ratio` until it&#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } . $base-color: #036; @for $i from 1 through 3 { ul:nth-child(3n + #{$i}) { background-color: lighten($base-color, $i * 5%); } } // @for: allows you to loop over a range of values and generate styles @for $i from 1 through 3 { .item-#{$i} { width: 100px * $i; } } . Functions in SASS . What is a function? . A function is a block of code that performs a specific task. This is a great method to be able to reuse code and processes in a manner that is more efficient and allows for the reuse of code. We do this all the time in programming languages such as JavaScript and Python. | . SASS functions . Sass Functions allow you to define complex calculations and transformations that can be used throughout your stylesheet and allow you to perform complex operations on values, manipulate data, plus you can generate content dynamically. . | There a are built in functions and ones you can make on your own like languages such as JavaScript and Python. . | SASS functions can be used to perform arithmetic operations, manipulate colors, work with strings, and more. . | Functions in SASS are similar to functions in programming languages, but they can be used within SASS stylesheets to generate CSS code dynamically. . | . Using Built-in Functions . Like Python and Javascript SASS provides a variety of built-in functions for math, color manipulation, string manipulation, and more. | . Math Functions . SASS has many functions that allow you to be able to perform wide range of math operations similar to the ones present in python including more complex operations. | . .round(1.2); // returns 1 .ceil(1.2); // returns 2 .floor(1.2); // returns 1 .abs(-1.2); // returns 1.2 .min(1, 2, 3); // returns 1 .max(1, 2, 3); // returns 3 .random(1, 100); // returns a random number between 1 and 100 . Color Functions . Color is an important component of any website and SASS provides a wide range of functions that allow you to manipulate colors in a variety of ways. | . .lighten(#007fff, 20%); // returns a lighter shade of blue .darken(#007fff, 20%); // returns a darker shade of blue .opacify(#007fff, 0.2); // makes the color more opaque .transparentize(#007fff, 0.2); // makes the color more transparent .mix(#007fff, #ff0000, 50%); // returns a mix of two colors . String Functions . SASS provides a variety of string functions that allow you to manipulate strings. Here are some examples: | . .to-upper-case(&quot;hello world&quot;); // returns &quot;HELLO WORLD&quot; .to-lower-case(&quot;HELLO WORLD&quot;); // returns &quot;hello world&quot; .str-index(&quot;hello world&quot;, &quot;world&quot;); // returns the index of the first occurrence of &quot;world&quot; .str-insert(&quot;hello&quot;, &quot; world&quot;, 5); // inserts &quot; world&quot; into &quot;hello&quot; at position 5 . Creating Custom Functions . In addition to using built-in functions, you can also create your own functions in SASS using the @function name(arguments){} | @return is similar to the return statement in JavaScript and Python. It returns a value from a function. | Functions take input values, perform calculations, and return a result. Here&#39;s an example of a simple function that calculates the area of a rectangle: | . @function rectangle-area($width, $height) { @return $width * $height; } // Usage: $area: rectangle-area(10px, 20px); // Returns 200px . Or you can also make a different kind of function that increases the font size to the factorial of a inputted number. | . @function factorial($number){ $calculated: 1; @for $_ from 1 through $number { $calculated: $calculated*$number; } @return $calculated; } #testing { font-size: factorial(3); } . //Combining functions and loops to achieve different sass effects @function sum($numList){ $sum: 0; @each $num in $numList { $sum: $sum+$num; } @return $num; } @function tri($num){ $sum: 0; @for $i from 1 through $num { $sum: $sum+$num; } @return $sum; } @function max($nums){ $i:0; $value:0px; @while $i&lt;length($nums){ @if $value&lt;list.nth($nums,$i){ $value:list.nth($nums,$i); } } } . Custom functions are very powerful, and can be used to create reusable pieces of code that can be used throughout your stylesheets. . | SASS functions are a powerful feature that allow you to perform complex operations on values, manipulate data, and generate content dynamically. By using built-in functions and creating your own custom functions, you can greatly extend the capabilities of your SASS stylesheets. . | . Mixins . Mixin what is a mix in what are we mixing in? . Mixins are a way to make groups of CSS that you want to reuse throughout your site anywhere you please. | Mixins are a form of template and that you can use to build on top of to make different features later on this prevents you from having to write the same code over and over again. | This is a form of encapsulation in your CSS and is a great way to make your code more organized and easier to read. | Mixins can also take in arguments and be able to be used to apply effects on certain elements if that is a feature you want to add to your site. However unlike functions which also take arguments mixins cannot return values. | To use a mixin declare it with @mixin and then incorporate with @include. | . Inheritance . What is inheritance? . In general programming concept where the child class can inherit properties from the parent class. These properties can be changed and modified in the child class. This prevents code from being repeated and makes the code more usable and flexible. | In SASS we have a similar concept that can be used as well we can create base styles and then have other styles inherit from them and then we can change them as we please. | We can do that by through using @extend .name-of-class and then we can add more styles to it as we please. Simple as that | . Mixin &amp; Inheritance Code Example . // example of @mixin @mixin button { width: auto; height: auto; border-radius: 10px; background-color: #21807c; border: 3px solid black; font-size: 1.5em; display: flex; justify-content: center; align-items: center; grid-column: span 1; grid-row: span 1; // creates smooth animation effect transition: all 0.5s; } // default button theme for calculator and stopwatch buttons. Both will follow the same button format .button { // uses the scss from the @mixin @include button; } /* styling for the calculator clear button */ .calculator-button-clear { // @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e68b1c; } /* styling for the calculator equals button */ .calculator-button-equals { // another @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e70f0f; } . Hacks &amp; Hack Helper - Calculator &amp; Hack Helper - Stopwatch . All hacks are pair/trio hacks, individual hacks are not recommended and will not be accepted unless a valid reason is given. We will respond in the appropriate slack channel if we have any questions. Hacks are due by 11:59pm on Wednesday 4/26/2023 at 11:59 p.m. PST. Any late submission will have a deduction of 0.1 points from their total grade. | . Part 1: Reflections 0.4 Points . Write a short description of each key feature of Sass and compare it to how it to CSS and how using Sass makes your life easier when using all the features. Include examples of how it would have made prior features from past projects simpler to implement. Also answer the questions indicated as hack questions. | . Part 2: Sass Demo 0.5+ Points . Using at least 3 or more sass features create a UI demo that may be used for future or current projects and reflect on how this was more effective than doing the same task using only regular features of CSS. Extra points will be awarded based on creativity and extra addition of features from SASS. | . Credits: Team Mortalicously Sassy 💖 .",
            "url": "https://sanikasha.github.io/superFastPages/student/2023/04/28/P3M-SASSFundamentals.html",
            "relUrl": "/student/2023/04/28/P3M-SASSFundamentals.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P3-M 4/25 Simulations",
            "content": "Objectives . Understand how computers can be used to represent real-world phenomena or outcomes | Compare simulations with real-world contexts. | Implement code to mimic real world situations, problems, or phenomena. | What are simulations by College Board definition? . Simulations are _ that mimic more complex objects or phenomena from the real world Purposes include drawing inferences without the __ of the real world | . | Simulations use varying sets of values to reflect the ___ state of a real phenomenon | Often, when developing a simulation, it is necessary to remove specific __ or simplify aspects Simulations can often contain __ based on which details or real-world elements were included/excluded | . | Simulations allow the formulation of ___ under consideration | Variability and ___ of the world is considered using random number generators | Examples: rolling dice, spinners, molecular models, analyze chemicals/reactions... | . . Analyzing an Example: Air-Traffic Simulator . Say we want to find out what the optimal number of aircrafts that can be in the air in one area is. | A simulation allows us to explore this question without real world contraints of money, time, safety Unfortunately we can&#39;t just fly 67 planes all at once and see what happens | . | Since the simulation won&#39;t be able to take all variables into control, it may have a bias towards one answer | Will not always have the same result | . Functions we often need (python) . import random # a module that defines a series of functions for generating or manipulating random integers random.choice() #returns a randomly selected element from the specified sequence random.choice(mylist) # returns random value from list random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 random.random() #will generate a random float between 0.0 to 1. . Functions we often need (js) . // Math.random(); returns a random number // Math.floor(Math.random() * 10); // Returns a random integer from 0 to 9: . College Board Question 1 . Question: The following code simulates the feeding of 4 fish in an aquarium while the owner is on a 5-day trip: . numFish ← 4 foodPerDay ← 20 foodLeft ← 160 daysStarving ← 0 REPEAT 5 TIMES { foodConsumed ← numFish * foodPerDay foodLeft ← foodLeft - foodConsumed IF (foodLeft &lt; 0) { daysStarving ← daysStarving + 1 } . } . This simulation simplifies a real-world scenario into something that can be modeled in code and executed on a computer. | Summarize how the code works: | . Examples . Card Flip . import random cards = [&quot;Ace&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;Jack&quot;, &quot;Queen&quot;, &quot;King&quot;] suits = [&quot;Diamonds&quot;, &quot;Hearts&quot;, &quot;Spades&quot;, &quot;Clubs&quot;] print(random.choice(cards) + &quot; of &quot; + random.choice(suits)) . Coin Flip . import random def coinflip(): #def function randomflip = random.randint(0, 1) #picks either 0 or 1 randomly if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 1: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Your turn: Change the code to make it simulate the flipping of a weighted coin. . Adding images (in Python) . Add a heads and tails images into your images directory with the correct names and run the code below | . import random # importing Image class from PIL package from PIL import Image # creating a object im = Image.open(r&quot;images/HeadsOn.png&quot;) image = Image.open(r&quot;images/TailsOn.png&quot;) i=random.randint(0,1) if i == 1: print(&quot;heads&quot;) display(im) else: print(&quot;tails&quot;) display(image) . In order to display an image in python, we can use the PIL package we previously learned about. . Spin the Wheel . import random print(&quot;Spin the wheel!&quot;) print(&quot;-&quot;) n = 300 blue = 0 red = 0 for i in range(n): spin = random.randint(1,2) if spin == 1: # head blue = blue + 1 else: # tail red = red + 1 print(&#39;Number of blue:&#39;, blue) print(&#39;Number of red:&#39;, red) . Your turn: Add a visual to the simulation! . Population Growth and Plots . import random totalPopulation = 50 growthFactor = 1.00005 dayCount = 0 #Every 2 months the population is reported while totalPopulation &lt; 1000000: totalPopulation *= growthFactor #Every 56th day, population is reported dayCount += 1 if dayCount == 56: dayCount = 0 print(totalPopulation) . 50.14019267336515 50.28077842644361 50.421758361373264 50.5631335833823 50.704905200797775 50.847074325054315 50.98964207070282 51.13260955541927 51.27597790001347 51.41974822843774 51.563921667795874 51.70849934835185 51.85348240353876 51.99887196996765 52.14466918743647 52.290875198939005 52.43749115067384 52.5845181920533 52.731957475712534 52.87981015751845 53.028077396578915 53.17676035525173 53.325860199153716 53.47537809717 53.62531522146305 53.775672747481956 53.92645185397153 54.0776537229816 54.22927953987637 54.38133049334356 54.533807775403844 54.68671258142016 54.840046110106975 54.993809563539834 55.14800414716474 55.302631069807575 55.45769154368362 55.613186784406984 55.769118011000224 55.92548644590379 56.082293314985726 56.239539847551235 56.39722727635229 56.55535683759732 56.71392977096098 56.87294731959368 57.032410730131446 57.19232125270578 57.35268014095325 57.51348865202554 57.67474804659919 57.83645958888546 57.998624546640265 58.161244191174156 58.324319797362236 58.48785264365415 58.651844012084126 58.81629518828111 58.98120746147867 59.14658212452524 59.312420473894186 59.47872380969402 59.645493435678574 59.81273065925718 59.98043679150499 60.14861314717315 60.31726104469929 60.486381806217665 60.65597675756963 60.82604722831395 60.99659455173736 61.16762006486491 61.33912510847044 61.51111102708713 61.68357916901805 61.85653088634677 62.029967534947765 62.2038904744973 62.3783010684839 62.5532006842192 62.72859069284855 62.9044724693617 63.08084739260377 63.25771684528589 63.43508221399618 63.61294488921051 63.791306265303454 63.9701677405592 64.14953071718247 64.32939660130967 64.50976680301973 64.69064273634523 64.87202581928359 65.05391747380793 65.23631912587847 65.41923220545367 65.6026581465012 65.78659838700955 65.97105436899903 66.1560275385331 66.34151934572994 66.52753124477363 66.71406469392542 66.90112115553534 67.08870209605372 67.27680898604255 67.46544330018713 67.65460651730747 67.84430012037001 68.0345255964992 68.22528443698917 68.41657813731555 68.60840819714687 68.80077612035657 68.99368341503474 69.1871315935 69.38112217231115 69.57565667227935 69.77073661847982 69.96636354026379 70.16253897127073 70.35926444944013 70.55654151702359 70.75437172059699 70.95275661107263 71.15169774371125 71.35119667813444 71.55125497833659 71.75187421269743 71.95305595399414 72.15480177941373 72.35711327056549 72.55999201349321 72.76343959868774 72.96745762109934 73.17204768015053 73.37721137974819 73.58295032829629 73.7892661387086 73.99616042842136 74.20363481940569 74.41169093818056 74.62033041582539 74.82955488799308 75.03936599492248 75.24976538145154 75.46075469703 75.67233559573249 75.88450973627147 76.0972787820101 76.31064440097533 76.52460826587115 76.73917205409133 76.95433744773317 77.17010613360995 77.3864798032648 77.60346015298347 77.82104888380806 78.03924770155005 78.25805831680371 78.47748244495963 78.69752180621806 78.91817812560257 79.13945313297332 79.36134856304064 79.58386615537891 79.80700765444 80.0307748095669 80.2551693750076 80.4801931099287 80.70584777842916 80.93213514955427 81.15905699730956 81.38661510067445 81.6148112436165 81.84364721510522 82.07312480912596 82.30324582469439 82.53401206587023 82.76542534177153 82.99748746658884 83.23020025959946 83.46356554518161 83.69758515282888 83.93226091716447 84.16759467795565 84.40358828012793 84.64024357377998 84.87756241419767 85.11554666186892 85.35419818249822 85.59351884702103 85.83351053161893 86.07417511773376 86.31551449208287 86.55753054667352 86.80022517881795 87.0436002911482 87.28765779163105 87.53239959358282 87.77782761568463 88.02394378199715 88.27075002197599 88.51824827048654 88.7664404678193 89.01532855970511 89.26491449733037 89.51520023735218 89.76618774191397 90.01787897866066 90.27027592075423 90.523380546889 90.77719484130736 91.0317207938151 91.28696039979738 91.54291566023389 91.79958858171481 92.05698117645656 92.31509546231764 92.57393346281405 92.83349720713561 93.0937887301617 93.3548100724771 93.61656328038823 93.8790504059389 94.1422735069267 94.40623464691882 94.67093589526853 94.93637932713133 95.20256702348084 95.46950107112576 95.73718356272572 96.00561659680784 96.2748022777833 96.54474271596374 96.81544002757771 97.08689633478744 97.35911376570533 97.63209445441078 97.90584054096682 98.18035417143682 98.45563749790136 98.73169267847535 99.00852187732455 99.28612726468283 99.56451101686899 99.84367531630399 100.12362235152784 100.4043543172171 100.6858734142017 100.9681818494825 101.25128183624842 101.53517559389384 101.81986534803593 102.1053533305323 102.39164177949827 102.6787329393245 102.96662906069467 103.2553324006029 103.54484522237183 103.83516979566991 104.12630839652952 104.41826330736457 104.7110368169886 105.00463122063279 105.29904881996362 105.59429192310112 105.89036284463707 106.18726390565291 106.48499743373814 106.78356576300845 107.082971234124 107.38321619430786 107.68430299736441 107.9862340036976 108.28901158032987 108.59263810092013 108.89711594578293 109.20244750190679 109.50863516297301 109.81568132937433 110.12358840823391 110.43235881342416 110.74199496558553 111.05249929214574 111.36387422733867 111.67612221222326 111.98924569470296 112.30324712954469 112.61812897839816 112.93389370981537 113.25054379926964 113.56808172917515 113.8865099889064 114.20583107481775 114.52604749026302 114.84716174561511 115.16917635828544 115.49209385274403 115.81591676053907 116.14064762031693 116.46628897784198 116.79284338601637 117.12031340490034 117.4487016017323 117.77801055094855 118.1082428342038 118.43940104039156 118.77148776566392 119.10450561345237 119.43845719448807 119.77334512682211 120.10917203584634 120.44594055431388 120.78365332235961 121.12231298752103 121.46192220475878 121.80248363647786 122.14399995254809 122.48647383032527 122.82990795467218 123.17430501797935 123.51966772018655 123.86599876880385 124.2133008789327 124.56157677328723 124.9108291822157 125.26106084372192 125.61227450348659 125.96447291488887 126.31765883902827 126.67183504474562 127.02700430864537 127.38316941511724 127.74033315635786 128.09849833239275 128.45766775109823 128.81784422822375 129.17903058741356 129.54122966022885 129.9044442861703 130.26867731270008 130.63393159526427 131.00020999731495 131.36751539033335 131.73585065385146 132.1052186754753 132.4756223509073 132.84706458396897 133.21954828662376 133.5930763789997 133.9676517894126 134.3432774543887 134.71995631868808 135.0976913353271 135.47648546560228 135.85634167911294 136.2372629537851 136.61925227589387 137.0023126400879 137.38644704941228 137.77165851533223 138.1579500577565 138.5453247050614 138.93378549411435 139.32333547029742 139.71397768753192 140.10571520830172 140.49855110367753 140.89248845334066 141.2875303456074 141.68367987745353 142.08094015453818 142.47931429122812 142.87880541062242 143.27941664457708 143.6811511337291 144.08401202752148 144.4880024842277 144.89312567097676 145.29938476377774 145.7067829475447 146.11532341612175 146.52500937230818 146.93584402788318 147.34783060363168 147.76097232936925 148.17527244396697 148.59073419537748 149.00736084066034 149.425155646007 149.84412188676714 150.26426284747424 150.6855818218708 151.10808211293462 151.53176703290453 151.9566399033063 152.3827040549788 152.80996282810023 153.23841957221413 153.66807764625565 154.0989404185779 154.5310112669781 154.96429357872486 155.39879075058366 155.83450618884436 156.27144330934723 156.70960553751047 157.14899630835643 157.58961906653877 158.0314772663694 158.47457437184565 158.9189138566775 159.3644992043146 159.81133390797362 160.2594214706658 160.70876540522437 161.1593692343318 161.61123649054784 162.06437071633695 162.51877546409628 162.974454296183 163.43141078494295 163.8896485127385 164.34917107197592 164.8099820651345 165.27208510479406 165.7354838136635 166.20018182460961 166.66618278068484 167.13349033515655 167.60210815153516 168.07203990360307 168.54328927544339 169.01585996146883 169.48975566645098 169.96498010554862 170.44153700433756 170.91943009883965 171.39866313555166 171.87923987147536 172.36116407414633 172.84443952166393 173.3290700027207 173.81505931663224 174.30241127336657 174.7911296935745 175.2812184086196 175.77268126060764 176.26552210241738 176.75974479773012 177.2553532210609 177.75235125778775 178.25074280418306 178.75053176744373 179.2517220657221 179.75431762815606 180.25832239490038 180.7637403171574 181.2705753572083 181.7788314884435 182.2885126953946 182.79962297376505 183.31216633046162 183.8261467836261 184.34156836266627 184.85843510828798 185.3767510725265 185.89652031877856 186.41774692183384 186.94043496790735 187.4645885546712 187.99021179128667 188.51730879843657 189.04588370835765 189.57594066487266 190.107483823423 190.64051735110152 191.1750454266848 191.7110722406662 192.24860199528842 192.78763890457714 193.32818719437287 193.87025110236505 194.41383487812527 194.95894278313986 195.50557909084395 196.05374808665488 196.60345406800522 197.15470134437754 197.707494237337 198.26183708056612 198.8177342198983 199.37519001335195 199.93420883116485 200.49479505582852 201.05695308212188 201.62068731714655 202.18600218036067 202.75290210361413 203.32139153118305 203.8914749198046 204.463156738712 205.03644146966957 205.6113336070078 206.1878376576584 206.76595814119057 207.34569958984486 207.92706654857014 208.51006357505847 209.0946952397809 209.68096612602358 210.26888082992338 210.85844396050425 211.44966013971296 212.0425340024556 212.63707019663403 213.233273383182 213.83114823610165 214.43069944250087 215.03193170262884 215.63484972991407 216.23945825100063 216.84576200578545 217.45376574745524 218.0634742425242 218.6748922708712 219.28802462577698 219.90287611396192 220.5194515556238 221.1377557844757 221.75779364778353 222.37957000640415 223.0030897348239 223.62835772119607 224.25537886737985 224.88415808897844 225.5147003153777 226.14701048978466 226.78109356926657 227.41695452478945 228.0545983412572 228.69403001755072 229.33525456656687 229.97827701525802 230.62310240467164 231.26973578998908 231.91818224056598 232.56844683997173 233.22053468602925 233.87445089085486 234.53020058089874 235.18778889698473 235.84722099435083 236.5085020426895 237.1716372261884 237.83663174357085 238.50349080813663 239.17221964780276 239.84282350514476 240.51530763743727 241.18967731669585 241.8659378297178 242.54409447812415 243.2241525784004 243.90611746193915 244.58999447508114 245.27578897915754 245.96350635053204 246.65315198064286 247.34473127604497 248.0382496584523 248.73371256478077 249.4311254471907 250.13049377312905 250.831823025373 251.53511870207248 252.2403863167937 252.94763139856178 253.6568594919047 254.36807615689625 255.0812869691998 255.79649752011247 256.51371341660814 257.2329402813819 257.95418375289455 258.6774494854154 259.4027431490684 260.1300704298747 260.8594370297992 261.59084866679365 262.32431107484285 263.05983000400795 263.79741122047267 264.53706050658855 265.27878366091994 266.02258649828946 266.76847484982346 267.51645456299826 268.2665315016851 269.01871154619727 269.7730005933353 270.5294045564336 271.2879293654064 272.048580966795 272.81136532381356 273.5762884163963 274.34335624124435 275.112574811873 275.8839501586579 276.65748832888363 277.43319538679 278.2110774136202 278.9911405076685 279.77339078432755 280.55783437613707 281.34447743283164 282.1333261213881 282.92438662607515 283.7176651485011 284.5131679076628 285.310901139994 286.11087109941457 286.91308405737965 287.71754630292827 288.52426414273344 289.3332439011511 290.1444919202694 290.9580145599587 291.7738181979222 292.59190922974483 293.4122940689435 294.234979147018 295.0599709135012 295.8872758360093 296.7169004002931 297.5488511102877 298.3831344881652 299.2197570743844 300.05872542774284 300.9000461254279 301.7437257630681 302.589770954786 303.43818833324764 304.2889845497177 305.14216627410957 305.9977401950374 306.85571301987005 307.71609147478233 308.57888230480876 309.44409227389536 310.3117281649539 311.1817967799137 312.0543049397762 312.9292594846684 313.8066672738949 314.68653518599365 315.5688701187883 316.4536789894435 317.3409687345188 318.23074631002237 319.12301869146626 320.0177928739205 320.9150758720686 321.81487472026214 322.7171964725761 323.62204820286394 324.52943700481296 325.4393699920007 326.3518542979497 327.26689707618374 328.1845055002843 329.1046867639462 330.02744808103495 330.95279668564194 331.88073983214247 332.81128479525165 333.74443887008215 334.6802093722009 335.6186036376864 336.55962902318737 337.5032929059783 338.4496026840188 339.39856577601165 340.3501896214602 341.3044816807274 342.261449435094 343.22110038681643 344.18344205918754 345.1484819965934 346.11622776457364 347.08668694988114 348.05986716054014 349.035776025907 350.01442119673004 350.99581034520844 351.97995116505376 352.9668513715488 353.95651870160964 354.9489609138453 355.94418578861934 356.9422011281091 357.9430147563688 358.94663451939033 359.9530682851643 360.96232394374175 361.97440940729695 362.9893326101884 364.0071015090213 365.0277240827101 366.0512083325411 367.07756228223457 368.1067939780088 369.13891148864167 370.1739229055354 371.21183634277907 372.2526599372127 373.29640184849023 374.34307025914455 375.39267337465117 376.4452194234927 377.50071665722265 378.55917335053124 379.6205978013096 380.6849983307144 381.75238328323405 382.82276102675394 383.8961399526212 384.97252847571133 386.0519350344942 387.1343680910996 388.21983613138366 389.30834766499646 390.39991122544694 391.494535370171 392.59222868059885 393.69299976222095 394.796857244657 395.9038097817225 397.01386605149725 398.1270347563929 399.2433246232216 400.36274440326383 401.4853028723379 402.6110088308677 403.7398711039524 404.87189854143577 406.0071000179748 407.1454844331095 408.287060711334 409.43183780216435 410.5798246802101 411.73103034524416 412.88546382227366 414.0431341616106 415.2040504389423 416.3682217554037 417.5356572376472 418.7063660379155 419.8803573341126 421.0576403298762 422.23822425464937 423.4221183637535 424.60933193846023 425.799874286065 426.9937547399591 428.1909826597033 429.39156743110146 430.5955184662737 431.80284520373044 433.01355710844604 434.22766367193367 435.4451744123189 436.6660988744152 437.89044662979774 439.11822727687934 440.34945044098566 441.5841257744296 442.8222629565879 444.0638716939778 445.308961720331 446.5575427966714 447.8096247113921 449.06521728033084 450.3243303468473 451.58697378190135 452.8531574841283 454.1228913799193 455.3961854234965 456.6730495969924 457.95349391052855 459.2375284022931 460.5251631386193 461.8164082140656 463.11127375149374 464.40976990214904 465.7119068457384 467.01769479051194 468.3271439733419 469.64026465980334 470.95706714425455 472.2775617499174 473.60175882895885 474.92966876257213 476.26130196105726 477.5966688639028 478.93577993986906 480.2786456870687 481.62527663304957 482.9756833348777 484.329876379219 485.6878663824232 487.0496639906063 488.41527987973484 489.78472475570936 491.1580093544477 492.5351444419697 493.9161408144817 495.30100929846105 496.689760750741 498.0824060585959 499.47895613982575 500.8794219428431 502.28381444675813 503.69214466146485 505.1044236277269 506.52066241726544 507.9408721328446 509.36506390835916 510.7932489089215 512.2254383309495 513.6616434022543 515.1018753821286 516.5461455614329 517.9944652626872 519.4468458401576 520.9032986799461 522.363835200079 523.8284668505978 525.2972051136486 526.770061503571 528.2470475669891 529.7281748829021 531.2134550627753 532.7028997506313 534.1965206231389 535.6943293897091 537.1963377925831 538.7025576069253 540.2130006409161 541.7276787358455 543.2466037662027 544.7697876397733 546.2972422977293 547.828979714724 549.3650118989859 550.9053508924134 552.4500087706683 553.9989976432714 555.5523296536958 557.1100169794631 558.67207183224 560.2385064579324 561.8093331367805 563.3845641834594 564.9642119471699 566.54828881174 568.1368071957193 569.7297795524775 571.3272183703012 572.929136172493 574.5355455174692 576.1464589988572 577.7618892455956 579.3818489220322 581.0063507280242 582.6354073990381 584.2690317062466 585.9072364566338 587.5500344930905 589.1974386945177 590.8494619759274 592.5061172885423 594.1674176199 595.8333759939517 597.5040054711668 599.1793191486345 600.8593301601647 602.5440516763953 604.2334969048909 605.927679090248 607.6266115142 609.3303074957197 611.0387803911243 612.7520435941806 614.4701105362091 616.1929946861893 617.9207095508675 619.6532686748599 621.3906856407593 623.132974069243 624.8801476191777 626.6322199877284 628.3892049104649 630.1511161614686 631.9179675534425 633.6897729378182 635.4665462048637 637.248301283795 639.035052142882 640.8268127895609 642.6235972705416 644.425419671919 646.2322941192846 648.0442347778338 649.8612558524812 651.683371587969 653.510596268979 655.3429442202466 657.1804298066711 659.0230674334283 660.8708715460835 662.7238566307075 664.5820372139859 666.4454278633357 668.3140431870181 670.1878978342551 672.067006495342 673.9513839017637 675.8410448263103 677.7360040831921 679.6362765281566 681.5418770586045 683.4528206137071 685.3691221745227 687.2907967641139 689.2178594476659 691.150325332605 693.0882095687164 695.0315273482627 696.9802939061026 698.9345245198126 700.8942345098052 702.8594392394482 704.8301541151864 706.8063945866619 708.7881761468354 710.7755143321076 712.7684247224413 714.7669229414836 716.7710246566857 718.7807455794315 720.7961014651545 722.8171081134661 724.843781368276 726.8761371179183 728.9141912952758 730.9579598779051 733.0074588881613 735.0627043933235 737.1237125057212 739.1904993828613 741.2630812275531 743.3414742880366 745.4256948581091 747.5157592772539 749.6116839307671 751.7134852498872 753.8211797119232 755.9347838403846 758.0543142051102 760.1797874223978 762.3112201551356 764.4486291129311 766.5920310522441 768.7414427765165 770.8968811363039 773.0583630294111 775.2259054010183 777.3995252438195 779.5792395981537 781.765065552138 783.9570202418024 786.1551208512234 788.3593846126597 790.5698288066865 792.7864707623309 795.0093278572086 797.2384175176593 799.4737572188831 801.7153644850787 803.9632568895797 806.2174520549937 808.4779676533383 810.7448214061807 813.0180310847782 815.2976145102144 817.5835895535421 819.8759741359219 822.1747862287616 824.480043853858 826.7917650835394 829.109968040806 831.4346708994727 833.7658918843098 836.1036492711884 838.447961387222 840.7988466109101 843.1563233722843 845.5204101530497 847.8911254867327 850.268487958824 852.6525162069256 855.043228920897 857.4406448430004 859.8447827680498 862.2556615435561 864.6733000698766 867.0977173003621 869.5289322415053 871.9669639530903 874.4118315483431 876.8635541940805 879.322151110859 881.7876415731274 884.2600449093766 886.7393805022928 889.2256677889077 891.7189262607517 894.2191754640077 896.7264349996603 899.2407245236565 901.7620637470516 904.2904724361706 906.8259704127589 909.3685775541408 911.9183137933724 914.4751991193983 917.0392535772118 919.6104972680068 922.18895034934 924.7746330352851 927.3675655965947 929.9677683608575 932.5752617126558 935.1900660937296 937.8122020031334 940.4416899973988 943.0785506906938 945.7228047549867 948.3744729202062 951.0335759744047 953.7001347639222 956.3741701935471 959.0557032266831 961.7447548855114 964.4413462511574 967.1454984638538 969.8572327231082 972.5765702878673 975.3035324766865 978.038140667894 980.78041629976 983.5303808706647 986.2880559392662 989.0534631246705 991.8266241066004 994.6075606255647 997.3962944830304 1000.1928475415913 1002.997241725142 1005.8094990190481 1008.6296414703187 1011.4576911877793 1014.2936703422463 1017.1376011666987 1019.9895059564535 1022.8494070693422 1025.7173269258824 1028.593288009456 1031.4773128664845 1034.3694241066091 1037.2696444028618 1040.1779964918474 1043.0945031739234 1046.0191873133717 1048.9520718385857 1051.8931797422445 1054.8425340814974 1057.8001579781408 1060.766074618801 1063.7403072551176 1066.7228792039236 1069.7138138474302 1072.713134633408 1075.7208650753705 1078.7370287527624 1081.7616493111384 1084.7947504623544 1087.8363559847496 1090.8864897233352 1093.9451755899797 1097.012437563597 1100.0882996903342 1103.1727860837598 1106.265920925055 1109.3677284632 1112.4782330151652 1115.5974589661037 1118.72543076954 1121.8621729475624 1125.007710091017 1128.162066859697 1131.3252679825403 1134.4973382578196 1137.67830255334 1140.8681858066293 1144.0670130251392 1147.274809286437 1150.4915997384037 1153.7174095994335 1156.9522641586254 1160.19618877599 1163.4492088826412 1166.711349980997 1169.9826376449819 1173.2630975202271 1176.5527553242666 1179.851636846747 1183.159767949622 1186.477174567361 1189.803882707147 1193.1399184490854 1196.4853079464058 1199.8400774256686 1203.204253186967 1206.5778616041396 1209.9609291249694 1213.3534822713975 1216.7555476397283 1220.1671519008369 1223.5883218003826 1227.0190841590133 1230.4594658725784 1233.9094939123402 1237.3691953251844 1240.8385972338292 1244.3177268370462 1247.806611409865 1251.3052783037892 1254.8137549470152 1258.332068844643 1261.860247578891 1265.3983188093162 1268.9463102730283 1272.5042497849086 1276.0721652378256 1279.6500846028562 1283.2380359295046 1286.8360473459204 1290.4441470591216 1294.062363355214 1297.6907245996133 1301.3292592372682 1304.9779957928836 1308.6369628711413 1312.3061891569278 1315.985703415559 1319.675534493001 1323.3757113161043 1327.0862628928226 1330.8072183124439 1334.5386067458198 1338.2804574455934 1342.0327997464256 1345.795663065229 1349.5690769013959 1353.3530708370308 1357.1476745371817 1360.9529177500744 1364.7688303073437 1368.5954421242673 1372.4327832000029 1376.2808836178187 1380.1397735453336 1384.009483234751 1387.8900430230988 1391.7814833324644 1395.6838346702334 1399.597127629332 1403.5213928884618 1407.4566612123456 1411.402963451964 1415.3603305448 1419.3287935150804 1423.30838347402 1427.2991316200666 1431.3010692391372 1435.314227704878 1439.3386384788973 1443.3743331110186 1447.421343239528 1451.4797005914186 1455.5494369826426 1459.630584318357 1463.7231745931795 1467.827239891434 1471.9428123874047 1476.0699243455883 1480.2086081209457 1484.358896159157 1488.5208209968748 1492.6944152619792 1496.8797116738351 1501.0767430435467 1505.2855422742173 1509.5061423612026 1513.7385763923764 1517.9828775483838 1522.239079102904 1526.5072144229102 1530.7873169689335 1535.0794202953196 1539.3835580505 1543.6997639772487 1548.0280719129503 1552.3685157898653 1556.721129635394 1561.0859475723455 1565.4630038192042 1569.852332690397 1574.2539685965653 1578.6679460448295 1583.0942996390663 1587.5330640801772 1591.9842741663558 1596.4479647933679 1600.9241709548232 1605.4129277424438 1609.914270346347 1614.4282340553175 1618.954854257085 1623.4941664386008 1628.046206186315 1632.6110091864593 1637.1886112253233 1641.7790481895356 1646.3823560663461 1650.998570943908 1655.627729011561 1660.269866560112 1664.9250199821258 1669.5932257722009 1674.2745205272677 1678.9689409468642 1683.6765238334306 1688.397306092596 1693.1313247334679 1697.87861686892 1702.6392197158866 1707.4131705956536 1712.2005069341462 1717.0012662622305 1721.8154862160025 1726.6432045370846 1731.4844590729206 1736.3392877770732 1741.2077287095196 1746.0898200369559 1750.9856000330892 1755.8951070789394 1760.8183796631415 1765.7554563822503 1770.7063759410364 1775.6711771527937 1780.6498989396432 1785.6425803328375 1790.649260473067 1795.669978610768 1800.7047741064275 1805.7536864308945 1810.8167551656884 1815.8940200033098 1820.98552074755 1826.091297313806 1831.2113897293902 1836.3458381338476 1841.494682779266 1846.6579640305958 1851.8357223659652 1857.027998376996 1862.234832769123 1867.4562663619147 1872.6923400893893 1877.9430950003407 1883.2085722586542 1888.488813143636 1893.7838590503316 1899.0937514898524 1904.4185320897002 1909.7582425940957 1915.1129248643033 1920.48262087896 1925.8673727344062 1931.2672226450122 1936.6822129435136 1942.1123860813389 1947.557784628944 1953.018451276148 1958.4944288324652 1963.9857602274396 1969.4924885109876 1975.0146568537257 1980.5523085473183 1986.1054870048138 1991.6742357609814 1997.2585984726568 2002.8586189190848 2008.474341002258 2014.1058087472647 2019.7530663026355 2025.4161579406841 2031.0951280578568 2036.790021175084 2042.5008819381235 2048.2277551179145 2053.9706856109283 2059.7297184395165 2065.5048987522687 2071.2962718243652 2077.10388305793 2082.927777982389 2088.768002254826 2094.62460166034 2100.497622112403 2106.387109653224 2112.2931104541053 2118.2156708158113 2124.1548371689237 2130.110656074209 2136.08317422298 2142.072438437472 2148.0784956711996 2154.101393009326 2160.141177669036 2166.197896999907 2172.2715984842735 2178.3623297376075 2184.4701385088824 2190.595072680959 2196.7371802709526 2202.8965094306072 2209.0731084466843 2215.267025741327 2221.478309872454 2227.707009534127 2233.9531735569444 2240.216850908413 2246.498090693343 2252.7969421542234 2259.113454671611 2265.4476777645227 2271.799661090817 2278.1694544475836 2284.5571077715394 2290.9626711394167 2297.386194768352 2303.8277290162882 2310.2873243823597 2316.765031507295 2323.260901173812 2329.7749843070155 2336.307331974802 2342.8579953882436 2349.4270259020104 2356.0144750147606 2362.620394369546 2369.2448357542207 2375.8878511018397 2382.5494924910736 2389.229812146615 2395.928862439586 2402.6466958879478 2409.3833651569153 2416.138923059372 2422.913422556278 2429.7069167570858 2436.519458920164 2443.3511024532077 2450.2019009136575 2457.071908009127 2463.9611775978096 2470.8697636889137 2477.7977204430854 2484.745102172822 2491.7119633429115 2498.6983585708495 2505.7043426272726 2512.729970436385 2519.7752970763886 2526.840377779921 2533.9252679344804 2541.0300230828643 2548.154698923603 2555.2993513114034 2562.464036257574 2569.6488099304725 2576.8537286559476 2584.0788489177717 2591.3242273580936 2598.5899207778775 2605.875986137348 2613.18248055644 2620.509461315242 2627.856985854449 2635.225111775813 2642.613896842587 2650.023398979991 2657.4536762756543 2664.9047869800756 2672.3767895070823 2679.869742434282 2687.3837045035248 2694.9187346213707 2702.4748918595383 2710.052235455376 2717.6508248123273 2725.270719500395 2732.911979256605 2740.5746639854788 2748.2588337594957 2755.9645488195774 2763.691869575548 2771.440856606614 2779.2115706618342 2787.004072660602 2794.818423693118 2802.6546850208742 2810.5129180771223 2818.3931844673725 2826.295545969864 2834.220064536054 2842.1668022911017 2850.135821534359 2858.1271847398516 2866.1409545567767 2874.177193809989 2882.235965500495 2890.3173328059465 2898.421359081141 2906.5481078585035 2914.6976428486055 2922.870027940646 2931.065327202962 2939.2836048835306 2947.5249254104688 2955.7893533925417 2964.0769536196685 2972.387791063426 2980.721930877568 2989.0794383985253 2997.4603791459226 3005.864818823096 3014.292823317596 3022.7444587017208 3031.219791233022 3039.7188873548275 3048.2418136967613 3056.788637075271 3065.359424494145 3073.954243145041 3082.5731604080124 3091.2162438520363 3099.883561235543 3108.5751805069476 3117.291169805183 3126.031597460233 3134.7965319936707 3143.58604211919 3152.4001967431504 3161.239064965114 3170.1027160783874 3178.9912195705706 3187.904645124089 3196.8430626167533 3205.806542122294 3214.7951539109254 3223.808968449886 3232.848056403997 3241.912488636209 3251.0023362081643 3260.117670380751 3269.258562614663 3278.4250845709594 3287.6173081116276 3296.8353053001415 3306.079148402034 3315.348909885458 3324.64466242176 3333.9664788860414 3343.314432357736 3352.6885961211856 3362.089043666206 3371.5158486886708 3380.969085091084 3390.44882698316 3399.9551486824093 3409.4881247147155 3419.0478298149255 3428.6343389274266 3438.2477272067417 3447.8880700181153 3457.555442938107 3467.24992175518 3476.971582470297 3486.72050129752 3496.496754664598 3506.3004192135777 3516.1315718013943 3525.9902895004807 3535.876649599374 3545.7907296033077 3555.732607234836 3565.702360434434 3575.700067361107 3585.72580639301 3595.779656128063 3605.8616953845535 3615.9720032017713 3626.1106588406183 3636.2777417842303 3646.473331738607 3656.6975086332295 3666.950352621687 3677.2319440823126 3687.542363618804 3697.881692060861 3708.2500104648216 3718.647400114288 3729.073942520775 3739.5297194243394 3750.0148127942307 3760.5293048295225 3771.0732779597624 3781.646814845622 3792.2499983795406 3802.882911686374 3813.545638124051 3824.2382612842225 3834.960864992917 3845.7135333111987 3856.496350535827 3867.309401199917 3878.152770073603 3889.026542164703 3899.930802719383 3910.8656372228284 3921.8311313999093 3932.827371215862 3943.854442876949 3954.9124328311464 3966.001427768817 3977.121514623394 3988.2727805720547 3999.4553130364106 4010.66919968319 4021.9145284249266 4033.1913874206466 4044.4998650765597 4055.8400500467615 4067.2120312339102 4078.615897789941 4090.0517391167546 4101.519644866924 4113.019704944393 4124.552009505185 4136.1166489581055 4147.713713965455 4159.343295443735 4171.0054845643635 4182.700372754399 4194.428051697235 4206.1886133333355 4217.98214986096 4229.808753736866 4241.668517677058 4253.561534657497 4265.487897914835 4277.447700947141 4289.44103751465 4301.468001640473 4313.528687611365 4325.623189978435 4337.751603557903 4349.914023431835 4362.110544948903 4374.341263725114 4386.606275644572 4398.9056768602295 4411.239563794634 4423.608033140682 4436.011181862393 4448.449107195653 4460.921906648981 4473.429678004307 4485.972519317711 4498.550528920226 4511.163805418573 4523.812447695967 4536.496554912866 4549.216226507765 4561.971562197969 4574.762661980377 4587.5896261322605 4600.452555212054 4613.35155006015 4626.286711799668 4639.258141837285 4652.2659418639905 4665.310213855898 4678.3910600750605 4691.508583070249 4704.662885677772 4717.854071022268 4731.082242517532 4744.347503867308 4757.649959066115 4770.989712400055 4784.366868447634 4797.781532080579 4811.233808464663 4824.723803060533 4838.2516216245185 4851.817370209497 4865.421155165681 4879.063083141484 4892.743261084339 4906.461796241551 4920.218796161127 4934.014368692631 4947.848621988012 4961.721664502462 4975.633604995265 4989.584552530659 5003.574616478672 5017.603906515994 5031.672532626831 5045.780605103768 5059.928234548637 5074.115531873383 5088.342608300921 5102.6095753660275 5116.916544916215 5131.263629112576 5145.650940430707 5160.078591661562 5174.546695912347 5189.055366607397 5203.604717489087 5218.194862618691 5232.8259163773055 5247.497993466735 5262.21120891038 5276.96567805416 5291.761516567408 5306.598840443774 5321.477766002141 5336.398409887517 5351.360889071992 5366.365320855602 5381.411822867294 5396.500513065824 5411.631509740684 5426.804931513036 5442.020897336635 5457.279526498765 5472.580938621181 5487.92525366103 5503.312591911805 5518.743074004288 5534.216820907487 5549.733953929595 5565.294594718928 5580.898865264893 5596.546887898931 5612.238785295491 5627.974680472969 5643.754696794706 5659.5789579699185 5675.447588054695 5691.360711452955 5707.318452917434 5723.320937550645 5739.368290805884 5755.460638488189 5771.598106755335 5787.780822118838 5804.008911444924 5820.282501955534 5836.6017212293245 5852.96669720266 5869.377558170623 5885.8344327880095 5902.3374500703485 5918.88673939492 5935.482430501744 5952.1246534946185 5968.813538842137 5985.549217378703 6002.331820305559 6019.161479191824 6036.038325975507 6052.962492964565 6069.93411283792 6086.9533186465005 6104.020243814296 6121.1350221394005 6138.297787795051 6155.508675330697 6172.767819673035 6190.075356127078 6207.431420377218 6224.836148488286 6242.289676906619 6259.792142461123 6277.343682364355 6294.944434213602 6312.5945359919515 6330.294126069369 6348.043343203796 6365.842326542226 6383.691215621802 6401.590150370915 6419.539271110285 6437.538718554073 6455.588633810987 6473.689158385381 6491.840434178356 6510.0426034889015 6528.295809014979 6546.6001938546615 6564.9559015072455 6583.363075874375 6601.8218612611745 6620.33240237739 6638.894844338494 6657.509332666849 6676.176013292847 6694.895032556041 6713.6665372063 6732.490674404961 6751.367591725978 6770.2974371570745 6789.280359100919 6808.316506376276 6827.406028219176 6846.549074284085 6865.745794645072 6884.996339797004 6904.30086065671 6923.659508564162 6943.072435283672 6962.5397930050785 6982.061734344933 7001.6384123476955 7021.2699804869535 7040.956592666612 7060.69840322209 7080.495566921541 7100.3482389670735 7120.256574995957 7140.220731081844 7160.240863735994 7180.317129908501 7200.449686989531 7220.638692810538 7240.884305645517 7261.186684212238 7281.545987673499 7301.962375638361 7322.436008163409 7342.967045754 7363.555649365525 7384.201980404679 7404.9062007306975 7425.668472656669 7446.48895895077 7467.367822837556 7488.305227999243 7509.30133857699 7530.3563191721805 7551.470334847718 7572.643551129314 7593.876134006792 7615.168249935395 7636.520065837067 7657.931749101792 7679.403467588876 7700.935389628291 7722.527684021976 7744.180520045161 7765.894067447705 7787.668496455423 7809.503977771416 7831.400682577403 7853.358782535088 7875.378449787473 7897.45985696023 7919.603177163052 7941.8085839910045 7964.076251525881 7986.406354337586 8008.799067485481 8031.2545665197795 8053.773027482905 8076.35462691088 8098.999541834712 8121.7079497817695 8144.480028777185 8167.315957345251 8190.215914510809 8213.180079800673 8236.208633245005 8259.301755378752 8282.459627243066 8305.682430386705 8328.97034686746 8352.32355925358 8375.742250625224 8399.226604575875 8422.776805213774 8446.39303716339 8470.075485566833 8493.824336085363 8517.639774900756 8541.521988716842 8565.471164760947 8589.487490785343 8613.571155068736 8637.722346417731 8661.941254168336 8686.228068187407 8710.582978874178 8735.006177161724 8759.497854518471 8784.058202949695 8808.687414999027 8833.385683749955 8858.153202827356 8882.990166399006 8907.89676917708 8932.873206419712 8957.919673932507 8983.036368070083 9008.223485737602 9033.48122439233 9058.809782045157 9084.209357262174 9109.68014916624 9135.222357438493 9160.83618231998 9186.521824613172 9212.279485683572 9238.109367461268 9264.011672442542 9289.98660369146 9316.034364841416 9342.155160096785 9368.3491942345 9394.616672605656 9420.957801137121 9447.37278633315 9473.861835277012 9500.4251556326 9527.062955646074 9553.775444147474 9580.562830552373 9607.425324863525 9634.36313767249 9661.376480161309 9688.465564104126 9715.630601868876 9742.871806418956 9770.18939131487 9797.58357071591 9825.054559381846 9852.602572674603 9880.227826559947 9907.930537609192 9935.710923000863 9963.56920052244 9991.505588572038 10019.520306160137 10047.61357291127 10075.785609065802 10104.036635481578 10132.366873635718 10160.77654562635 10189.265874174285 10217.835082624859 10246.484394949606 10275.214035748051 10304.02423024947 10332.915204314626 10361.887184437588 10390.940397747478 10420.075072010231 10449.29143563044 10478.589717653093 10507.97014776538 10537.43295629851 10566.97837422949 10596.606633182986 10626.317965433082 10656.112603905123 10685.990782177549 10715.952734483722 10745.998695713759 10776.128901416365 10806.3435878007 10836.642991738217 10867.027350764529 10897.496903081234 10928.051887557856 10958.692543733647 10989.419111819494 11020.23183269981 11051.130947934409 11082.116699760392 11113.189331094074 11144.34908553285 11175.59620735715 11206.93094153232 11238.353533710557 11269.86423023283 11301.463278130794 11333.150925128773 11364.927419645666 11396.793010796877 11428.747948396333 11460.792482958372 11492.926865699748 11525.151348541596 11557.46618411139 11589.87162574494 11622.367927488373 11654.955344100124 11687.634131052937 11720.404544535857 11753.266841456236 11786.221279441796 11819.268116842544 11852.40761273293 11885.640026913768 11918.96561991434 11952.384652994398 11985.897388146232 12019.504088096717 12053.205016309383 12087.000436986476 12120.890615071014 12154.875816248874 12188.956306950895 12223.132354354939 12257.404226387998 12291.772191728285 12326.236519807353 12360.797480812207 12395.455345687413 12430.210386137214 12465.062874627687 12500.013084388856 12535.06128941685 12570.207764476028 12605.452785101168 12640.796627599599 12676.239569053365 12711.781887321411 12747.423861041776 12783.165769633737 12819.007893300022 12854.950513029034 12890.993910596992 12927.1383685702 12963.384170307221 12999.731599961113 13036.180942481667 13072.732483617634 13109.386509918946 13146.143308738998 13183.003168236863 13219.966377379586 13257.033225944426 13294.204004521134 13331.47900451424 13368.858518145322 13406.342838455306 13443.932259306757 13481.627075386199 13519.427582206408 13557.334076108727 13595.346854265405 13633.466214681926 13671.692456199313 13710.025878496523 13748.466782092759 13787.015468349828 13825.672239474517 13864.43739852095 13903.31124939299 13942.294096846595 13981.38624649219 14020.58800479711 14059.899679087981 14099.32157755312 14138.854009244955 14178.497284082458 14218.251712853578 14258.117607217644 14298.095279707852 14338.185043733687 14378.387213583392 14418.702104426424 14459.130032315934 14499.671314191228 14540.326267880266 14581.095212102171 14621.978466469702 14662.976351491736 14704.089188575843 14745.31730003076 14786.661009068928 14828.120639809036 14869.69651727855 14911.388967416255 14953.198317074834 14995.124894023433 15037.169026950174 15079.331045464807 15121.61128010124 15164.010062320154 15206.527724511605 15249.16459999761 15291.921023034782 15334.797328816943 15377.793853477724 15420.910934093265 15464.148908684783 15507.50811622128 15550.98889662217 15594.59159075995 15638.316540462863 15682.164088517615 15726.134578672025 15770.228355637704 15814.445765092809 15858.787153684734 15903.252869032805 15947.84325973103 15992.558675350827 16037.399466443749 16082.36598454425 16127.458582172447 16172.677612836847 16218.023431037162 16263.496392267074 16309.096853017 16354.8251707769 16400.681704039107 16446.666812301115 16492.780856068344 16539.024196857114 16585.397197197275 16631.90022063524 16678.533631736693 16725.297796089555 16772.1930803068 16819.219852029277 16866.378479928706 16913.669333710503 16961.092784116623 17008.64920292861 17056.338962970367 17104.162438111183 17152.12000326859 17200.21203441135 17248.43890856237 17296.801003801695 17345.298699269442 17393.93237516878 17442.70241276891 17491.609194408087 17540.653103496534 17589.834524519538 17639.15384304039 17688.611445703493 17738.2077202373 17787.943055457417 17837.817841269636 17887.832468672987 17937.987329762804 17988.28281773379 18038.71932688313 18089.297252613527 18140.01699143633 18190.87894097468 18241.883499966614 18293.031068268134 18344.322046856374 18395.75683783277 18447.335844426172 18499.059470996053 18550.928123035646 18602.942207175103 18655.102131184736 18707.40830397814 18759.86113561549 18812.461037306708 18865.208421414656 18918.10370145843 18971.14729211657 19024.339609230276 19077.681069806746 19131.17209202242 19184.813095226207 19238.604499942798 19292.546727876022 19346.64020191207 19400.885346122865 19455.282585769335 19509.832347304797 19564.535058378282 19619.3911478379 19674.401045734136 19729.565183323324 19784.883993070966 19840.357908655118 19895.98736496984 19951.7727981285 20007.71464546736 20063.813345548846 20120.069338165074 20176.48306434126 20233.05496633917 20289.785487660654 20346.675073051065 20403.724168502722 20460.93322125846 20518.30267981514 20575.832993927113 20633.52461460977 20691.37799414313 20749.393586075294 20807.571845226033 20865.91322769042 20924.418190842327 20983.087193338 21041.92069511976 21100.919157419474 21160.083042762275 21219.41281497014 21278.90893916553 21338.571881775024 21398.40211053303 21458.400094485387 21518.566303993073 21578.90121073591 21639.4052877162 21700.07900926254 21760.922851033403 21821.937290020993 21883.122804554878 21944.479874305835 22006.00898028956 22067.710604870445 22129.58523176535 22191.63334604741 22253.85543414983 22316.25198386972 22378.82348437189 22441.570426192702 22504.49330124391 22567.592602816487 22630.86882558457 22694.322465609268 22757.95402034256 22821.76398863121 22885.7528707207 22949.921168259094 23014.269384301042 23078.798023311654 23143.5075911705 23208.398595175524 23273.47154404715 23338.726947932104 23404.16531840751 23469.78716848485 23535.59301261406 23601.583366687497 23667.758748044023 23734.11967547302 23800.666669218463 23867.40025098306 23934.320943932275 24001.429272698453 24068.725763384937 24136.210943570157 24203.885342311834 24271.749490151058 24339.80391911651 24408.0491627286 24476.485756003618 24545.114235457975 24613.935139112404 24682.949006496165 24752.15637865128 24821.557798136786 24891.15380903293 24960.944956945557 25030.931789010236 25101.114853896677 25171.494701812946 25242.071884509805 25312.8469552851 25383.820468987986 25454.992982023334 25526.36505235615 25597.937239515843 25669.71010460067 25741.6842102821 25813.86012080931 25886.238402013518 25958.819621312425 26031.604347714732 26104.593151824527 26177.78660584579 26251.185283586892 26324.789760465083 26398.600613510982 26472.618421373103 26546.843764322453 26621.277224256988 26695.919384706245 26770.770830835885 26845.832149452275 26921.103929007153 26996.586759602116 27072.281232993377 27148.1879425963 27224.307483490138 27300.64045242265 27377.187447814747 27453.94906976529 27530.925920055706 27608.118602154707 27685.527721223065 27763.153884118317 27840.99769939956 27919.059777332175 27997.340729892676 28075.84117077343 28154.56171538754 28233.50298087361 28312.665586100633 28392.0501516728 28471.657299934395 28551.487654974666 28631.54184263272 28711.820490502414 28792.324227937286 28873.053686055493 28954.009497744766 29035.192297667323 29116.602722264943 29198.241409763847 29280.109000179757 29362.206135322907 29444.53345880309 29527.09161603466 29609.88125424164 29692.903022462768 29776.15757155657 29859.645554206538 29943.367624926133 30027.324440064 30111.516657809098 30195.944938195822 30280.609943109266 30365.51233629029 30450.65278334083 30536.03195172904 30621.650510794578 30707.509131753803 30793.6084877051 30879.949253634113 30966.532106419036 31053.357724835954 31140.42678956413 31227.73998319134 31315.29799021924 31403.101497068747 31491.15119208535 31579.44776554463 31667.991909657576 31756.784318575985 31845.825688398 31935.116717173525 32024.65810490969 32114.450553576324 32204.494767111486 32294.791451426972 32385.34131441387 32476.14506594807 32567.20341789585 32658.517084119474 32750.086780482747 32841.913224856646 32933.99713712501 33026.33923919005 33118.940254978166 33211.80091044549 33304.92193358361 33398.30405442534 33491.94800505036 33585.85451959108 33680.02433423814 33774.458187246535 33869.156818941105 33964.120971722485 34059.351390072945 34154.848820562096 34250.61401185283 34346.64771470722 34442.95068199233 34539.52366868615 34636.367431883606 34733.48273080225 34830.870326788514 34928.53098332341 35026.4654660288 35124.674542673085 35223.15898317745 35321.91955962177 35420.95704625078 35520.27221948007 35619.86585790221 35719.73874229275 35819.89165561646 35920.32538303349 36021.040711905356 36122.038431801295 36223.31933450437 36324.88421401764 36426.73386657051 36528.869090624816 36631.290686881206 36733.99945828543 36836.996210034464 36940.281749582944 37043.85688664964 37147.72243322354 37251.87920357034 37356.32801423879 37461.069684067195 37566.10503418976 37671.434888042924 37777.06007137204 37882.98141223767 37989.19974102213 38095.71589043604 38202.53069552484 38309.64499367523 38417.05962462189 38524.775430453985 38632.79325562173 38741.113946943085 38849.73835361041 38958.667327197014 39067.901721663875 39177.44239336639 39287.29020106109 39397.44600591226 39507.91067149881 39618.68506382099 39729.77005130717 39841.16650482067 39952.87529766659 40064.89730559867 40177.233406826104 40289.88448202046 40402.85141432258 40516.13508934957 40629.73639520154 40743.6562224688 40857.89546423877 40972.45501610288 41087.335776163716 41202.53864504192 41318.0645258835 41433.914324366604 41550.088948708915 41666.589309674484 41783.41632058108 41900.570897307254 42018.05395829962 42135.86642457995 42254.00921975231 42372.483270010554 42491.28950414538 42610.428853551755 42729.90225223603 42849.71063682347 42969.85494656547 43090.33612334691 43211.15511169357 43332.312858779645 43453.810314434966 43575.64843115258 43697.82816409623 43820.35047110771 43943.216312714554 44066.426652137416 44189.982455297664 44313.88469082499 44438.134330065004 44562.73234708684 44687.67971869069 44812.977424415665 44938.62644654729 45064.627770125255 45190.982382951224 45317.691275596495 45444.75544140974 45572.17587652487 45699.95357986879 45828.08955316927 45956.58480096279 46085.44033060237 46214.65715226551 46344.23627896206 46474.17872654232 46604.485513704785 46735.157662004254 46866.19619585981 46997.60214256288 47129.376532285234 47261.520398087094 47394.03477592526 47526.92070466121 47660.17922606921 47793.81138484449 47927.81822861151 48062.20080793206 48196.96017631356 48332.097390217365 48467.613509066956 48603.50959525622 48739.786714157985 48876.445934132076 49013.488326533945 49150.914965722906 49288.72692907066 49426.92529696967 49565.5111528417 49704.485583146205 49843.84967738901 49983.604528130665 50123.75123099515 50264.29088467839 50405.22459095692 50546.55345469647 50688.27858386062 50830.401089519575 50972.9220858588 51115.84269018777 51259.16402294875 51402.887207725544 51547.01337125228 51691.543643422374 51836.47915729722 51981.82104911514 52127.5704583004 52273.72852747194 52420.29640245249 52567.27523227755 52714.66616920421 52862.470368720424 53010.68898955391 53159.32319368136 53308.374146337446 53457.84301602392 53607.73097451892 53758.03919688605 53908.768861483644 54059.92114997397 54211.497247332445 54363.49834185706 54515.92562517759 54668.780292264935 54822.0635414406 54975.77657438594 55129.92059615169 55284.49681516734 55439.50644325063 55594.95069561709 55750.83079088956 55907.14795110762 56063.90340173735 56221.09837168084 56378.73409328582 56536.811802355405 56695.33273815768 56854.29814343542 57013.70926441596 57173.567350820755 57333.87365587542 57494.62943631935 57655.835952415626 57817.49446796105 57979.606250295816 58142.172570313545 58305.194702471344 58468.67392479962 58632.61151891224 58797.008770016546 58961.8669669234 59127.187402057236 59292.97137146637 59459.22017483293 59625.93511548326 59793.11750039797 59960.768640222326 60128.88984927636 60297.4824455653 60466.54775078992 60636.08709035676 60806.10179338875 60976.5931927353 61147.56262498307 61319.011430466206 61490.940953277095 61663.35254127665 61836.24754610499 62009.62732319214 62183.49323176843 62357.84663487531 62532.68889937601 62708.02139596631 62883.84549918509 63060.16258742529 63236.97404294473 63414.281251876775 63592.08560424134 63770.388493955776 63949.19131884581 64128.49548065637 64308.30238506271 64488.61344168142 64669.43006408142 64850.75366979509 65032.58568032931 65214.92752117673 65397.78062182687 65581.14641577729 65765.02634054486 65949.42183767704 66134.3343527632 66319.76533544596 66505.71623943246 66692.18852250582 66879.18364653668 67066.70307749443 67254.74828545879 67443.32074463158 67632.42193334784 67822.05333408773 68012.21643348811 68202.91272235407 68394.14369567076 68585.91085261504 68778.21569656726 68971.05973512295 69164.44448010481 69358.37144757445 69552.8421578442 69747.85813548922 69943.42090935932 70139.53201259107 70336.19298261956 70533.40536119077 70731.17069437337 70929.49053257116 71128.36643053495 71327.7999473748 71527.7926465723 71728.3460959929 71929.461867898 72131.14153895751 72333.38669026208 72536.19890733525 72739.57978014654 72943.53090312329 73148.05387516333 73353.15029964762 73558.82178445293 73765.06994196394 73971.89638908656 74179.30274726005 74387.29064247 74595.86170526122 74805.01757074994 75014.75987863734 75225.0902732219 75436.01040341258 75647.5219227417 75859.6264893776 76072.3257661381 76285.62142050327 76499.51512462845 76714.00855535766 76929.10339423628 77144.80132752476 77361.10404621135 77578.01324602569 77795.53062745203 78013.65789574246 78232.3967609304 78451.74893784393 78671.7161461193 78892.30011021426 79113.50255942171 79335.32522788335 79557.76985460313 79780.83818346084 80004.53196322588 80228.8529475709 80453.80289508562 80679.38356929069 80905.59673865128 81132.44417659112 81359.9276615064 81588.04897677964 81816.80991079361 82046.21225694561 82276.25781366132 82506.94838440885 82738.28577771306 82970.27180716967 83202.90829145923 83436.19705436191 83670.1399247713 83904.73873670911 84139.99532933916 84375.91154698217 84612.48923913 84849.73026046024 85087.63647085073 85326.20973539412 85565.4519244125 85805.36491347212 86045.95058339792 86287.21082028851 86529.14751553092 86771.76256581512 87015.05787314929 87259.03534487441 87503.69689367966 87749.04443761679 87995.07990011566 88241.80520999919 88489.22230149829 88737.3331142673 88986.13959339891 89235.64368943973 89485.84735840534 89736.75256179574 89988.3612666106 90240.6754453648 90493.69707610404 90747.42814241986 91001.87063346578 91257.02654397246 91512.89787426352 91769.48663027119 92026.79482355205 92284.82447130287 92543.57759637611 92803.05622729627 93063.26239827539 93324.19814922924 93585.86552579324 93848.26657933826 94111.4033669871 94375.27795163034 94639.89240194269 94905.248792399 95171.34920329074 95438.19572074222 95705.79043672698 95974.13544908396 96243.23286153424 96513.08478369749 96783.69333110838 97055.06062523316 97327.18879348654 97600.07996924798 97873.73629187877 98148.1599067386 98423.35296520244 98699.31762467753 98976.05604861987 99253.57040655176 99531.86287407833 99810.9356329049 100090.79087085396 100371.43078188227 100652.85756609819 100935.07342977884 101218.08058538743 101501.8812515905 101786.4776532755 102071.8720215682 102358.06659384993 102645.0636137755 102932.86533129042 103221.47400264896 103510.89189043136 103801.12126356194 104092.16439732663 104384.02357339115 104676.70107981839 104970.19921108687 105264.52026810833 105559.66655824604 105855.64039533272 106152.4440996887 106450.07999814027 106748.55042403772 107047.85771727365 107348.00422430155 107648.99229815385 107950.82429846068 108253.50259146804 108557.02955005674 108861.4075537607 109166.63898878575 109472.72624802818 109779.67173109378 110087.47784431635 110396.14700077675 110705.68162032175 111016.08412958296 111327.35696199606 111639.50255781961 111952.52336415427 112266.42183496214 112581.20043108574 112896.86162026762 113213.40787716916 113530.84168339071 113849.16552749046 114168.38190500425 114488.4933184649 114809.50227742217 115131.411298462 115454.22290522663 115777.93962843418 116102.56400589852 116428.09858254925 116754.54591045139 117081.90854882578 117410.18906406884 117739.39002977281 118069.5140267459 118400.56364303252 118732.54147393364 119065.450122027 119399.29219718762 119734.0703166082 120069.78710481965 120406.44519371184 120744.04722255381 121082.59583801497 121422.09369418539 121762.54345259696 122103.94778224411 122446.30935960475 122789.6308686611 123133.91500092109 123479.16445543893 123825.38193883697 124172.57016532627 124520.73185672823 124869.8697424958 125219.98655973494 125571.08505322602 125923.16797544544 126276.23808658714 126630.29815458413 126985.35095513039 127341.39927170258 127698.44589558171 128056.49362587517 128415.54526953863 128775.6036413982 129136.67156417214 129498.75186849327 129861.84739293114 130225.96098401415 130591.09549625199 130957.25379215802 131324.43874227165 131692.6532251808 132061.90012754453 132432.18234411578 132803.50277776376 133175.86433949714 133549.26994848647 133923.72253208718 134299.2250258628 134675.78037360765 135053.39152736985 135432.06144747484 135811.79310254828 136192.58946953947 136574.45353374459 136957.38828883017 137341.39673685643 137726.48188830126 138112.6467620833 138499.89438558565 138888.22779467967 139277.65003374932 139668.16415571424 140059.77322205406 140452.4803028323 140846.28847672066 141241.2008310229 141637.220461699 142034.35047338967 142432.5939794407 142831.95410192688 143232.43397167712 143634.0367282988 144036.76552020223 144440.6235046251 144845.61384765792 145251.7397242682 145659.00431832593 146067.41082262772 146476.96243892272 146887.66237793706 147299.5138593994 147712.520112066 148126.68437374625 148542.00989132762 148958.49992080152 149376.15772728866 149794.98658506467 150214.98977758578 150636.17059751446 151058.5323467455 151482.07833643167 151906.81188700948 152332.73632822573 152759.85499916328 153188.17124826726 153617.68843337154 154048.40992172444 154480.33909001583 154913.47932440342 155347.8340205391 155783.40658359556 156220.20042829323 156658.21897892674 157097.4656693923 157537.94394321393 157979.65725357085 158422.60906332458 158866.80284504592 159312.2420810424 159758.9302633852 160206.87089393684 160656.06748437858 161106.52355623784 161558.24264091617 162011.22827971628 162465.48402387032 162921.0134345676 163377.82008298254 163835.90755030265 164295.27942775632 164755.93931664122 165217.89082835295 165681.13758441253 166145.6832164952 166611.5313664591 167078.6856863735 167547.1498385476 168016.9274955592 168488.02234028306 168960.4380659208 169434.17837602898 169909.24698454814 170385.64761583257 170863.38400467875 171342.45989635537 171822.879046632 172304.6452218088 172787.7621987463 173272.23376489474 173758.06371832374 174245.25586775213 174733.81403257782 175223.74204290812 175715.043739589 176207.7229742354 176701.7836092622 177197.2295179136 177694.06458429378 178192.29270339772 178691.9177811408 179192.9437343904 179695.37449099624 180199.213989821 180704.4661807716 181211.13502482968 181719.2244940829 182228.73857175623 182739.68125224288 183252.05654113583 183765.8684552591 184281.12102269928 184797.8182828373 185315.96428637957 185835.56309539053 186356.61878332365 186879.13543505414 187403.11714691023 187928.5680267059 188455.49219377284 188983.89377899247 189513.776924829 190045.14578536127 190578.00452631555 191112.35732509833 191648.2083708287 192185.56186437162 192724.42201837056 193264.79305728065 193806.6792174018 194350.08474691192 194895.0139059002 195441.47096640032 195989.46021242422 196538.98593999568 197090.05245718377 197642.66408413678 198196.82515311602 198752.54000853 199309.81300696815 199868.64851723515 200429.05092038526 200991.02460975663 201554.57399100545 202119.70348214087 202686.41751355943 203254.7205280799 203824.6169809782 204396.11134002195 204969.2080855058 205543.91171028663 206120.2267198184 206698.1576321879 207277.70897814995 207858.88530116293 208441.6911574243 209026.13111590644 209612.20975839268 210199.9316795128 210789.30148677924 211380.32380062324 211973.00325443124 212567.34449458082 213163.3521804772 213761.03098459032 214360.38559249064 214961.4207028865 215564.14102766057 216168.55129190718 216774.65623396882 217382.46060547378 217991.9691713733 218603.1867099785 219216.11801299866 219830.76788557807 220447.14114633386 221065.24262739392 221685.07717443485 222306.64964671966 222929.96491713615 223555.02787223482 224181.8434122674 224810.4164512252 225440.75191687772 226072.8547508111 226706.72990846727 227342.3823591819 227979.81708622444 228619.03908683662 229260.05337227156 229902.86496783333 230547.47891291627 231193.90026104412 231842.1340799103 232492.185451417 233144.05947171568 233797.76125124647 234453.29591477846 235110.6686014495 235769.8844648076 236430.9486728498 237093.8664080638 237758.64286746824 238425.2832626534 239093.79281982206 239764.17677983042 240436.44039822946 241110.58894530602 241786.6277061237 242464.5619805649 243144.39708337217 243826.13834418962 244509.79110760492 245195.36073319145 245882.85259554983 246572.27208435003 247263.62460437455 247956.91557555928 248652.15043303746 249349.33462718135 250048.47362364532 250749.57290340879 251452.6379628186 252157.67431363315 252864.68748306442 253573.6830138223 254284.66646415726 254997.6434079046 255712.61943452794 256429.6001491624 257148.5911726597 257869.59814163114 258592.62670849235 259317.68254150785 260044.77132483467 260773.89875856772 261505.07055878403 262238.29245758755 262973.5702031542 263710.90955977706 264450.31630791194 265191.7962442208 265935.3551816207 266680.99894932494 267428.7333928928 268178.5643742728 268930.49777184986 269684.53948049084 270440.695411591 271198.9714931208 271959.3736696707 272721.9079024999 273486.58016958175 274253.39646565093 275022.3628022506 275793.48520777933 276566.76972753875 277342.22242378024 278119.84937575244 278899.6566797499 279681.6504491608 280465.8368145136 281252.2219235256 282040.81194115244 282831.6130496344 283624.63144854666 284419.87335484603 285217.3450029218 286017.052644643 286819.00254940847 287623.2010041947 288429.6543136069 289238.36879992706 290049.3508031638 290862.60668110196 291678.1428093534 292495.96558140573 293316.08140867326 294138.4967205465 294963.2179644435 295790.2516058597 296619.60412841913 297451.2820339244 298285.29184240894 299121.6400921868 299960.33333990467 300801.37816059287 301644.781147718 302490.548913233 303338.6880876294 304189.20531999075 305042.1072780432 305897.4006482082 306755.09213565453 307615.1884643518 308477.69637712254 309342.6226356951 310209.9740207566 311079.7573320067 311951.9793882099 312826.64702724956 313703.7671061816 314583.3465012881 315465.3921081314 316349.9108416076 317236.9096360016 318126.39544504083 319018.3752419499 319912.8560195053 320809.84479009005 321709.34858574974 322611.37445824547 323515.9294791115 324423.0207397094 325332.6553512832 326244.8404450166 327159.5831720879 328076.89070372627 328996.7702312677 329919.22896621213 330844.2741402787 331771.9130054642 332702.15283409815 333635.000918901 334570.4645730412 335508.5511301912 336449.2679445872 337392.62239108514 338338.62186521903 339287.27378325816 340238.58558226697 341192.5647201622 342149.21867577074 343108.55494888977 344070.5810603444 345035.30455204734 346002.73298705736 346972.8739496391 347945.73504532274 348921.3239009627 349899.6481647983 350880.71550651325 351864.5336172959 352851.11020989943 353840.4530187029 354832.5697997713 355827.4683309162 356825.1564117572 357825.641863783 358828.93253041257 359835.0362770565 360843.96099117893 361855.71458235924 362870.30498235417 363887.7401451602 364908.028047075 365931.17668676144 366957.1940853088 367986.08828629623 369017.8673558568 370052.53938273917 371090.1124783717 372130.594776926 373173.9944353806 374220.3196335856 375269.5785743253 376321.77948338387 377376.9306096098 378435.0402249796 379496.1166246631 380560.16812708904 381627.20307400957 382697.22983056575 383770.256785353 384846.2923504882 385925.3449616738 387007.42307826446 388092.5351833344 389180.6897837423 390271.8954101994 391366.1606173361 392463.4939837681 393563.90411216434 394667.3996293143 395773.9891861965 396883.68145804456 397996.4851444165 399112.40896926314 400231.46168099507 401353.65205255285 402478.98888147506 403607.4809899667 404739.1372249699 405873.9664582314 407011.97758637316 408153.17953096237 409297.581238581 410445.1916808955 411596.01985472743 412750.0747821251 413907.36551043246 415067.9011123611 416231.6906860608 417398.743355192 418569.0682689963 419742.6746023681 420919.57155592676 422099.7683560894 423283.27425514214 424470.0985313138 425660.2504888473 426853.7394580733 428050.574795484 429250.7658838054 430454.32213207113 431661.2529756965 432871.56787655264 434085.2763230401 435302.38783016347 436522.9119396063 437746.8582198054 438974.2362660257 440205.05570043664 441439.3261721863 442677.0573574781 443918.25895964535 445162.94070922834 446411.11236405047 447662.7837092945 448917.9645575802 450176.66474903957 451438.8941513949 452704.6626600366 453973.9801980999 455246.85671654367 456523.3021942269 457803.3266379887 459086.94008272537 460374.15259146964 461664.97425547 462959.4151942681 464257.4855557811 465559.1955163779 466864.55528096115 468173.57508304634 469486.2651848425 470802.63587733207 472122.69748035184 473446.4603426745 474773.93484208855 476105.1313854804 477440.0604089161 478778.7323777228 480121.1577865712 481467.3471595565 482817.31105028285 484171.060041945 485528.6047474113 486889.955809307 488255.1239000979 489624.11972217355 490996.9540079316 492373.63751986175 493754.1810506305 495138.59542316466 496526.89149073744 497919.08013705263 499315.172276331 500715.178853395 502119.110843754 503526.97925369226 504938.7951203533 506354.5695118274 507774.3135272377 509198.03829682834 510625.75498205057 512057.4747756508 513493.208901759 514932.96861597453 516376.76520545676 517824.60998901265 519276.5143171847 520732.4895723418 522192.54716876644 523656.6985527453 525124.9552026588 526597.3286290712 528073.8303748205 529554.4720151087 531039.265157594 532528.2214424803 534021.3525426084 535518.6701635486 537020.1860436915 538525.9119543416 540035.8596998068 541550.041117494 543068.4680779992 544591.1524852018 546118.1062763601 547649.3414221999 549184.8699270121 550724.703828747 552268.8551991066 553817.3361436398 555370.1588018385 556927.3353472316 558488.8779874803 560054.7989644753 561625.1105544317 563199.8250679838 564778.9548502852 566362.5122811014 567950.5097749111 569542.959781 571139.8747835597 572741.2673017862 574347.1498899776 575957.535137632 577572.4356695471 579191.864145917 580815.8332624357 582444.3557503928 584077.4443767741 585715.1119443632 587357.3712918399 589004.2352938824 590655.7168612671 592311.8289409705 593972.5845162711 595637.9966068498 597308.0782688933 598982.8425951955 600662.3027152611 602346.4717954074 604035.3630388685 605728.9896858986 607427.3650138755 609130.502337404 610838.4150084222 612551.1164163055 614268.6199879696 615990.9391879779 617718.0875186472 619450.0785201514 621186.9257706312 622928.6428862963 624675.2435215357 626426.7413690217 628183.15015982 629944.4836634963 631710.7556882246 633481.9800808931 635258.1707272166 637039.3415518424 638825.5065184609 640616.679629914 642412.8749283063 644214.1064951138 646020.388451295 647831.7349574021 649648.1602136914 651469.6784602331 653296.3039770268 655128.0510841088 656964.9341416678 658806.9675501571 660654.1657504056 662506.543223733 664364.1144920613 666226.8941180313 668094.8967051144 669968.1368977288 671846.629381352 673730.3888826382 675619.4301695337 677513.7680513917 679413.4173790881 681318.3930451383 683228.7099838151 685144.3831712638 687065.4276256213 688991.8584071331 690923.6906182709 692860.9394038524 694803.6199511583 696751.7474900527 698705.3372931019 700664.404675694 702628.9649961592 704599.0336558905 706574.6260994646 708555.757814761 710542.4443330867 712534.7012292956 714532.5441219109 716535.9886732476 718545.0505895364 720559.7456210451 722580.0895622036 724606.0982517261 726637.7875727377 728675.1734528969 730718.27186452 732767.098824709 734821.6703954737 736882.0026838613 738948.1118420796 741020.0140676248 743097.7256034091 745181.2627378877 747270.6418051843 749365.8791852234 751466.9913038552 753573.9946329863 755686.9056907073 757805.7410414234 759930.5172959843 762061.251111814 764197.9591930406 766340.6582906297 768489.3652025129 770644.0967737212 772804.8698965168 774971.7015105245 777144.6086028662 779323.6082082925 781508.7174093177 783699.9533363532 785897.3331678403 788100.8741303864 790310.5934989012 792526.5085967288 794748.6367957869 796976.9955167011 799211.6022289414 801452.4744509596 803699.6297503272 805953.0857438726 808212.8600978188 810478.9705279225 812751.4347996128 815030.2707281307 817315.4961786682 819607.1290665091 821905.1873571683 824209.6890665338 826520.6522610073 828838.0950576467 831162.0356243073 833492.4921797828 835829.4829939516 838173.0263879179 840523.1407341555 842879.844456651 845243.1560310503 847613.0939848019 849989.6768973024 852372.9234000427 854762.8521767524 857159.4819635496 859562.8315490843 861972.9197746876 864389.7655345186 866813.3877757139 869243.8054985331 871681.0377565115 874125.103656607 876576.0223593509 879033.8130789979 881498.4950836754 883970.0876955378 886448.6102909151 888934.0823004647 891426.5232093263 893925.9525572724 896432.389938862 898945.8550035943 901466.3674560634 903993.9470561118 906528.613618986 909070.3870154906 911619.2871721458 914175.334071343 916738.5477515013 919308.9483072248 921886.5558894586 924471.390705649 927063.4730199015 929662.8231531383 932269.4614832586 934883.408445299 937504.6845315925 940133.3102919292 942769.306333718 945412.6933221479 948063.4919803509 950721.7230895628 953387.4074892879 956060.5660774591 958741.2198106066 961429.3897040186 964125.096831907 966828.3623275728 969539.2073835713 972257.6532518797 974983.721244062 977717.4327314354 980458.8091452414 983207.8719768105 985964.6427777322 988729.1431600227 991501.3947962954 994281.4194199304 997069.2388252458 999864.8748676664 . Here we initialize the total population to be 50, then set the growth factor as 1.00005 (.005 percent change). It will print the population every 56th day until it reaches one million. It multiplies the current population by the growth factor in each iteration, and increments the day count. When the day count reaches 56, it prints the current population and resets the day count to 0. . Note! This simulation assumes that the growth factor remains constant as time progresses, which may not be a realistic assumption in real-world scenarios. . import matplotlib.pyplot as plt # Define the initial population and growth rate population = 100 growth_rate = 0.05 # Define the number of years to simulate num_years = 50 # Create lists to store the population and year values populations = [population] years = [0] # Simulate population growth for the specified number of years for year in range(1, num_years+1): # Calculate the new population size new_population = population + (growth_rate * population) # Update the population and year lists populations.append(new_population) years.append(year) # Set the new population as the current population for the next iteration population = new_population # Plot the population growth over time plt.plot(years, populations) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Population&#39;) plt.title(&#39;Population Growth Simulation&#39;) plt.show() . If we create quantative data, we can plot it using the Matplotlib library. . Example on how simplification can cause bias . import random beak = [&quot;small-beak&quot;, &quot;long-beak&quot;, &quot;medium-beak&quot;], wing = [&quot;small-wings&quot;, &quot;large-wings&quot;, &quot;medium-wings&quot;], height = [&quot;short&quot;, &quot;tall&quot;,&quot;medium&quot;] naturaldisaster = [&quot;flood&quot;, &quot;drought&quot;, &quot;fire&quot;, &quot;hurricane&quot;, &quot;dustbowl&quot;] print(&quot;When a&quot; , random.choice(naturaldisaster) , &quot;hit&quot;, random.choice(height), &quot;birds died&quot;) . How does this simulation have bias? . JS examples . Dice Roll Binary Coin Flip Card Pull . Hacks . Answer all questions and prompts in the notes (0.2) | Create a simulation Create a simulation that uses iteration and some form of data collection (list, dictionary...) (0.4) try creating quantative data and using the Matplotlib library to display said data | Comment and describe function of each parts | How does your simulation help solve/mimic a real world problem? | Is there any bias in your simulation? Meaning, are there any discrepancies between your program and the real event? | . | | Answer these simulation questions (0.3) | Bonus: take a real world event and make a pseudocode representation or pseudocode on a flowchart of how you would make a simulation for it (up to +0.1 bonus) | .",
            "url": "https://sanikasha.github.io/superFastPages/student/2023/04/25/P3M-Simulations.html",
            "relUrl": "/student/2023/04/25/P3M-Simulations.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "P3-M 4/21 Binary Overview",
            "content": "How to contact us . Join the &quot;coding&quot; channel on slack! That is the only place where we will be answering questions or sending announcements about lessons. If you have a question please contact us there. . How to join . Click on &quot;add channels&quot; below the list of channels | Click on &quot;browse channels&quot; | Search for &quot;coding&quot; | Click the green &quot;Join&quot; button on the right | . Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for binary digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called abstraction. | . | . Practice Questions: . How many bits are in 3 bytes? | 24 bits . What digital information can be represented by bits? | 0 and 1 . Are bits an analog or digital form of storing data? What is the difference between the two? | digital, analog is manual and digital is computing . Examples . Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(10) . binary is cool binary is awesome binary is awesome binary is cool binary is cool binary is awesome binary is cool binary is cool binary is awesome binary is awesome . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in overflow or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Practice Questions: . What is the largest number can be represented by 5 bits? | 32 . One programing language can only use 16 bits to represent non-negative numbers, while a second language uses 56 bits to represent numbers. How many times as many unique numbers can be represented by the second language? | 56-16 = 40 . 2^40 . 5 bits are used to represent both positive and negative numbers, what is the largest number that can be represented by these bits? (hint: different thatn question 1) | 8 . Examples . import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(5, 70000) . OverflowError Traceback (most recent call last) /Users/sanika/vscode/superFastPages/2023-04-21-P3M-BinaryLesson.ipynb Cell 5 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/sanika/vscode/superFastPages/2023-04-21-P3M-BinaryLesson.ipynb#W4sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(str(base) + &#34;^&#34; + str(power) + &#34; = &#34; + str(math.pow(base, power))) &lt;a href=&#39;vscode-notebook-cell:/Users/sanika/vscode/superFastPages/2023-04-21-P3M-BinaryLesson.ipynb#W4sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/sanika/vscode/superFastPages/2023-04-21-P3M-BinaryLesson.ipynb#W4sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; exponent(5, 70000) /Users/sanika/vscode/superFastPages/2023-04-21-P3M-BinaryLesson.ipynb Cell 5 in exponent(base, power) &lt;a href=&#39;vscode-notebook-cell:/Users/sanika/vscode/superFastPages/2023-04-21-P3M-BinaryLesson.ipynb#W4sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; def exponent(base, power): &lt;a href=&#39;vscode-notebook-cell:/Users/sanika/vscode/superFastPages/2023-04-21-P3M-BinaryLesson.ipynb#W4sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &#34;^&#34; and &#34;=&#34;. -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/sanika/vscode/superFastPages/2023-04-21-P3M-BinaryLesson.ipynb#W4sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(str(base) + &#34;^&#34; + str(power) + &#34; = &#34; + str(math.pow(base, power))) OverflowError: math range error . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning each digit can only represent values of 0 and 1. | Decimal is Base 10, meaning eacht digit can represent values from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Practice Questions: . What values can each digit of a Base 5 system represent? | 0, 5, 25, 125, etc. . What base is Hexadecimal? What range of values can each digit of Hexadecimal represent? | Base 6, 0, 6, 36, 1296, etc. . When using a base above 10, letters can be used to represent numbers past 9. These letters start from A and continue onwards. For example, the decimal number 10 is represented by the letter A in Hexadecimal. What letter would be used to represent the Base 10 number 23 in a Base 30 system? What about in a Base 50 system? | For base 10, the representation would be M, as 23 is 13 more than the Base 10 allows. In the base 50 system the number should be 23, without letters as there are enough characters to represent 23. . I am still not in full understanding of this question, and will be following up on Monday to better understand. . Examples . Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) . 001010 = 2^3 + 2 = 10 | 11100010 = 2 + 2^5 + 2^6 + 2^7 = 226 | 10 = 2 | | Fill in the blanks (convert to binary) . | . 12 = 1100 | 12/2 = 0 6/2 = 0 3/2 = 1 1/2 = 1 . 35 = 100011 | 35/2 = 1 17/2 = 1 8/2 = 0 4/2 = 0 2/2 = 0 1/2 = 1 . 256 = 10000000 | 256/2 = 0 128/2 = 0 64/2 = 0 32/2 = 0 16/2 = 0 8/2 = 0 4/2 = 0 2/2 = 0 1/2 = 1 . Hacks &amp; Grading (Due SUNDAY NIGHT 4/23) . Complete all of the popcorn hacks (Fill in the blanks + run code cells and interact + Answer ALL questions) [0.3 or nothing] | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) [0.6 or nothing] For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) [0.1 or nothing] | . | . Coding Hacks and Bonus . This code uses functions bin() which converts an integer to its binary representation, while int() converts a binary representation to an integer with a specific base. The base in this case being 2, because we are using binary. Because the program converts the input to an integer, than manipulates them, we can use simple syntax like +, -, //, and * to add/subtract/divide/multiply the numbers. . a = input(&quot;Enter first binary number:&quot;) # example number 111 (dec 7), 3 bit input b = input(&quot;Enter second binary number:&quot;) # example number 11 (dec 3), 2 bit input print(&quot;Input a:&quot;, a) print(&quot;Input b:&quot;, b) def addnums(): # define function for add add = bin(int(a, 2) + int(b, 2)) # converts inputs to integers, adds them, then converts back to binary print(&quot;Sum:&quot;, str(int(add[2:], 2))) # converts back to integers addnums() # displays output def subnums(): # define function for subtract sub = bin(int(a, 2) - int(b, 2)) # converts inputs to integers, subtracts them, then converts back to binary print(&quot;Difference:&quot;, str(int(sub[2:], 2))) subnums() def multinums(): # define function for multiply multi = bin(int(a, 2) * int(b, 2)) # converts inputs to integers, multiplies them, then converts back to binary print(&quot;Product:&quot;, str(int(multi[2:], 2))) multinums() def divnums(): # define function for divide div = bin(int(a, 2) // int(b, 2)) # converts inputs to integers, divides them, then converts back to binary print(&quot;Quotient:&quot;, str(int(div[2:], 2))) divnums() . Input a: 111 Input b: 11 Sum: 10 Difference: 4 Product: 21 Quotient: 2 .",
            "url": "https://sanikasha.github.io/superFastPages/student/2023/04/21/P3M-BinaryLesson.html",
            "relUrl": "/student/2023/04/21/P3M-BinaryLesson.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "MC 2018 Corrections",
            "content": "Q42 Increasing bit representation for internet protocol . . Correct answer: 2^96 as many addresses available Why?: IPv4 is 2^32 while IPv6 has 2^128 . Q65 Correcting errors in procedure Multiply . . Correct: When the values of x and y are both negative (I got part of the question right). Why?: Count must always be 0 or greater, and if y=count and y is negative this condition cannot be met. .",
            "url": "https://sanikasha.github.io/superFastPages/2023/04/18/MC18.html",
            "relUrl": "/2023/04/18/MC18.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 3.2 GHz 8cores | Memory in GB: 8 GB | Storage in GB: 251 GB | OS: macOS Monterey | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. True | Access to the internet depends on the ability to connect a computing device to an internet connected device. . | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://sanikasha.github.io/superFastPages/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "MC 4 Corrections",
            "content": "Q6 contents of an Internet packet . . Each packet contains metadata in addition to the traditional data, and does not contain an encrypted version of the data. . Q8 Simulating packets traveling from server to client . . While I got one answer correct, I missed the aspect of a simulation that provides a better understanding of the impact of increased connection speeds for frequently visited servers.m . Q39 Displaying random values in a loop . . This was a question I struggled to understand a bit more than the others. While I picked 1 1 1 1, the college board explanation for why this was incorrect consisted of: Incorrect. The first number displayed must be 1. The second number displayed could be 1 or 2. The third number displayed could be 1, 2, or 3. The last number displayed could be 1, 2, 3, or 4. So 1 1 1 1 is a possible output. The correct answer is 1 3 2 4. .",
            "url": "https://sanikasha.github.io/superFastPages/ap%20exam/2023/03/31/MC4.html",
            "relUrl": "/ap%20exam/2023/03/31/MC4.html",
            "date": " • Mar 31, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions X",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a ___. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is ___. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # It removes repeats # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # We need to avoid repeating items in Hashmaps and Hashtables, so we may use similar concepts. # . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . red_album = { &quot;title&quot;: &quot;Red (Taylor&#39;s Version)&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2021, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;, &quot;Country&quot;], &quot;tracks&quot;: { 1: &quot;State of Grace&quot;, 2: &quot;Red&quot;, 3: &quot;Treacherous&quot;, 4: &quot;I Knew You Were Trouble (Taylor&#39;s Version)&quot;, 5: &quot;All Too Well (Taylor&#39;s Version)&quot;, 6: &quot;22 (Taylor&#39;s Version)&quot;, 7: &quot;I Almost Do (Taylor&#39;s Version)&quot;, 8: &quot;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&quot;, 9: &quot;Stay Stay Stay (Taylor&#39;s Version)&quot;, 10: &quot;The Last Time (Taylor&#39;s Version)&quot;, 11: &quot;Holy Ground (Taylor&#39;s Version)&quot;, 12: &quot;Sad Beautiful Tragic (Taylor&#39;s Version)&quot;, 13: &quot;The Lucky One (Taylor&#39;s Version)&quot;, 14: &quot;Everything Has Changed (Taylor&#39;s Version)&quot;, 15: &quot;Starlight (Taylor&#39;s Version)&quot;, 16: &quot;Begin Again (Taylor&#39;s Version)&quot;, 17: &quot;The Moment I Knew (Taylor&#39;s Version)&quot;, 18: &quot;Come Back...Be Here (Taylor&#39;s Version)&quot;, 19: &quot;Girl At Home (Taylor&#39;s Version)&quot;, 20: &quot;Ronan (Taylor&#39;s Version)&quot;, 21: &quot;Better Man (Taylor&#39;s Version)[From the Vault]&quot;, 22: &quot;Nothing New (Taylor&#39;s Version)[From the Vault]&quot;, 23: &quot;Babe (Taylor&#39;s Version)[From the Vault]&quot;, 24: &quot;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&quot;, 25: &quot;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&quot;, 26: &quot;Forever Winter (Taylor&#39;s Version)[From the Vault]&quot;, 27: &quot;Run (Taylor&#39;s Version)[From the Vault]&quot;, 28: &quot;The Very First Night (Taylor&#39;s Version)[From the Vault]&quot;, 29: &quot;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&quot; } } # What data structures do you see? # Lists and dictionaries # # Printing the dictionary print(red_album) . {&#39;title&#39;: &#34;Red (Taylor&#39;s Version)&#34;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2021, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;Country&#39;], &#39;tracks&#39;: {1: &#39;State of Grace&#39;, 2: &#39;Red&#39;, 3: &#39;Treacherous&#39;, 4: &#34;I Knew You Were Trouble (Taylor&#39;s Version)&#34;, 5: &#34;All Too Well (Taylor&#39;s Version)&#34;, 6: &#34;22 (Taylor&#39;s Version)&#34;, 7: &#34;I Almost Do (Taylor&#39;s Version)&#34;, 8: &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;, 9: &#34;Stay Stay Stay (Taylor&#39;s Version)&#34;, 10: &#34;The Last Time (Taylor&#39;s Version)&#34;, 11: &#34;Holy Ground (Taylor&#39;s Version)&#34;, 12: &#34;Sad Beautiful Tragic (Taylor&#39;s Version)&#34;, 13: &#34;The Lucky One (Taylor&#39;s Version)&#34;, 14: &#34;Everything Has Changed (Taylor&#39;s Version)&#34;, 15: &#34;Starlight (Taylor&#39;s Version)&#34;, 16: &#34;Begin Again (Taylor&#39;s Version)&#34;, 17: &#34;The Moment I Knew (Taylor&#39;s Version)&#34;, 18: &#34;Come Back...Be Here (Taylor&#39;s Version)&#34;, 19: &#34;Girl At Home (Taylor&#39;s Version)&#34;, 20: &#34;Ronan (Taylor&#39;s Version)&#34;, 21: &#34;Better Man (Taylor&#39;s Version)[From the Vault]&#34;, 22: &#34;Nothing New (Taylor&#39;s Version)[From the Vault]&#34;, 23: &#34;Babe (Taylor&#39;s Version)[From the Vault]&#34;, 24: &#34;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&#34;, 25: &#34;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&#34;, 26: &#34;Forever Winter (Taylor&#39;s Version)[From the Vault]&#34;, 27: &#34;Run (Taylor&#39;s Version)[From the Vault]&#34;, 28: &#34;The Very First Night (Taylor&#39;s Version)[From the Vault]&#34;, 29: &#34;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&#34;}} . print(red_album.get(&#39;tracks&#39;)) # or print(red_album[&#39;tracks&#39;]) . {1: &#34;State of Grace (Taylor&#39;s Version)&#34;, 2: &#34;Red (Taylor&#39;s Version)&#34;, 3: &#34;Treacherous (Taylor&#39;s Version)&#34;, 4: &#34;I Knew You Were Trouble (Taylor&#39;s Version)&#34;, 5: &#34;All Too Well (Taylor&#39;s Version)&#34;, 6: &#34;22 (Taylor&#39;s Version)&#34;, 7: &#34;I Almost Do (Taylor&#39;s Version)&#34;, 8: &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;, 9: &#34;Stay Stay Stay (Taylor&#39;s Version)&#34;, 10: &#34;The Last Time (Taylor&#39;s Version)&#34;, 11: &#34;Holy Ground (Taylor&#39;s Version)&#34;, 12: &#34;Sad Beautiful Tragic (Taylor&#39;s Version)&#34;, 13: &#34;The Lucky One (Taylor&#39;s Version)&#34;, 14: &#34;Everything Has Changed (Taylor&#39;s Version)&#34;, 15: &#34;Starlight (Taylor&#39;s Version)&#34;, 16: &#34;Begin Again (Taylor&#39;s Version)&#34;, 17: &#34;The Moment I Knew (Taylor&#39;s Version)&#34;, 18: &#34;Come Back...Be Here (Taylor&#39;s Version)&#34;, 19: &#34;Girl At Home (Taylor&#39;s Version)&#34;, 20: &#34;Ronan (Taylor&#39;s Version)&#34;, 21: &#34;Better Man (Taylor&#39;s Version)[From the Vault]&#34;, 22: &#34;Nothing New (Taylor&#39;s Version)[From the Vault]&#34;, 23: &#34;Babe (Taylor&#39;s Version)[From the Vault]&#34;, 24: &#34;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&#34;, 25: &#34;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&#34;, 26: &#34;Forever Winter (Taylor&#39;s Version)[From the Vault]&#34;, 27: &#34;Run (Taylor&#39;s Version)[From the Vault]&#34;, 28: &#34;The Very First Night (Taylor&#39;s Version)[From the Vault]&#34;, 29: &#34;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&#34;} {1: &#34;State of Grace (Taylor&#39;s Version)&#34;, 2: &#34;Red (Taylor&#39;s Version)&#34;, 3: &#34;Treacherous (Taylor&#39;s Version)&#34;, 4: &#34;I Knew You Were Trouble (Taylor&#39;s Version)&#34;, 5: &#34;All Too Well (Taylor&#39;s Version)&#34;, 6: &#34;22 (Taylor&#39;s Version)&#34;, 7: &#34;I Almost Do (Taylor&#39;s Version)&#34;, 8: &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;, 9: &#34;Stay Stay Stay (Taylor&#39;s Version)&#34;, 10: &#34;The Last Time (Taylor&#39;s Version)&#34;, 11: &#34;Holy Ground (Taylor&#39;s Version)&#34;, 12: &#34;Sad Beautiful Tragic (Taylor&#39;s Version)&#34;, 13: &#34;The Lucky One (Taylor&#39;s Version)&#34;, 14: &#34;Everything Has Changed (Taylor&#39;s Version)&#34;, 15: &#34;Starlight (Taylor&#39;s Version)&#34;, 16: &#34;Begin Again (Taylor&#39;s Version)&#34;, 17: &#34;The Moment I Knew (Taylor&#39;s Version)&#34;, 18: &#34;Come Back...Be Here (Taylor&#39;s Version)&#34;, 19: &#34;Girl At Home (Taylor&#39;s Version)&#34;, 20: &#34;Ronan (Taylor&#39;s Version)&#34;, 21: &#34;Better Man (Taylor&#39;s Version)[From the Vault]&#34;, 22: &#34;Nothing New (Taylor&#39;s Version)[From the Vault]&#34;, 23: &#34;Babe (Taylor&#39;s Version)[From the Vault]&#34;, 24: &#34;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&#34;, 25: &#34;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&#34;, 26: &#34;Forever Winter (Taylor&#39;s Version)[From the Vault]&#34;, 27: &#34;Run (Taylor&#39;s Version)[From the Vault]&#34;, 28: &#34;The Very First Night (Taylor&#39;s Version)[From the Vault]&#34;, 29: &#34;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&#34;} . print(red_album.get(&#39;tracks&#39;)[4]) # or print(red_album[&#39;tracks&#39;][4]) . I Knew You Were Trouble (Taylor&#39;s Version) I Knew You Were Trouble (Taylor&#39;s Version) . red_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # # make it a set red_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # Printing the dictionary print(red_album) . {&#39;title&#39;: &#34;Red (Taylor&#39;s Version)&#34;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2021, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;Country&#39;], &#39;tracks&#39;: {1: &#34;State of Grace (Taylor&#39;s Version)&#34;, 2: &#34;Red (Taylor&#39;s Version)&#34;, 3: &#34;Treacherous (Taylor&#39;s Version)&#34;, 4: &#34;I Knew You Were Trouble (Taylor&#39;s Version)&#34;, 5: &#34;All Too Well (Taylor&#39;s Version)&#34;, 6: &#34;22 (Taylor&#39;s Version)&#34;, 7: &#34;I Almost Do (Taylor&#39;s Version)&#34;, 8: &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;, 9: &#34;Stay Stay Stay (Taylor&#39;s Version)&#34;, 10: &#34;The Last Time (Taylor&#39;s Version)&#34;, 11: &#34;Holy Ground (Taylor&#39;s Version)&#34;, 12: &#34;Sad Beautiful Tragic (Taylor&#39;s Version)&#34;, 13: &#34;The Lucky One (Taylor&#39;s Version)&#34;, 14: &#34;Everything Has Changed (Taylor&#39;s Version)&#34;, 15: &#34;Starlight (Taylor&#39;s Version)&#34;, 16: &#34;Begin Again (Taylor&#39;s Version)&#34;, 17: &#34;The Moment I Knew (Taylor&#39;s Version)&#34;, 18: &#34;Come Back...Be Here (Taylor&#39;s Version)&#34;, 19: &#39;All Too Well (10 minute version)&#39;, 20: &#34;Ronan (Taylor&#39;s Version)&#34;, 21: &#34;Better Man (Taylor&#39;s Version)[From the Vault]&#34;, 22: &#34;Nothing New (Taylor&#39;s Version)[From the Vault]&#34;, 23: &#34;Babe (Taylor&#39;s Version)[From the Vault]&#34;, 24: &#34;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&#34;, 25: &#34;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&#34;, 26: &#34;Forever Winter (Taylor&#39;s Version)[From the Vault]&#34;, 27: &#34;Run (Taylor&#39;s Version)[From the Vault]&#34;, 28: &#34;The Very First Night (Taylor&#39;s Version)[From the Vault]&#34;, 29: &#34;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&#34;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;}} . import json # Adding a an key-value pair to an existing key red_album[&quot;tracks&quot;].update({19: &quot;All Too Well (10 minute version)&quot;}) # How would add an additional genre to the dictionary, like electropop? # #red_album[&quot;genre&quot;].update({20: &quot;Pop-rock&quot;}) # Printing the dictionary print(red_album) . {&#39;title&#39;: &#34;Red (Taylor&#39;s Version)&#34;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2021, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;Country&#39;], &#39;tracks&#39;: {1: &#34;State of Grace (Taylor&#39;s Version)&#34;, 2: &#34;Red (Taylor&#39;s Version)&#34;, 3: &#34;Treacherous (Taylor&#39;s Version)&#34;, 4: &#34;I Knew You Were Trouble (Taylor&#39;s Version)&#34;, 5: &#34;All Too Well (Taylor&#39;s Version)&#34;, 6: &#34;22 (Taylor&#39;s Version)&#34;, 7: &#34;I Almost Do (Taylor&#39;s Version)&#34;, 8: &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;, 9: &#34;Stay Stay Stay (Taylor&#39;s Version)&#34;, 10: &#34;The Last Time (Taylor&#39;s Version)&#34;, 11: &#34;Holy Ground (Taylor&#39;s Version)&#34;, 12: &#34;Sad Beautiful Tragic (Taylor&#39;s Version)&#34;, 13: &#34;The Lucky One (Taylor&#39;s Version)&#34;, 14: &#34;Everything Has Changed (Taylor&#39;s Version)&#34;, 15: &#34;Starlight (Taylor&#39;s Version)&#34;, 16: &#34;Begin Again (Taylor&#39;s Version)&#34;, 17: &#34;The Moment I Knew (Taylor&#39;s Version)&#34;, 18: &#34;Come Back...Be Here (Taylor&#39;s Version)&#34;, 19: &#39;All Too Well (10 minute version)&#39;, 20: &#34;Ronan (Taylor&#39;s Version)&#34;, 21: &#34;Better Man (Taylor&#39;s Version)[From the Vault]&#34;, 22: &#34;Nothing New (Taylor&#39;s Version)[From the Vault]&#34;, 23: &#34;Babe (Taylor&#39;s Version)[From the Vault]&#34;, 24: &#34;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&#34;, 25: &#34;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&#34;, 26: &#34;Forever Winter (Taylor&#39;s Version)[From the Vault]&#34;, 27: &#34;Run (Taylor&#39;s Version)[From the Vault]&#34;, 28: &#34;The Very First Night (Taylor&#39;s Version)[From the Vault]&#34;, 29: &#34;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&#34;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;}} . for k,v in red_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format print(json.dumps(red_album[&#39;tracks&#39;], indent=4)) . title: Red (Taylor&#39;s Version) artist: Taylor Swift year: 2021 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;Country&#39;] tracks: {1: &#34;State of Grace (Taylor&#39;s Version)&#34;, 2: &#34;Red (Taylor&#39;s Version)&#34;, 3: &#34;Treacherous (Taylor&#39;s Version)&#34;, 4: &#34;I Knew You Were Trouble (Taylor&#39;s Version)&#34;, 5: &#34;All Too Well (Taylor&#39;s Version)&#34;, 6: &#34;22 (Taylor&#39;s Version)&#34;, 7: &#34;I Almost Do (Taylor&#39;s Version)&#34;, 8: &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;, 9: &#34;Stay Stay Stay (Taylor&#39;s Version)&#34;, 10: &#34;The Last Time (Taylor&#39;s Version)&#34;, 11: &#34;Holy Ground (Taylor&#39;s Version)&#34;, 12: &#34;Sad Beautiful Tragic (Taylor&#39;s Version)&#34;, 13: &#34;The Lucky One (Taylor&#39;s Version)&#34;, 14: &#34;Everything Has Changed (Taylor&#39;s Version)&#34;, 15: &#34;Starlight (Taylor&#39;s Version)&#34;, 16: &#34;Begin Again (Taylor&#39;s Version)&#34;, 17: &#34;The Moment I Knew (Taylor&#39;s Version)&#34;, 18: &#34;Come Back...Be Here (Taylor&#39;s Version)&#34;, 19: &#39;All Too Well (10 minute version)&#39;, 20: &#34;Ronan (Taylor&#39;s Version)&#34;, 21: &#34;Better Man (Taylor&#39;s Version)[From the Vault]&#34;, 22: &#34;Nothing New (Taylor&#39;s Version)[From the Vault]&#34;, 23: &#34;Babe (Taylor&#39;s Version)[From the Vault]&#34;, 24: &#34;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&#34;, 25: &#34;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&#34;, 26: &#34;Forever Winter (Taylor&#39;s Version)[From the Vault]&#34;, 27: &#34;Run (Taylor&#39;s Version)[From the Vault]&#34;, 28: &#34;The Very First Night (Taylor&#39;s Version)[From the Vault]&#34;, 29: &#34;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&#34;} producer: {&#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;} { &#34;1&#34;: &#34;State of Grace (Taylor&#39;s Version)&#34;, &#34;2&#34;: &#34;Red (Taylor&#39;s Version)&#34;, &#34;3&#34;: &#34;Treacherous (Taylor&#39;s Version)&#34;, &#34;4&#34;: &#34;I Knew You Were Trouble (Taylor&#39;s Version)&#34;, &#34;5&#34;: &#34;All Too Well (Taylor&#39;s Version)&#34;, &#34;6&#34;: &#34;22 (Taylor&#39;s Version)&#34;, &#34;7&#34;: &#34;I Almost Do (Taylor&#39;s Version)&#34;, &#34;8&#34;: &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;, &#34;9&#34;: &#34;Stay Stay Stay (Taylor&#39;s Version)&#34;, &#34;10&#34;: &#34;The Last Time (Taylor&#39;s Version)&#34;, &#34;11&#34;: &#34;Holy Ground (Taylor&#39;s Version)&#34;, &#34;12&#34;: &#34;Sad Beautiful Tragic (Taylor&#39;s Version)&#34;, &#34;13&#34;: &#34;The Lucky One (Taylor&#39;s Version)&#34;, &#34;14&#34;: &#34;Everything Has Changed (Taylor&#39;s Version)&#34;, &#34;15&#34;: &#34;Starlight (Taylor&#39;s Version)&#34;, &#34;16&#34;: &#34;Begin Again (Taylor&#39;s Version)&#34;, &#34;17&#34;: &#34;The Moment I Knew (Taylor&#39;s Version)&#34;, &#34;18&#34;: &#34;Come Back...Be Here (Taylor&#39;s Version)&#34;, &#34;19&#34;: &#34;All Too Well (10 minute version)&#34;, &#34;20&#34;: &#34;Ronan (Taylor&#39;s Version)&#34;, &#34;21&#34;: &#34;Better Man (Taylor&#39;s Version)[From the Vault]&#34;, &#34;22&#34;: &#34;Nothing New (Taylor&#39;s Version)[From the Vault]&#34;, &#34;23&#34;: &#34;Babe (Taylor&#39;s Version)[From the Vault]&#34;, &#34;24&#34;: &#34;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&#34;, &#34;25&#34;: &#34;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&#34;, &#34;26&#34;: &#34;Forever Winter (Taylor&#39;s Version)[From the Vault]&#34;, &#34;27&#34;: &#34;Run (Taylor&#39;s Version)[From the Vault]&#34;, &#34;28&#34;: &#34;The Very First Night (Taylor&#39;s Version)[From the Vault]&#34;, &#34;29&#34;: &#34;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&#34; } . def search(): search = input(&quot;What would you like to know about the album?&quot;) if red_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(red_album.get(search.lower())) search() . {1: &#34;State of Grace (Taylor&#39;s Version)&#34;, 2: &#34;Red (Taylor&#39;s Version)&#34;, 3: &#34;Treacherous (Taylor&#39;s Version)&#34;, 4: &#34;I Knew You Were Trouble (Taylor&#39;s Version)&#34;, 5: &#34;All Too Well (Taylor&#39;s Version)&#34;, 6: &#34;22 (Taylor&#39;s Version)&#34;, 7: &#34;I Almost Do (Taylor&#39;s Version)&#34;, 8: &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;, 9: &#34;Stay Stay Stay (Taylor&#39;s Version)&#34;, 10: &#34;The Last Time (Taylor&#39;s Version)&#34;, 11: &#34;Holy Ground (Taylor&#39;s Version)&#34;, 12: &#34;Sad Beautiful Tragic (Taylor&#39;s Version)&#34;, 13: &#34;The Lucky One (Taylor&#39;s Version)&#34;, 14: &#34;Everything Has Changed (Taylor&#39;s Version)&#34;, 15: &#34;Starlight (Taylor&#39;s Version)&#34;, 16: &#34;Begin Again (Taylor&#39;s Version)&#34;, 17: &#34;The Moment I Knew (Taylor&#39;s Version)&#34;, 18: &#34;Come Back...Be Here (Taylor&#39;s Version)&#34;, 19: &#39;All Too Well (10 minute version)&#39;, 20: &#34;Ronan (Taylor&#39;s Version)&#34;, 21: &#34;Better Man (Taylor&#39;s Version)[From the Vault]&#34;, 22: &#34;Nothing New (Taylor&#39;s Version)[From the Vault]&#34;, 23: &#34;Babe (Taylor&#39;s Version)[From the Vault]&#34;, 24: &#34;Message In A Bottle (Taylor&#39;s Version)[From the Vault]&#34;, 25: &#34;I Bet You Think About Me (Taylor&#39;s Version)[From the Vault]&#34;, 26: &#34;Forever Winter (Taylor&#39;s Version)[From the Vault]&#34;, 27: &#34;Run (Taylor&#39;s Version)[From the Vault]&#34;, 28: &#34;The Very First Night (Taylor&#39;s Version)[From the Vault]&#34;, 29: &#34;All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault]&#34;} . search_string = &quot;(Taylor&#39;s Version)&quot; track_dict = red_album[&#39;tracks&#39;] for key, value in track_dict.items(): if search_string in value: print(f&quot;{key}: {value}&quot;) . 4: I Knew You Were Trouble (Taylor&#39;s Version) 5: All Too Well (Taylor&#39;s Version) 6: 22 (Taylor&#39;s Version) 7: I Almost Do (Taylor&#39;s Version) 8: We Are Never Ever Getting Back Together (Taylor&#39;s Version) 9: Stay Stay Stay (Taylor&#39;s Version) 10: The Last Time (Taylor&#39;s Version) 11: Holy Ground (Taylor&#39;s Version) 12: Sad Beautiful Tragic (Taylor&#39;s Version) 13: The Lucky One (Taylor&#39;s Version) 14: Everything Has Changed (Taylor&#39;s Version) 15: Starlight (Taylor&#39;s Version) 16: Begin Again (Taylor&#39;s Version) 17: The Moment I Knew (Taylor&#39;s Version) 18: Come Back...Be Here (Taylor&#39;s Version) 19: Girl At Home (Taylor&#39;s Version) 20: Ronan (Taylor&#39;s Version) 21: Better Man (Taylor&#39;s Version)[From the Vault] 22: Nothing New (Taylor&#39;s Version)[From the Vault] 23: Babe (Taylor&#39;s Version)[From the Vault] 24: Message In A Bottle (Taylor&#39;s Version)[From the Vault] 25: I Bet You Think About Me (Taylor&#39;s Version)[From the Vault] 26: Forever Winter (Taylor&#39;s Version)[From the Vault] 27: Run (Taylor&#39;s Version)[From the Vault] 28: The Very First Night (Taylor&#39;s Version)[From the Vault] 29: All Too Well (Ten Minute Version) (Taylor&#39;s Version)[From the Vault] . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/29/DS-hashmaps-copy.html",
            "relUrl": "/2023/03/29/DS-hashmaps-copy.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 4.3a Parallel Computing X",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=320): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. (mac) | Try top -H for linux. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . AP Classroom. Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 | . The maximum amount of time it should take is 50, because if two processors can run in parallel 50 and 30 run at the same time. Then the 10 can run at the same time as the 50, which will in result only have 10 seconds left to finish. . Example 2 | . Running them in parallel will allow for a much more time efficient output, and will therefore take only 45 seconds in total. On the contrary, running them individually with take 45 + 25 seconds, which is significantly longer (especially when a better method is available). . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . List Comprehension . tracks = [&quot;State of Grace (Taylor&#39;s Version)&quot;, &quot;Red&quot;, &quot;Treacherous (Taylor&#39;s Version)&quot;, &quot;I Knew You Were Trouble&quot;, &quot;All Too Well (Taylor&#39;s Version)&quot;, &quot;22&quot;, &quot;I Almost Do (Taylor&#39;s Version)&quot;, &quot;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&quot;] newtracks = [] for x in tracks: if &quot;Taylor&#39;s Version&quot; in x: newtracks.append(x) print(newtracks) . [&#34;State of Grace (Taylor&#39;s Version)&#34;, &#34;Treacherous (Taylor&#39;s Version)&#34;, &#34;All Too Well (Taylor&#39;s Version)&#34;, &#34;I Almost Do (Taylor&#39;s Version)&#34;, &#34;We Are Never Ever Getting Back Together (Taylor&#39;s Version)&#34;] .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/29/AP-unit4-3a-parallel-computing-copy.html",
            "relUrl": "/2023/03/29/AP-unit4-3a-parallel-computing-copy.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Space and Time Hacks",
            "content": "Hacks . Record your findings when testing the time elapsed of the different algorithms. | . The time it takes for the algorithm to run and present an output, increasing as the space the output takes up. It also changes based on the method/number increase that is set, determining whether the algorithm must loop through more numbers to display the same output. . Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | . https://www.interviewkickstart.com/learn/time-complexities-of-all-sorting-algorithms . Bubble Sort: Compare each adjescent pair . Worst case- O(n2) . Average case- O(n2) . Best case- O(n) . Selection Sort: Divides array into two parts (one of already sorted, and one of to be sorted elements) . Worst, Average, and Best = O(n2) . Insertion Sort: Divides array into two parts (one of already sorted, and one of to be sorted elements). Iterate over each element and put them into the correct array. . Worst case- O(n2) . Average case- O(n2) . Best case- O(n) . Merge Sort: Divide unsorted arrays into sorted arrays . Worst case = Average Case = Best Case = O(n log n) . Quick Sort: Divide and conquer strategy . Worst case: O(n2) . Average case and best case: O(n log n) . Why is time and space complexity important when choosing an algorithm? | . Time and space complexity often determines the efficiency of a program, because when in use, a faster program which takes up the least amount of space it more likely to sell/or be used. It determines whether a program can be applied, because even if it works, if it does not work efficiently it doesn’t serve its purpose. . Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | . It is good to stick to constant time algorithms, as the algorithm stays the same no matter how large the input it. On the contrary, exponential time algorithms increase in amount of steps as the input increases, making the run time larger and larger. By rule of thumb, it is better to stick with constant, though exponential is okay for small input algorithms. . What are some general patterns that you noticed to determine each algorithm’s time and space complexity? | . Constant sequences run faster, and take up less space. Exponential algorithms take more time, and often take up more space do to the increases steps. Algorithms which have longer runtimes have more likelihood of breaking, due to the computer’s capacity to continue a process past a certain amount of time. . Complete the Time and Space Complexity analysis questions linked below. Practice . Reflection: While I still do not completely understand how to tell the pattern, I tended to get the answers to the questions correct. I found that through process of elimination, and determining whether the algorithm is multiplying or dividing, I was usually able to pick the correct time complexity. .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/27/SpaceTHacks.html",
            "relUrl": "/2023/03/27/SpaceTHacks.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Space and Time Hacks",
            "content": "Hacks . Record your findings when testing the time elapsed of the different algorithms. | . The time it takes for the algorithm to run and present an output, increasing as the space the output takes up. It also changes based on the method/number increase that is set, determining whether the algorithm must loop through more numbers to display the same output. . Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | . https://www.interviewkickstart.com/learn/time-complexities-of-all-sorting-algorithms . Bubble Sort: Compare each adjescent pair . Worst case- O(n2) . Average case- O(n2) . Best case- O(n) . Selection Sort: Divides array into two parts (one of already sorted, and one of to be sorted elements) . Worst, Average, and Best = O(n2) . Insertion Sort: Divides array into two parts (one of already sorted, and one of to be sorted elements). Iterate over each element and put them into the correct array. . Worst case- O(n2) . Average case- O(n2) . Best case- O(n) . Merge Sort: Divide unsorted arrays into sorted arrays . Worst case = Average Case = Best Case = O(n log n) . Quick Sort: Divide and conquer strategy . Worst case: O(n2) . Average case and best case: O(n log n) . Why is time and space complexity important when choosing an algorithm? | . Time and space complexity often determines the efficiency of a program, because when in use, a faster program which takes up the least amount of space it more likely to sell/or be used. It determines whether a program can be applied, because even if it works, if it does not work efficiently it doesn’t serve its purpose. . Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | . It is good to stick to constant time algorithms, as the algorithm stays the same no matter how large the input it. On the contrary, exponential time algorithms increase in amount of steps as the input increases, making the run time larger and larger. By rule of thumb, it is better to stick with constant, though exponential is okay for small input algorithms. . What are some general patterns that you noticed to determine each algorithm’s time and space complexity? | . Constant sequences run faster, and take up less space. Exponential algorithms take more time, and often take up more space do to the increases steps. Algorithms which have longer runtimes have more likelihood of breaking, due to the computer’s capacity to continue a process past a certain amount of time. . Complete the Time and Space Complexity analysis questions linked below. Practice . Reflection: While I still do not completely understand how to tell the pattern, I tended to get the answers to the questions correct. I found that through process of elimination, and determining whether the algorithm is multiplying or dividing, I was usually able to pick the correct time complexity. .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/27/SpaceTHacks-copy.html",
            "relUrl": "/2023/03/27/SpaceTHacks-copy.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Big Ideas 2 Corrections",
            "content": "Many of these questions were repeated from the final, so the quiz was a bit more simple than previous ones. However, these repeated questions helped confirm my understanding of these topics, while allowing me to review topics I still need to work on. The main topic I struggle with understanding is binary, so I will make sure to review this throughout our production of out NATM project as well as our lesson. . Q19 Filtering and sorting restaurant data . . Because the order of the rows do not change, it is okay to sort by rating, then filter by number of ratings, then filter by payment type. . Q25 Effect of appending three zeros to a binary number . . Because adding the number 0 multiplies the number by 2, adding three zeros would mean multiplying the number by 2 three times (therefore multiplying the number by 8). .",
            "url": "https://sanikasha.github.io/superFastPages/ap%20exam/2023/03/24/BigIdeas2-copy.html",
            "relUrl": "/ap%20exam/2023/03/24/BigIdeas2-copy.html",
            "date": " • Mar 24, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "2.4 CPT CRUD Imperative",
            "content": "Schema of Users table in Sqlite.db . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;clients&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_product&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_ingredients&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_skinType&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_date&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (5, &#39;_pid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) . Read . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM clients&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() #read() . Create . import sqlite3 def create(): product = input(&quot;Enter product name:&quot;) ingredients = input(&quot;Enter product ingredients:&quot;) skinType = input(&quot;Enter skin type best for product:&quot;) date = input(&quot;Enter production year:&quot;) pid = input(&quot;Enter product ID:&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO clients (_product, _ingredients, _skinType, _date, _pid) VALUES (?, ?, ?, ?, ?)&quot;, (product, ingredients, skinType, date, pid)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {product} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() # https://www.sephora.com/product/drunk-elephant-lala-retro-whipped-moisturizer-with-ceramides-P446938?om_mmc=aff-linkshare-redirect-ty8NUtOSnl0&amp;c3ch=Linkshare&amp;c3nid=ty8NUtOSnl0&amp;affid=ty8NUtOSnl0-ZtPg8_k9zWrHF0YTY6TI8Q&amp;ranEAID=ty8NUtOSnl0&amp;ranMID=2417&amp;ranSiteID=ty8NUtOSnl0-ZtPg8_k9zWrHF0YTY6TI8Q&amp;ranLinkID=10-1&amp;browserdefault=true&amp;skuId=2233849&amp;nrtv_cid=5b2232e380ebe2d07dd738103299cd3d35c31a585812b82660f8262a3b1309f0&amp;SubID=1231&amp;nrtv_as_src=1 . Update . import sqlite3 def update(): product = input(&quot;Enter product name to update:&quot;) pid = input(&quot;Enter pid to update:&quot;) if len(pid) &lt; 2: message = &quot;hacked&quot; pid = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE clients SET _pid = ? WHERE _product = ?&quot;, (pid, product)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No product {product} was not found in the table&quot;) else: print(f&quot;The row with product name {product} the pid has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete . import sqlite3 def delete(): product = input(&quot;Enter product to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM clients WHERE _product = ?&quot;, (product,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No product {product} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with product {product} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Cetaphil Gentle Skin Cleanser&#39;, &#39;Water, Glycerin, Cocamidopropyl Betaine, Disodium Laureth Sulfosuccinate, Sodium Cocoamphoacetate, Panthenol, Niacinamide, Pantolactone, Acrylates/C10-30 Alkyl Acrylate Crosspolymer, Sodium Benzoate, Masking Fragrance, Sodium Chloride, Citric Acid&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;001&#39;) (2, &#39;Alaffia Everyday Coconut Face Toner&#39;, &#39;Azadirachta indica (neem) leaf aqueous extract, Carica Papaya (Papaya) Leaf Aqueous Extract, Cocos Nucifera (Coconut) Water, Glycerin, Lavandula Hybrida (Lavender) Oil, Phenoxyethanol, Potassium Sorbate, Ascorbic Acid, Cocos Nucifera (Coconut) Extract&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;002&#39;) (3, &#39;Laurel Skin Deep Clarity Oil Cleanser&#39;, &#39;Safflower Seed Oil, Sunflower Seed Oil, Sesame Seed Oil, Tamanu Oil, Black Cumin Seed Oil, Whole Plant Extracts of Rosemary, Calendula, Turmeric, Essential Oils of Green Mandarin, Ylang Ylang, Neroli, Rosemary&#39;, &#39;combination&#39;, &#39;2023&#39;, &#39;003&#39;) (4, &#39;Glow Recipe Avocado Ceramide Redness Relief Serum&#39;, &#39;Water/Aqua/Eau, Glycerin, Jojoba Esters, Persea Gratissima (Avocado) Oil, Persea Gratissima (Avocado) Fruit Extract, Niacinamide, Ceramide NP, Ceramide NS, Ceramide AP, Ceramide EOP, Ceramide EOS, Hydrolyzed Rice Protein, Allantoin, Oryza Sativa (Rice) Bran Oil, Bisabolol, Zingiber Officinale (Ginger) Root Extract, Curcuma Longa (Turmeric) Root Extract, Tocopherol, Palmitoyl Tripeptide-8, Vitis Vinifera (Grape) Fruit Extract, Potassium Palmitoyl Hydrolyzed Wheat Protein, Boswellia Serrata Extract, Populus Tremuloides Bark Extract, Caprylic/Capric Triglyceride, Sodium Phytate, Cetyl Alcohol, Melia Azadirachta Flower Extract, Melia Azadirachta Leaf Extract, Ocimum Sanctum Leaf Extract, Behenic Acid, Cholesterol, Ethylhexylglycerin, Ocimum Basilicum (Basil) Flower/Leaf Extract, Elettaria Cardamomum Seed Extract, Jasminum Officinale (Jasmine) Flower/Leaf Extract, Corallina Officinalis Extract, Sodium Carbonate, Sodium Chloride, Chlorophyllin-Copper Complex (CI 75810), Camellia Sinensis Leaf Extract, Cananga Odorata Flower Extract, Caprooyl Phytosphingosine, Caprooyl Sphingosine, Cucumis Melo (Melon) Fruit Extract, Cucumis Sativus (Cucumber) Fruit Extract, Pyrus Malus (Apple) Fruit Extract, Rose Extract, Rubus Idaeus (Raspberry) Leaf Extract, Ascorbyl Palmitate, Dextran, Hydroxyacetophenone, Xanthan Gum, Butylene Glycol, Carbomer, Cetearyl Olivate, Sorbitan Olivate, 1,2-Hexanediol, Caprylyl Glycol, Hydrogenated Vegetable Oil, Lavandula Angustifolia (Lavender) Flower/Leaf/Stem Extract, Santalum Album (Sandalwood) Wood Extract, Tocopheryl Acetate, Ceteareth-25, Sodium Hydroxide, Phenoxyethanol, Sodium Benzoate&#39;, &#39;combination&#39;, &#39;2023&#39;, &#39;004&#39;) (5, &#39;Paula’s Choice Pore-Reducing Toner&#39;, &#39;Water, Glycerin, Butylene Glycol, Niacinamide, Adenosine Triphosphate, Anthemis Nobilis (Chamomile) Flower Extract (anti-irritant), Arctium Lappa (Burdock) Root Extract, Hydrolyzed Jojoba Esters, Hydrolyzed Vegetable Protein, Sodium PCA, Panthenol, Sodium Hyaluronate, Sodium Chondroitin Sulfate, Ceramide 3, Ceramide 6 II, Ceramide 1, Phytosphingosine, Cholesterol, Tetrahexyldecyl Ascorbate, Oleth-10, DEA-Oleth-10 Phosphate, Sodium Lauroyl Lactylate, Polysorbate-20, Caprylyl Glycol, Hexylene Glycol, Sodium Citrate, Xanthan Gum, Trisodium EDTA, Phenoxyethanol&#39;, &#39;oily&#39;, &#39;2023&#39;, &#39;005&#39;) (6, &#39;Drunk Elephant Beste No. 9 Jelly Cleanser&#39;, &#39;Water/Aqua/Eau, Glycerin, Cocamidopropyl Betaine, Coco-Glucoside, Sodium Lauroyl Methyl Isethionate, Cocamidopropyl Hydroxysultaine, Sodium Methyl Oleoyl Taurate, Propanediol, Aloe Barbadensis Leaf Extract, Glycolipids, Linoleic Acid, Linolenic Acid, Lauryl Glucoside, Cucumis Melo Cantalupensis Fruit Extract, Sclerocarya Birrea Seed Oil, Dipotassium Glycyrrhizate, Tocopherol, Citric Acid, Phenoxyethanol, Sodium Hydroxide, Sodium Benzoate, Sodium Chloride, Polylysine&#39;, &#39;oily&#39;, &#39;2023&#39;, &#39;006&#39;) (7, &#39;Lala Retro Whipped Refillable Moisturizer with Ceramides&#39;, &#39;Water/Aqua/Eau, Glycerin, Caprylic/ Capric Triglyceride, Isopropyl Isostearate, Pseudozyma Epicola/Camellia Sinensis Seed Oil/Glucose/Glycine Soja (Soybean) Meal/Malt Extract/Yeast Extract Ferment Filtrate, Glyceryl Stearate SE, Cetearyl Alcohol, Palmitic Acid, Stearic Acid, Pentylene Glycol, Plantago Lanceolata Leaf Extract, Adansonia Digitata Seed Oil, Citrullus Lanatus (Watermelon) Seed Oil, Passiflora Edulis Seed Oil, Schinziophyton Rautanenii Kernel Oil, Sclerocarya Birrea Seed Oil, Polyglyceryl-6 Ximenia Americana Seedate, Cholesterol, Ceramide AP, Ceramide EOP,Sodium Hyaluronate Crosspolymer, Ceramide NP, Phytosphingosine, Ceteareth-20, Trisodium Ethylenediamine Disuccinate, Tocopherol, Sodium Lauroyl Lactylate, Sodium Hydroxide, Citric Acid, Carbomer, Xanthan Gum, Caprylyl Glycol, Chlorphenesin, Phenoxyethanol, Ethylhexylglycerin&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;007&#39;) (8, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) (9, &#39;Lubriderm Daily Moisturizer&#39;, &#39;sample ingredients&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;009&#39;) The row with product name Lubriderm Daily Moisturizer the pid has been successfully updated (1, &#39;Cetaphil Gentle Skin Cleanser&#39;, &#39;Water, Glycerin, Cocamidopropyl Betaine, Disodium Laureth Sulfosuccinate, Sodium Cocoamphoacetate, Panthenol, Niacinamide, Pantolactone, Acrylates/C10-30 Alkyl Acrylate Crosspolymer, Sodium Benzoate, Masking Fragrance, Sodium Chloride, Citric Acid&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;001&#39;) (2, &#39;Alaffia Everyday Coconut Face Toner&#39;, &#39;Azadirachta indica (neem) leaf aqueous extract, Carica Papaya (Papaya) Leaf Aqueous Extract, Cocos Nucifera (Coconut) Water, Glycerin, Lavandula Hybrida (Lavender) Oil, Phenoxyethanol, Potassium Sorbate, Ascorbic Acid, Cocos Nucifera (Coconut) Extract&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;002&#39;) (3, &#39;Laurel Skin Deep Clarity Oil Cleanser&#39;, &#39;Safflower Seed Oil, Sunflower Seed Oil, Sesame Seed Oil, Tamanu Oil, Black Cumin Seed Oil, Whole Plant Extracts of Rosemary, Calendula, Turmeric, Essential Oils of Green Mandarin, Ylang Ylang, Neroli, Rosemary&#39;, &#39;combination&#39;, &#39;2023&#39;, &#39;003&#39;) (4, &#39;Glow Recipe Avocado Ceramide Redness Relief Serum&#39;, &#39;Water/Aqua/Eau, Glycerin, Jojoba Esters, Persea Gratissima (Avocado) Oil, Persea Gratissima (Avocado) Fruit Extract, Niacinamide, Ceramide NP, Ceramide NS, Ceramide AP, Ceramide EOP, Ceramide EOS, Hydrolyzed Rice Protein, Allantoin, Oryza Sativa (Rice) Bran Oil, Bisabolol, Zingiber Officinale (Ginger) Root Extract, Curcuma Longa (Turmeric) Root Extract, Tocopherol, Palmitoyl Tripeptide-8, Vitis Vinifera (Grape) Fruit Extract, Potassium Palmitoyl Hydrolyzed Wheat Protein, Boswellia Serrata Extract, Populus Tremuloides Bark Extract, Caprylic/Capric Triglyceride, Sodium Phytate, Cetyl Alcohol, Melia Azadirachta Flower Extract, Melia Azadirachta Leaf Extract, Ocimum Sanctum Leaf Extract, Behenic Acid, Cholesterol, Ethylhexylglycerin, Ocimum Basilicum (Basil) Flower/Leaf Extract, Elettaria Cardamomum Seed Extract, Jasminum Officinale (Jasmine) Flower/Leaf Extract, Corallina Officinalis Extract, Sodium Carbonate, Sodium Chloride, Chlorophyllin-Copper Complex (CI 75810), Camellia Sinensis Leaf Extract, Cananga Odorata Flower Extract, Caprooyl Phytosphingosine, Caprooyl Sphingosine, Cucumis Melo (Melon) Fruit Extract, Cucumis Sativus (Cucumber) Fruit Extract, Pyrus Malus (Apple) Fruit Extract, Rose Extract, Rubus Idaeus (Raspberry) Leaf Extract, Ascorbyl Palmitate, Dextran, Hydroxyacetophenone, Xanthan Gum, Butylene Glycol, Carbomer, Cetearyl Olivate, Sorbitan Olivate, 1,2-Hexanediol, Caprylyl Glycol, Hydrogenated Vegetable Oil, Lavandula Angustifolia (Lavender) Flower/Leaf/Stem Extract, Santalum Album (Sandalwood) Wood Extract, Tocopheryl Acetate, Ceteareth-25, Sodium Hydroxide, Phenoxyethanol, Sodium Benzoate&#39;, &#39;combination&#39;, &#39;2023&#39;, &#39;004&#39;) (5, &#39;Paula’s Choice Pore-Reducing Toner&#39;, &#39;Water, Glycerin, Butylene Glycol, Niacinamide, Adenosine Triphosphate, Anthemis Nobilis (Chamomile) Flower Extract (anti-irritant), Arctium Lappa (Burdock) Root Extract, Hydrolyzed Jojoba Esters, Hydrolyzed Vegetable Protein, Sodium PCA, Panthenol, Sodium Hyaluronate, Sodium Chondroitin Sulfate, Ceramide 3, Ceramide 6 II, Ceramide 1, Phytosphingosine, Cholesterol, Tetrahexyldecyl Ascorbate, Oleth-10, DEA-Oleth-10 Phosphate, Sodium Lauroyl Lactylate, Polysorbate-20, Caprylyl Glycol, Hexylene Glycol, Sodium Citrate, Xanthan Gum, Trisodium EDTA, Phenoxyethanol&#39;, &#39;oily&#39;, &#39;2023&#39;, &#39;005&#39;) (6, &#39;Drunk Elephant Beste No. 9 Jelly Cleanser&#39;, &#39;Water/Aqua/Eau, Glycerin, Cocamidopropyl Betaine, Coco-Glucoside, Sodium Lauroyl Methyl Isethionate, Cocamidopropyl Hydroxysultaine, Sodium Methyl Oleoyl Taurate, Propanediol, Aloe Barbadensis Leaf Extract, Glycolipids, Linoleic Acid, Linolenic Acid, Lauryl Glucoside, Cucumis Melo Cantalupensis Fruit Extract, Sclerocarya Birrea Seed Oil, Dipotassium Glycyrrhizate, Tocopherol, Citric Acid, Phenoxyethanol, Sodium Hydroxide, Sodium Benzoate, Sodium Chloride, Polylysine&#39;, &#39;oily&#39;, &#39;2023&#39;, &#39;006&#39;) (7, &#39;Lala Retro Whipped Refillable Moisturizer with Ceramides&#39;, &#39;Water/Aqua/Eau, Glycerin, Caprylic/ Capric Triglyceride, Isopropyl Isostearate, Pseudozyma Epicola/Camellia Sinensis Seed Oil/Glucose/Glycine Soja (Soybean) Meal/Malt Extract/Yeast Extract Ferment Filtrate, Glyceryl Stearate SE, Cetearyl Alcohol, Palmitic Acid, Stearic Acid, Pentylene Glycol, Plantago Lanceolata Leaf Extract, Adansonia Digitata Seed Oil, Citrullus Lanatus (Watermelon) Seed Oil, Passiflora Edulis Seed Oil, Schinziophyton Rautanenii Kernel Oil, Sclerocarya Birrea Seed Oil, Polyglyceryl-6 Ximenia Americana Seedate, Cholesterol, Ceramide AP, Ceramide EOP,Sodium Hyaluronate Crosspolymer, Ceramide NP, Phytosphingosine, Ceteareth-20, Trisodium Ethylenediamine Disuccinate, Tocopherol, Sodium Lauroyl Lactylate, Sodium Hydroxide, Citric Acid, Carbomer, Xanthan Gum, Caprylyl Glycol, Chlorphenesin, Phenoxyethanol, Ethylhexylglycerin&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;007&#39;) (8, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) (9, &#39;Lubriderm Daily Moisturizer&#39;, &#39;sample ingredients&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;008&#39;) The row with product Lubriderm Daily Moisturizer was successfully deleted (1, &#39;Cetaphil Gentle Skin Cleanser&#39;, &#39;Water, Glycerin, Cocamidopropyl Betaine, Disodium Laureth Sulfosuccinate, Sodium Cocoamphoacetate, Panthenol, Niacinamide, Pantolactone, Acrylates/C10-30 Alkyl Acrylate Crosspolymer, Sodium Benzoate, Masking Fragrance, Sodium Chloride, Citric Acid&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;001&#39;) (2, &#39;Alaffia Everyday Coconut Face Toner&#39;, &#39;Azadirachta indica (neem) leaf aqueous extract, Carica Papaya (Papaya) Leaf Aqueous Extract, Cocos Nucifera (Coconut) Water, Glycerin, Lavandula Hybrida (Lavender) Oil, Phenoxyethanol, Potassium Sorbate, Ascorbic Acid, Cocos Nucifera (Coconut) Extract&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;002&#39;) (3, &#39;Laurel Skin Deep Clarity Oil Cleanser&#39;, &#39;Safflower Seed Oil, Sunflower Seed Oil, Sesame Seed Oil, Tamanu Oil, Black Cumin Seed Oil, Whole Plant Extracts of Rosemary, Calendula, Turmeric, Essential Oils of Green Mandarin, Ylang Ylang, Neroli, Rosemary&#39;, &#39;combination&#39;, &#39;2023&#39;, &#39;003&#39;) (4, &#39;Glow Recipe Avocado Ceramide Redness Relief Serum&#39;, &#39;Water/Aqua/Eau, Glycerin, Jojoba Esters, Persea Gratissima (Avocado) Oil, Persea Gratissima (Avocado) Fruit Extract, Niacinamide, Ceramide NP, Ceramide NS, Ceramide AP, Ceramide EOP, Ceramide EOS, Hydrolyzed Rice Protein, Allantoin, Oryza Sativa (Rice) Bran Oil, Bisabolol, Zingiber Officinale (Ginger) Root Extract, Curcuma Longa (Turmeric) Root Extract, Tocopherol, Palmitoyl Tripeptide-8, Vitis Vinifera (Grape) Fruit Extract, Potassium Palmitoyl Hydrolyzed Wheat Protein, Boswellia Serrata Extract, Populus Tremuloides Bark Extract, Caprylic/Capric Triglyceride, Sodium Phytate, Cetyl Alcohol, Melia Azadirachta Flower Extract, Melia Azadirachta Leaf Extract, Ocimum Sanctum Leaf Extract, Behenic Acid, Cholesterol, Ethylhexylglycerin, Ocimum Basilicum (Basil) Flower/Leaf Extract, Elettaria Cardamomum Seed Extract, Jasminum Officinale (Jasmine) Flower/Leaf Extract, Corallina Officinalis Extract, Sodium Carbonate, Sodium Chloride, Chlorophyllin-Copper Complex (CI 75810), Camellia Sinensis Leaf Extract, Cananga Odorata Flower Extract, Caprooyl Phytosphingosine, Caprooyl Sphingosine, Cucumis Melo (Melon) Fruit Extract, Cucumis Sativus (Cucumber) Fruit Extract, Pyrus Malus (Apple) Fruit Extract, Rose Extract, Rubus Idaeus (Raspberry) Leaf Extract, Ascorbyl Palmitate, Dextran, Hydroxyacetophenone, Xanthan Gum, Butylene Glycol, Carbomer, Cetearyl Olivate, Sorbitan Olivate, 1,2-Hexanediol, Caprylyl Glycol, Hydrogenated Vegetable Oil, Lavandula Angustifolia (Lavender) Flower/Leaf/Stem Extract, Santalum Album (Sandalwood) Wood Extract, Tocopheryl Acetate, Ceteareth-25, Sodium Hydroxide, Phenoxyethanol, Sodium Benzoate&#39;, &#39;combination&#39;, &#39;2023&#39;, &#39;004&#39;) (5, &#39;Paula’s Choice Pore-Reducing Toner&#39;, &#39;Water, Glycerin, Butylene Glycol, Niacinamide, Adenosine Triphosphate, Anthemis Nobilis (Chamomile) Flower Extract (anti-irritant), Arctium Lappa (Burdock) Root Extract, Hydrolyzed Jojoba Esters, Hydrolyzed Vegetable Protein, Sodium PCA, Panthenol, Sodium Hyaluronate, Sodium Chondroitin Sulfate, Ceramide 3, Ceramide 6 II, Ceramide 1, Phytosphingosine, Cholesterol, Tetrahexyldecyl Ascorbate, Oleth-10, DEA-Oleth-10 Phosphate, Sodium Lauroyl Lactylate, Polysorbate-20, Caprylyl Glycol, Hexylene Glycol, Sodium Citrate, Xanthan Gum, Trisodium EDTA, Phenoxyethanol&#39;, &#39;oily&#39;, &#39;2023&#39;, &#39;005&#39;) (6, &#39;Drunk Elephant Beste No. 9 Jelly Cleanser&#39;, &#39;Water/Aqua/Eau, Glycerin, Cocamidopropyl Betaine, Coco-Glucoside, Sodium Lauroyl Methyl Isethionate, Cocamidopropyl Hydroxysultaine, Sodium Methyl Oleoyl Taurate, Propanediol, Aloe Barbadensis Leaf Extract, Glycolipids, Linoleic Acid, Linolenic Acid, Lauryl Glucoside, Cucumis Melo Cantalupensis Fruit Extract, Sclerocarya Birrea Seed Oil, Dipotassium Glycyrrhizate, Tocopherol, Citric Acid, Phenoxyethanol, Sodium Hydroxide, Sodium Benzoate, Sodium Chloride, Polylysine&#39;, &#39;oily&#39;, &#39;2023&#39;, &#39;006&#39;) (7, &#39;Lala Retro Whipped Refillable Moisturizer with Ceramides&#39;, &#39;Water/Aqua/Eau, Glycerin, Caprylic/ Capric Triglyceride, Isopropyl Isostearate, Pseudozyma Epicola/Camellia Sinensis Seed Oil/Glucose/Glycine Soja (Soybean) Meal/Malt Extract/Yeast Extract Ferment Filtrate, Glyceryl Stearate SE, Cetearyl Alcohol, Palmitic Acid, Stearic Acid, Pentylene Glycol, Plantago Lanceolata Leaf Extract, Adansonia Digitata Seed Oil, Citrullus Lanatus (Watermelon) Seed Oil, Passiflora Edulis Seed Oil, Schinziophyton Rautanenii Kernel Oil, Sclerocarya Birrea Seed Oil, Polyglyceryl-6 Ximenia Americana Seedate, Cholesterol, Ceramide AP, Ceramide EOP,Sodium Hyaluronate Crosspolymer, Ceramide NP, Phytosphingosine, Ceteareth-20, Trisodium Ethylenediamine Disuccinate, Tocopherol, Sodium Lauroyl Lactylate, Sodium Hydroxide, Citric Acid, Carbomer, Xanthan Gum, Caprylyl Glycol, Chlorphenesin, Phenoxyethanol, Ethylhexylglycerin&#39;, &#39;dry&#39;, &#39;2023&#39;, &#39;007&#39;) (8, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/16/MyTable2-4.html",
            "relUrl": "/2023/03/16/MyTable2-4.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "2.4b",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? Describes how objects are organized within a database . What is the purpose of identity Column in SQL database? Connects the information and gives a label to the object. This can allows us to perform CRUD operations and identify which object we want to modify, create, or delete. | What is the purpose of a primary key in SQL database? It is automatically populated, and provides a key to identify the object with that cannot be changed by the user or admin. | What are the Data Types in SQL table? String, numbers, dates | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? Unique session with a data source. I think it creates a unique table which cannot be duplicated. This may be why I could only define my class once, and a change would mean having to give it a new name. | Same for cursor object? Makes connection to use SQL queries. May facilitate the display of objects in our sql database. | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? No, it is not defines using the class Client, so it is only a representation of objects in the database | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? I find imperative programming for straight forward, as it doesnt require the find_by_xxx in order to determine whether there is a duplicate. However, this one only says that there was an error, rather than saying that the object already exists in the database. | Explain purpose of SQL INSERT. Is this the same as User init? The SQL insert tells the program where to store the user input information. I am not sure about how it related to init, because to my understanding this is not where the object is initialize, though I could be wrong. | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? It displays when the user&#39;s passwork they input is not enoguh characters, and therefore redefined the password (hacks the user) | Explain try/except, when would except occur? Try tells the program to attempt to update the uid according to the product number, while exept tells the user this was unsuccessful. This would occue when the password is not long enough. | What code seems to be repeated in each of these examples to point, why is it repeated? conn and cursor seems to repeat, as it establishes the connection between the coding lanuages and ensure the SQL and the datavase are connected and running. | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Once is it completed, it cannot be reversed. This runs risk of losing important information. | In the print statemements, what is the &quot;f&quot; and what does {uid} do? I think f allows {uid} to be accessed from the function. uid displays uid of the object that was deleted using the function. | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? To allows the user to complete multiple CRUD operations in one go. | Could you refactor this menu? Make it work with a List? Yes, this can be done. I am not exactly sure how, but I will discuss with my table mates to better understand how to complete this. | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? Yes, procedural abstraction is when a set of data or functions can be used in many different ways or situations. In this implementation, we define objects and then use CRUD operations to manipulate them. We can expand this to more than just CRUD to fit multiple situations. Additionally, I was able to manipulate the code initially used for Users and make it store products for my CPT. | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. . Flask app object . This has been used in other notebooks, and allows for a database to creates without having seperate api and python files. Like in our flask for our CPT, we needed to have one file to create an API and the other to create the SQL database. . | SQLAlchemy db object . Allows for communication between python and databased, which is needed for CRUD. We also used this in our CPT when we iterated through databases, and displayed (read) from frontend as well. . | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User :defines the object that we will be using CRUD operations on - db.Model inheritance: we are able to organize our objects into a database, and display them in our sqlite.db folder | init method: allows class to initialize object&#39;s attributes | @property: creates and returns object, @&lt;column&gt;.setter: sets column for sqlite.db table | create (creates new object(reads existing database), update(changes object in existing database), delete methods(removes object from database) | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Client(db.Model): __tablename__ = &#39;clients&#39; # table name is plural, class name is singular # Define the Client schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _product = db.Column(db.String(255), unique=False, nullable=False) _ingredients = db.Column(db.String(255), unique=False, nullable=False) _skinType = db.Column(db.String(255), unique=False, nullable=False) _date = db.Column(db.String(255), unique=False, nullable=False) _pid = db.Column(db.String(255), unique=False, nullable=False) def __init__(self, product, pid, ingredients, date, skinType): self._product = product # variables with self prefix become part of the object, self._ingredients = ingredients self._date = date self._pid = pid self._skinType = skinType # a name getter method, extracts name from object @property def product(self): return self._product # a setter function, allows name to be updated after initial object creation @product.setter def product(self, product): self._product = product # a name getter method, extracts name from object @property def pid(self): return self._pid # a setter function, allows name to be updated after initial object creation @pid.setter def pid(self, pid): self._pid = pid # a getter method, extracts email from object @property def ingredients(self): return self._ingredients # a setter function, allows name to be updated after initial object creation @ingredients.setter def ingredients(self, ingredients): self._ingredients = ingredients # a getter method, extracts email from object @property def skinType(self): return self._skinType # a setter function, allows name to be updated after initial object creation @skinType.setter def skinType(self, skinType): self._skinType = skinType # a getter method, extracts email from object @property def date(self): return self._date # a setter function, allows name to be updated after initial object creation @date.setter def date(self, date): self._date = date # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from Client(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;product&quot;: self._product, &quot;ingredients&quot;: self._ingredients, &quot;date&quot;: self._date, &quot;skinType&quot;: self._skinType, &quot;pid&quot;: self._pid, } # CRUD update: updates product # returns self def update(self, product=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(product) &gt; 0: self.product = product db.session.commit() return self # CRUD delete: remove self and product # None def delete(self, product): db.session.delete(self) db.session.delete(product) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initClients(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() # uses the database model to put objects (defined below) into a table &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; # uses earlir defined class to create objects u1 = Client(product=&#39;Cetaphil Gentle Skin Cleanser&#39;, pid=&#39;001&#39;, skinType=&#39;dry&#39;, ingredients=&#39;Water, Glycerin, Cocamidopropyl Betaine, Disodium Laureth Sulfosuccinate, Sodium Cocoamphoacetate, Panthenol, Niacinamide, Pantolactone, Acrylates/C10-30 Alkyl Acrylate Crosspolymer, Sodium Benzoate, Masking Fragrance, Sodium Chloride, Citric Acid&#39;, date=&#39;2023&#39;) u2 = Client(product=&#39;Alaffia Everyday Coconut Face Toner&#39;, pid=&#39;002&#39;, skinType=&#39;dry&#39;, ingredients=&#39;Azadirachta indica (neem) leaf aqueous extract, Carica Papaya (Papaya) Leaf Aqueous Extract, Cocos Nucifera (Coconut) Water, Glycerin, Lavandula Hybrida (Lavender) Oil, Phenoxyethanol, Potassium Sorbate, Ascorbic Acid, Cocos Nucifera (Coconut) Extract&#39;, date=&#39;2023&#39;) u3 = Client(product=&#39;Laurel Skin Deep Clarity Oil Cleanser&#39;, pid=&#39;003&#39;, skinType=&#39;combination&#39;, ingredients=&#39;Safflower Seed Oil, Sunflower Seed Oil, Sesame Seed Oil, Tamanu Oil, Black Cumin Seed Oil, Whole Plant Extracts of Rosemary, Calendula, Turmeric, Essential Oils of Green Mandarin, Ylang Ylang, Neroli, Rosemary&#39;, date=&#39;2023&#39;) u4 = Client(product=&#39;Glow Recipe Avocado Ceramide Redness Relief Serum&#39;, pid=&#39;004&#39;, skinType=&#39;combination&#39;, ingredients=&#39;Water/Aqua/Eau, Glycerin, Jojoba Esters, Persea Gratissima (Avocado) Oil, Persea Gratissima (Avocado) Fruit Extract, Niacinamide, Ceramide NP, Ceramide NS, Ceramide AP, Ceramide EOP, Ceramide EOS, Hydrolyzed Rice Protein, Allantoin, Oryza Sativa (Rice) Bran Oil, Bisabolol, Zingiber Officinale (Ginger) Root Extract, Curcuma Longa (Turmeric) Root Extract, Tocopherol, Palmitoyl Tripeptide-8, Vitis Vinifera (Grape) Fruit Extract, Potassium Palmitoyl Hydrolyzed Wheat Protein, Boswellia Serrata Extract, Populus Tremuloides Bark Extract, Caprylic/Capric Triglyceride, Sodium Phytate, Cetyl Alcohol, Melia Azadirachta Flower Extract, Melia Azadirachta Leaf Extract, Ocimum Sanctum Leaf Extract, Behenic Acid, Cholesterol, Ethylhexylglycerin, Ocimum Basilicum (Basil) Flower/Leaf Extract, Elettaria Cardamomum Seed Extract, Jasminum Officinale (Jasmine) Flower/Leaf Extract, Corallina Officinalis Extract, Sodium Carbonate, Sodium Chloride, Chlorophyllin-Copper Complex (CI 75810), Camellia Sinensis Leaf Extract, Cananga Odorata Flower Extract, Caprooyl Phytosphingosine, Caprooyl Sphingosine, Cucumis Melo (Melon) Fruit Extract, Cucumis Sativus (Cucumber) Fruit Extract, Pyrus Malus (Apple) Fruit Extract, Rose Extract, Rubus Idaeus (Raspberry) Leaf Extract, Ascorbyl Palmitate, Dextran, Hydroxyacetophenone, Xanthan Gum, Butylene Glycol, Carbomer, Cetearyl Olivate, Sorbitan Olivate, 1,2-Hexanediol, Caprylyl Glycol, Hydrogenated Vegetable Oil, Lavandula Angustifolia (Lavender) Flower/Leaf/Stem Extract, Santalum Album (Sandalwood) Wood Extract, Tocopheryl Acetate, Ceteareth-25, Sodium Hydroxide, Phenoxyethanol, Sodium Benzoate&#39;, date=&#39;2023&#39;) u5 = Client(product=&#39;Paula’s Choice Pore-Reducing Toner&#39;, pid=&#39;005&#39;, skinType=&#39;oily&#39;, ingredients=&#39;Water, Glycerin, Butylene Glycol, Niacinamide, Adenosine Triphosphate, Anthemis Nobilis (Chamomile) Flower Extract (anti-irritant), Arctium Lappa (Burdock) Root Extract, Hydrolyzed Jojoba Esters, Hydrolyzed Vegetable Protein, Sodium PCA, Panthenol, Sodium Hyaluronate, Sodium Chondroitin Sulfate, Ceramide 3, Ceramide 6 II, Ceramide 1, Phytosphingosine, Cholesterol, Tetrahexyldecyl Ascorbate, Oleth-10, DEA-Oleth-10 Phosphate, Sodium Lauroyl Lactylate, Polysorbate-20, Caprylyl Glycol, Hexylene Glycol, Sodium Citrate, Xanthan Gum, Trisodium EDTA, Phenoxyethanol&#39;, date=&#39;2023&#39;) u6 = Client(product=&#39;Drunk Elephant Beste No. 9 Jelly Cleanser&#39;, pid=&#39;006&#39;, skinType=&#39;oily&#39;,ingredients=&#39;Water/Aqua/Eau, Glycerin, Cocamidopropyl Betaine, Coco-Glucoside, Sodium Lauroyl Methyl Isethionate, Cocamidopropyl Hydroxysultaine, Sodium Methyl Oleoyl Taurate, Propanediol, Aloe Barbadensis Leaf Extract, Glycolipids, Linoleic Acid, Linolenic Acid, Lauryl Glucoside, Cucumis Melo Cantalupensis Fruit Extract, Sclerocarya Birrea Seed Oil, Dipotassium Glycyrrhizate, Tocopherol, Citric Acid, Phenoxyethanol, Sodium Hydroxide, Sodium Benzoate, Sodium Chloride, Polylysine&#39;, date=&#39;2023&#39;) clients = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for client in clients: try: # tries to create the new object in the table &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = client.create() print(f&quot;Created new product {object.product}&quot;) except: # error raised if object nit created, doesn&#39;t create if duplicate &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist product {client.product}, or error.&quot;) initClients() . Created new product Cetaphil Gentle Skin Cleanser Created new product Alaffia Everyday Coconut Face Toner Created new product Laurel Skin Deep Clarity Oil Cleanser Created new product Glow Recipe Avocado Ceramide Redness Relief Serum Created new product Paula’s Choice Pore-Reducing Toner Created new product Drunk Elephant Beste No. 9 Jelly Cleanser . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following Client.query.filter_by:filters through existing database to determine whether a product already exists 2. client.pid: uses product id to verify or authenticate before completing functions | | . # uid to product, password to pid def find_by_product(product): with app.app_context(): client = Client.query.filter_by(_product=product).first() return client # returns user object # Check credentials by finding user and verify password def check_credentials(product, pid): # query email and return user record client = find_by_product(product) if client == None: return False if (client.is_pid(pid)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following client.find_by_product() and try/except:finds object that includes user inputted product, then outputs whether it is found or not (keep going) 2. client = Client(...): initializes object to &quot;client&quot; | client.create() and try/except: allows the create function to add an object to the database | | . def create(): # optimize user time to see if uid exists product = input(&quot;Enter product name:&quot;) client = find_by_product(product) try: print(&quot;Found n&quot;, client.read()) return except: pass # keep going # request value that ensure creating valid object product = input(&quot;Enter product name:&quot;) ingredients = input(&quot;Enter product ingredients:&quot;) skinType = input(&quot;Enter skin type best for product:&quot;) date = input(&quot;Enter production year:&quot;) pid = input(&quot;Enter product ID:&quot;) # Initialize User object before date client = Client(product=product, ingredients=ingredients, skinType=skinType, date=date, pid=pid ) # write object to database with app.app_context(): try: object = client.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error product {product}&quot;) create() . Created {&#39;product&#39;: &#39;sample prod 2&#39;, &#39;ingredients&#39;: &#39;sample ingred 2&#39;, &#39;date&#39;: &#39;sample prod year 2&#39;, &#39;skinType&#39;: &#39;sample st 2&#39;, &#39;pid&#39;: &#39;009&#39;} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following Client.query.all:reads all objects in the table 2. json_ready assignment, google List Comprehension: changes format from sql to json | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = Client.query.all() json_ready = [client.read() for client in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;product&#39;: &#39;Cetaphil Gentle Skin Cleanser&#39;, &#39;ingredients&#39;: &#39;Water, Glycerin, Cocamidopropyl Betaine, Disodium Laureth Sulfosuccinate, Sodium Cocoamphoacetate, Panthenol, Niacinamide, Pantolactone, Acrylates/C10-30 Alkyl Acrylate Crosspolymer, Sodium Benzoate, Masking Fragrance, Sodium Chloride, Citric Acid&#39;, &#39;date&#39;: &#39;2023&#39;, &#39;skinType&#39;: &#39;dry&#39;, &#39;pid&#39;: &#39;001&#39;}, {&#39;product&#39;: &#39;Alaffia Everyday Coconut Face Toner&#39;, &#39;ingredients&#39;: &#39;Azadirachta indica (neem) leaf aqueous extract, Carica Papaya (Papaya) Leaf Aqueous Extract, Cocos Nucifera (Coconut) Water, Glycerin, Lavandula Hybrida (Lavender) Oil, Phenoxyethanol, Potassium Sorbate, Ascorbic Acid, Cocos Nucifera (Coconut) Extract&#39;, &#39;date&#39;: &#39;2023&#39;, &#39;skinType&#39;: &#39;dry&#39;, &#39;pid&#39;: &#39;002&#39;}, {&#39;product&#39;: &#39;Laurel Skin Deep Clarity Oil Cleanser&#39;, &#39;ingredients&#39;: &#39;Safflower Seed Oil, Sunflower Seed Oil, Sesame Seed Oil, Tamanu Oil, Black Cumin Seed Oil, Whole Plant Extracts of Rosemary, Calendula, Turmeric, Essential Oils of Green Mandarin, Ylang Ylang, Neroli, Rosemary&#39;, &#39;date&#39;: &#39;2023&#39;, &#39;skinType&#39;: &#39;combination&#39;, &#39;pid&#39;: &#39;003&#39;}, {&#39;product&#39;: &#39;Glow Recipe Avocado Ceramide Redness Relief Serum&#39;, &#39;ingredients&#39;: &#39;Water/Aqua/Eau, Glycerin, Jojoba Esters, Persea Gratissima (Avocado) Oil, Persea Gratissima (Avocado) Fruit Extract, Niacinamide, Ceramide NP, Ceramide NS, Ceramide AP, Ceramide EOP, Ceramide EOS, Hydrolyzed Rice Protein, Allantoin, Oryza Sativa (Rice) Bran Oil, Bisabolol, Zingiber Officinale (Ginger) Root Extract, Curcuma Longa (Turmeric) Root Extract, Tocopherol, Palmitoyl Tripeptide-8, Vitis Vinifera (Grape) Fruit Extract, Potassium Palmitoyl Hydrolyzed Wheat Protein, Boswellia Serrata Extract, Populus Tremuloides Bark Extract, Caprylic/Capric Triglyceride, Sodium Phytate, Cetyl Alcohol, Melia Azadirachta Flower Extract, Melia Azadirachta Leaf Extract, Ocimum Sanctum Leaf Extract, Behenic Acid, Cholesterol, Ethylhexylglycerin, Ocimum Basilicum (Basil) Flower/Leaf Extract, Elettaria Cardamomum Seed Extract, Jasminum Officinale (Jasmine) Flower/Leaf Extract, Corallina Officinalis Extract, Sodium Carbonate, Sodium Chloride, Chlorophyllin-Copper Complex (CI 75810), Camellia Sinensis Leaf Extract, Cananga Odorata Flower Extract, Caprooyl Phytosphingosine, Caprooyl Sphingosine, Cucumis Melo (Melon) Fruit Extract, Cucumis Sativus (Cucumber) Fruit Extract, Pyrus Malus (Apple) Fruit Extract, Rose Extract, Rubus Idaeus (Raspberry) Leaf Extract, Ascorbyl Palmitate, Dextran, Hydroxyacetophenone, Xanthan Gum, Butylene Glycol, Carbomer, Cetearyl Olivate, Sorbitan Olivate, 1,2-Hexanediol, Caprylyl Glycol, Hydrogenated Vegetable Oil, Lavandula Angustifolia (Lavender) Flower/Leaf/Stem Extract, Santalum Album (Sandalwood) Wood Extract, Tocopheryl Acetate, Ceteareth-25, Sodium Hydroxide, Phenoxyethanol, Sodium Benzoate&#39;, &#39;date&#39;: &#39;2023&#39;, &#39;skinType&#39;: &#39;combination&#39;, &#39;pid&#39;: &#39;004&#39;}, {&#39;product&#39;: &#39;Paula’s Choice Pore-Reducing Toner&#39;, &#39;ingredients&#39;: &#39;Water, Glycerin, Butylene Glycol, Niacinamide, Adenosine Triphosphate, Anthemis Nobilis (Chamomile) Flower Extract (anti-irritant), Arctium Lappa (Burdock) Root Extract, Hydrolyzed Jojoba Esters, Hydrolyzed Vegetable Protein, Sodium PCA, Panthenol, Sodium Hyaluronate, Sodium Chondroitin Sulfate, Ceramide 3, Ceramide 6 II, Ceramide 1, Phytosphingosine, Cholesterol, Tetrahexyldecyl Ascorbate, Oleth-10, DEA-Oleth-10 Phosphate, Sodium Lauroyl Lactylate, Polysorbate-20, Caprylyl Glycol, Hexylene Glycol, Sodium Citrate, Xanthan Gum, Trisodium EDTA, Phenoxyethanol&#39;, &#39;date&#39;: &#39;2023&#39;, &#39;skinType&#39;: &#39;oily&#39;, &#39;pid&#39;: &#39;005&#39;}, {&#39;product&#39;: &#39;Drunk Elephant Beste No. 9 Jelly Cleanser&#39;, &#39;ingredients&#39;: &#39;Water/Aqua/Eau, Glycerin, Cocamidopropyl Betaine, Coco-Glucoside, Sodium Lauroyl Methyl Isethionate, Cocamidopropyl Hydroxysultaine, Sodium Methyl Oleoyl Taurate, Propanediol, Aloe Barbadensis Leaf Extract, Glycolipids, Linoleic Acid, Linolenic Acid, Lauryl Glucoside, Cucumis Melo Cantalupensis Fruit Extract, Sclerocarya Birrea Seed Oil, Dipotassium Glycyrrhizate, Tocopherol, Citric Acid, Phenoxyethanol, Sodium Hydroxide, Sodium Benzoate, Sodium Chloride, Polylysine&#39;, &#39;date&#39;: &#39;2023&#39;, &#39;skinType&#39;: &#39;oily&#39;, &#39;pid&#39;: &#39;006&#39;}, {&#39;product&#39;: &#39;Lala Retro Whipped Refillable Moisturizer with Ceramides&#39;, &#39;ingredients&#39;: &#39;Water/Aqua/Eau, Glycerin, Caprylic/ Capric Triglyceride, Isopropyl Isostearate, Pseudozyma Epicola/Camellia Sinensis Seed Oil/Glucose/Glycine Soja (Soybean) Meal/Malt Extract/Yeast Extract Ferment Filtrate, Glyceryl Stearate SE, Cetearyl Alcohol, Palmitic Acid, Stearic Acid, Pentylene Glycol, Plantago Lanceolata Leaf Extract, Adansonia Digitata Seed Oil, Citrullus Lanatus (Watermelon) Seed Oil, Passiflora Edulis Seed Oil, Schinziophyton Rautanenii Kernel Oil, Sclerocarya Birrea Seed Oil, Polyglyceryl-6 Ximenia Americana Seedate, Cholesterol, Ceramide AP, Ceramide EOP,Sodium Hyaluronate Crosspolymer, Ceramide NP, Phytosphingosine, Ceteareth-20, Trisodium Ethylenediamine Disuccinate, Tocopherol, Sodium Lauroyl Lactylate, Sodium Hydroxide, Citric Acid, Carbomer, Xanthan Gum, Caprylyl Glycol, Chlorphenesin, Phenoxyethanol, Ethylhexylglycerin&#39;, &#39;date&#39;: &#39;2023&#39;, &#39;skinType&#39;: &#39;dry&#39;, &#39;pid&#39;: &#39;007&#39;}, {&#39;product&#39;: &#39;sample prod 2&#39;, &#39;ingredients&#39;: &#39;sample ingred 2&#39;, &#39;date&#39;: &#39;sample prod year 2&#39;, &#39;skinType&#39;: &#39;sample st 2&#39;, &#39;pid&#39;: &#39;009&#39;}] . Update . import sqlite3 database = &#39;instance/sqlite.db&#39; def update(): product = input(&quot;Enter product name to update:&quot;) pid = input(&quot;Enter pid to update:&quot;) if len(pid) &lt; 2: message = &quot;hacked&quot; pid = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE clients SET _pid = ? WHERE _product = ?&quot;, (pid, product)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No product {product} was not found in the table&quot;) else: print(f&quot;The row with product name {product} the pid has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with product name sample prod 2 the pid has been successfully updated . Delete . import sqlite3 def delete(): product = input(&quot;Enter product to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM clients WHERE _product = ?&quot;, (product,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No product {product} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with product {product} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . The row with product sample prod 2 was successfully deleted . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/13/AP-unit2-4a-copy.html",
            "relUrl": "/2023/03/13/AP-unit2-4a-copy.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "2.2, 2.3 Coding Hacks",
            "content": "from PIL import Image, ImageFont, ImageDraw # Allows image to be displayed in Jupyter notebook, only run in local from IPython import display # Open an Image from images directory img = Image.open(&#39;images/skin1.png&#39;) # Call draw Method to add 2D graphics in an image draw = ImageDraw.Draw(img) # Downloaded font, opened zip, dragged to fonts directory myfont = ImageFont.truetype(&#39;fonts/Aloevera.ttf&#39;, 68) # Add Text to an image, adjust coordinates/text/font/color draw.text((120, 150), &quot;We recommend...&quot;, font=myfont, fill=(0, 0, 0)) # Display edited image img.show() # Save image in images directory img.save(&#39;images/skin2.png&#39;) # Displays image in notebook display.Image(&#39;images/skin2.png&#39;) . from PIL import Image # numpy for performing batch processing and elementwise # matrix operations efficiently import numpy as np # Allows image to be displayed in Jupyter notebook, only run in local from IPython import display display.Image(&quot;images/negatives.jpg&quot;) . from PIL import Image # numpy for performing batch processing and elementwise # matrix operations efficiently import numpy as np # Allows image to be displayed in Jupyter notebook, only run in local from IPython import display # Opening an image, and saving open image object img = Image.open(r&quot;images/negatives.jpg&quot;) # Creating an numpy array out of the image object img_arry = np.array(img) # Maximum intensity value of the color mode I_max = 255 # Subtracting 255 (max value possible in a given image # channel) from each pixel values and storing the result img_arry = I_max - img_arry # Creating an image object from the resultant numpy array inverted_img = Image.fromarray(img_arry) # Saving the image under the name Image_negative.jpg inverted_img.save(r&quot;images/negatives1.jpg&quot;) # Displays image in notebook print(&quot;after image:&quot;) display.Image(&quot;images/negatives1.jpg&quot;) . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/transport.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student Grade Student Age Transport 0 12 17 Car 1 12 17 Walk 2 12 19 Bus 3 12 17 Bus 4 12 16 Car 5 12 16 Car 6 12 17 Car 7 12 17 Bus 8 11 17 Car 9 12 17 Car 10 12 16 Car 11 11 16 Car 12 12 16 Skate 13 11 32 Car 14 12 18 Car 15 12 15 Car 16 12 17 Walk 17 11 16 Car 18 12 18 Car 19 12 16 Walk 20 12 18 Walk . df2 = df[&quot;Student Age&quot;].mean() print(&quot;mean:&quot;, df2) df3 = df[&quot;Student Age&quot;].min() print(&quot;min:&quot;, df3) df4 = df[&quot;Student Age&quot;].max() print(&quot;max:&quot;, df4) df5 = df[&quot;Student Age&quot;].median() print(&quot;median:&quot;, df5) df6 = df[&quot;Student Age&quot;].mode() print(&quot;mode:&quot;, df6) . mean: 17.523809523809526 min: 15 max: 32 median: 17.0 mode: 0 17 Name: Student Age, dtype: int64 .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/12/DrawImagePIL.html",
            "relUrl": "/2023/03/12/DrawImagePIL.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 200], &quot;duration&quot;: [50, 40, 45, 30] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 200 30 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 200 30 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) #int64 is a 64 bit integer . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . College Board Hacks . Extracting Information from Data Quiz . Which of the following best describes the problem caused by the lack of unique ID numbers? | Students who have the same name may be confused with each other. . Which of the following are likely to be challenges associated with processing city names that users might provide as input? | Users might enter abbreviations for the names of cities. . Users might misspell the name of the city. . Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? | Average ticket price . Which of the following can best be determined using only the data and none of the metadata? | The number of bicycles the car passed on a particular day . Which of the following can best be determined using only the data and none of the metadata? | The number of bicycles the car passed on a particular day . Which of the following questions about the students who responded to the survey can the teacher answer by analyzing the survey results? | I and II . Coding Hacks . When choosing a data set, think about the following: - Does it have a good sample size? Yes, the sample size is 20. This was reasonable to type in, as well as provides a large enough set to make possible conclusions. - Is there bias in the data? No, the data itself is fact. However there might have been bias or nonresponse when collecting the data set. - Does the data set need to be cleaned? No, every subject has a response to all of the categories. - What is the purpose of the data set? To determine which mode of transport is most common amongst high schools students. . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/transport.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student Grade Student Age Transport 0 12 17 Car 1 12 17 Walk 2 12 19 Bus 3 12 17 Bus 4 12 16 Car 5 12 16 Car 6 12 17 Car 7 12 17 Bus 8 11 17 Car 9 12 17 Car 10 12 16 Car 11 11 16 Car 12 12 16 Skate 13 11 32 Car 14 12 18 Car 15 12 15 Car 16 12 17 Walk 17 11 16 Car 18 12 18 Car 19 12 16 Walk 20 12 18 Walk . df2 = df[&quot;Student Age&quot;].mean() print(&quot;mean:&quot;, df2) df3 = df[&quot;Student Age&quot;].min() print(&quot;min:&quot;, df3) df4 = df[&quot;Student Age&quot;].max() print(&quot;max:&quot;, df4) df5 = df[&quot;Student Age&quot;].median() print(&quot;median:&quot;, df5) df6 = df[&quot;Student Age&quot;].mode() print(&quot;mode:&quot;, df6) . mean: 17.523809523809526 min: 15 max: 32 median: 17.0 mode: 0 17 Name: Student Age, dtype: int64 . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "MC 3, Tri 2 CB Final Corrections",
            "content": "Q5 benefits of upgraded system . . On this question, I believe my error was made due to not reading the question thouroughly. I now see that the software does not always need a human to respond to the customer, as they have some prerecorded answers to questions. However it is more difficult to respond to every call, when humans have limited capabilities and will likely need to take one call at a time. . Q26 Algorithm to select two students from thirty . . Because the group of 30 students in divided into two, and then randomly selected, all 30 students do not have the same likelihood of being chosen. But in choice D, randomizes before every selection to make corresponding pairs. . Q50 Which algorithms run in reasonable time . . While I chose D correctly, I did not understand that the pattern to look out for is exponential versus linear growth. While Algorithm A and D grow by sum, B and C grow exponentially meaning they will take longer as the amount of steps grow, making them less reasonable. .",
            "url": "https://sanikasha.github.io/superFastPages/ap%20exam/2023/03/07/T2FinalCorrections.html",
            "relUrl": "/ap%20exam/2023/03/07/T2FinalCorrections.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size X . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | . PNG is more often used for a lossless compression, as it doesn&#39;t remove additional pixels or imformation from the image. While this makes the quality of the image better, it doesn&#39;t reduce as much space. . JPG is lossy, meaning it can reduce the quality of the image, as it removed extra information. . Size, height and width, number of pixels | . All of these are factors which may determine how much space the image takes up, and how much it must be compressed to complete a certain function. These may be factored in when determining which compression method is more appropriate for the situation. . Visual perception, lossy compression | . Lossy and lead to a change in visual perception, sometimes even to the point of distortion. . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . cd:change directoryYou can also use ls to list the files existing in a certain directory. . What are the command you use in Windows terminal to access files? | . While I don&#39;t have a Windows machine and do not use WSL, I learned from my Scrum mate that WSL also uses cd. . What are some of the major differences? | . https://www.geeksforgeeks.org/linux-vs-windows-commands/ One major difference is that in linux a directory listing is ls -l, while in windows it is dir. Additionally, linuz using rm to delete a file while WSL uses del. This is an important detail as deleteing a file or moving a file could be important to the functioning of a program. . Provide what you observed, struggled with, or leaned while playing with this code. . | Why is path a big deal when working with images? . | . Without specifying the path, the program will say there is not such file/image. I ran into this error when modifying images below. . How does the meta data source and label relate to Unit 5 topics? | . Meta data might make data sets more accesible to those who do not have background knowledge in reading code or even reading statistics. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . IPython is a programming shell that allows for the use of multiple different programming languages. This might be useful in Pandas as we use python to interpret a data set in csv or json, and display it in a readable format. For images, we change the image into an array, manipulate it, and then reformat it into an image. The transition might be made possible due to IPython. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Similar: All are used to represent either numbers or letters, and include a series of numbers in specific orders to do so. . Different: Binary using base 2, Hexidecimal used base 16, while base64 uses 6 characters grouped into 24-bit sequences. Base64 is used to convert binary to readable text. . Translate first 3 letters of your name to Base64. | . S- 010010 A- 000000 N- 001101 . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | . On online shopping websites, and sometimes canvas quizzes. . From your consumer experience, what effects have you experienced from buffering? | . I have experiences frustration, and sometimes have had to reload the page or reset the wifi. . How do these effects apply to images? | . Sometimes if an image doesn&#39;t load, I cannot use a function neccesary for the website. This is why data compression is important (so that user can access what they need to use the website). . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | . Yes, I can pick our several steps and what their function/contribution to the program is. . Describe Grey Scale algorithm in English or Pseudo code? | . The image data is first collected and set to a path so that they may be accessed. The images are then set to their proper size and converted to base64. From this I think the program loops through the pixels in the image, pickes every three pixels, averages their RGB values (which creates a grey color), then coverts the pixels into that color. . Describe scale image? What is before and after on pixels in three images? | . I think the scale image downsizes the amount of pixels in the image, as the after is much less pixels than the original image not in gray scale. However, this only happened for the first and last image. Image 1:Original size: (16, 16)Scaled size: (320, 320) Image 2: Original size: (320, 234) Scaled size: (320, 234) Image 3: Original size: (2792, 2094) Scaled size: (320, 240) . Is scale image a type of compression? If so, line it up with College Board terms described? | . Yes, I believe it can be used as a form of compression. I think it does line up with what College Board described, because it either reduces the amount of detail/information and becomes lossy compression, or increasing the amount of pixels without additional information (not compression but might still distort like lossy). . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | . In imperative, functions are coded to solve each step/aspect of the problem rather than in OOP which focuses on the object (not functions/logic) to solve the problem. . Consider how data is organized in two examples, in relations to procedures | . While the imperative example defines functions and has more clear iteration, more like a math equation. In contrast, OOP uses the characteristics of the object and changes them accordingly. While I don&#39;t fully understand the concept yet, I am more easily able to recognise an OOP as opposed to an imperative program. . Look at Parameters in Imperative and Self in OOP | . Both define a variable or object, that will later be manipulated. . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | . Python Imaging Library, this is an image processing package that allows for the modification of images. From adding text to changing the colors, it gives you control over the visuals involved in a program. . numpy | . A python library used when working with arrays. In context of images, an image can be changes to an array, modified, and then changed back. . base64 | . Binary to text encoding which uses 6 text bits and 24 sequences of bits. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . College Board Hacks . Data Compression . Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? | A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. . A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs? | Compressing the file using a lossless compression algorithm before uploading it. . A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? | Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. . Using Programs with Data Quiz . Which of the following expressions will evaluate to true if the book should be counted and evaluates to false otherwise? | (genre = &quot;mystery&quot;) AND ((1 ≤ num) AND (cost &lt; 10.00)) . Using only the data collected during the 7-day period, which of the following statements is true? | The total number of items purchased on a given date can be determined by searching the data for all transactions that occurred on the given date and then adding the number of items purchased for each matching transaction. . Which of the following best explains how the data files in the table can be used to send a targeted e-mail to only those customers who have purchased products that use AA batteries to let them know about the new accessory? | Use the products file to generate a list of product IDs that use AA batteries, then use the list of product IDs to search the purchases file to generate a list of customer IDs, then use the list of customer IDs to search the customers file to generate a list of e-mail addresses . Assume that applying either of the filters will not change the relative order of the rows remaining in the spreadsheet. Which of the following sequences of steps can be used to identify the desired entry? | Filter by photographer, then filter by year, then sort by year . Sort by subject, then sort by year, then filter by photographer . CORRECTION: . Filter by photographer, then filter by year, then sort by year . Sort by year, then filter by year, then filter by photographer . Which of the following expressions will evaluate to true if the show should be counted and evaluates to false otherwise? | (genre = &quot;talk&quot;) AND ((day = &quot;Saturday&quot;) OR (day = &quot;Sunday&quot;)) . Which of the following explains how the two databases can be used to develop the interactive exhibit? | Both databases are needed. Each database can be searched by animal name to find all information to be displayed. . Lossy . JPG like negatives.jpg I use below. . Lossless . PNG like the skin1.png I use below. . Programming Hacks . from PIL import Image, ImageFont, ImageDraw # Allows image to be displayed in Jupyter notebook, only run in local from IPython import display # Open an Image from images directory img = Image.open(&#39;images/skin1.png&#39;) # Call draw Method to add 2D graphics in an image draw = ImageDraw.Draw(img) # Downloaded font, opened zip, dragged to fonts directory myfont = ImageFont.truetype(&#39;fonts/Aloevera.ttf&#39;, 68) # Add Text to an image, adjust coordinates/text/font/color draw.text((120, 150), &quot;We recommend...&quot;, font=myfont, fill=(0, 0, 0)) # Display edited image img.show() # Save image in images directory img.save(&#39;images/skin2.png&#39;) # Displays image in notebook display.Image(&#39;images/skin2.png&#39;) . from PIL import Image # numpy for performing batch processing and elementwise # matrix operations efficiently import numpy as np # Allows image to be displayed in Jupyter notebook, only run in local from IPython import display display.Image(&quot;images/negatives.jpg&quot;) . from PIL import Image # numpy for performing batch processing and elementwise # matrix operations efficiently import numpy as np # Allows image to be displayed in Jupyter notebook, only run in local from IPython import display # Opening an image, and saving open image object img = Image.open(r&quot;images/negatives.jpg&quot;) # Creating an numpy array out of the image object img_arry = np.array(img) # Maximum intensity value of the color mode I_max = 255 # Subtracting 255 (max value possible in a given image # channel) from each pixel values and storing the result img_arry = I_max - img_arry # Creating an image object from the resultant numpy array inverted_img = Image.fromarray(img_arry) # Saving the image under the name Image_negative.jpg inverted_img.save(r&quot;images/negatives1.jpg&quot;) # Displays image in notebook print(&quot;after image:&quot;) display.Image(&quot;images/negatives1.jpg&quot;) . after image: .",
            "url": "https://sanikasha.github.io/superFastPages/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Performance Task Scoring",
            "content": "Student 1 . Actual Score CPT: 4/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 0 | While I thought the individual earned the point, I learned that there is an important different between a program purpose and a program function. While a function is what the program does, the purpose is why is was made | . Data Abstraction | 1 | 1 | My response was consistent with college board scoring. The student shows all neccesary aspects of list use, and uses the list in their program | . Managing Complexity | 0 | 0 | The code used needless keys in their list, as they could have just directly defined the string to the function. While theydo use a list, it’s purpose was needless. | . Procedural Abstraction | 1 | 1 | My grade was consistent, the student provides a procedure and describes the function of this procedure | . Algorithm Implementation | 1 | 1 | There are if/then statements used in their procedure, which classifies as algorithms. College board seemed to appreciate the detail given to explain the steps of the alhorithms | . Testing | 1 | 1 | Describes two calls, describes conditions being tested for. I would like to increase my understanding of calls, as it is mentioned quite a bit in Row 6 grading. | . Student 2 . Actual Score CPT: 6/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Unlike the first student, this student specifies WHY they created the program rather than what the program itself does. The video also appropriately displays the program. | . Data Abstraction | 1 | 1 | The student provided all neccesary information, as they makde a list and pull information to help the function of their code. It is important to know that college board does not give extra points or leeway for extra work. | . Managing Complexity | 1 | 1 | Used list to manage many items, that would be essentially impossible to manage individually | . Procedural Abstraction | 1 | 1 | Made a procedure, described said procedure sufficiently | . Algorithm Implementation | 1 | 1 | Uses iteration and selection (if/else, and loops) | . Testing | 1 | 1 | Describes two different calls, describes conditions being tested, describes results of two calls | .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/02/27/ptgradeupdate.html",
            "relUrl": "/create%20performance%20task/2023/02/27/ptgradeupdate.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Night at the Museum Trimester 2",
            "content": "We began Night at the Museum by presenting our own progress. Because we initially had difficulty with deployment, we were is little behind on making sure our user input worked. However, we were able to make it so that output was given in the console, but not available to the user. . The reason for this is that we are new to the language of JavaScript, and are still learning syntax. I have now learned that console.log displays the output when we inspect the page. . . After sharing our own project, we visited Ceramics. It was absolutely fascinating how each student expressed themselves differently through art. The image above is the work of one of my closest friends. I believe this gave me a greater insight into the project because I know what the piece is based on. The ceramic materializes a lyric in the song Moon Song by Phoebe Bridgers. . . This piece was an AP Studio Art “sculpture”. These ceramics are beautifully made, and you can see the immense detail that was put into the designs. I also have the privilege of knowing the artist and knowing that another one of the pieces is based on a song. The song is Burning Hill by Mitski, which I know is very dear to the artist. I found it interesting how AP Studi Art students are able to pick their medium and have greater freedom in how they want to express themselves. . . This is also a piece from AP Studio Art, except it is a mixed-medium drawing. These drawings show perfect technique and an artist who genuinely has something to say. While the top drawing is more difficult to read as someone who expresses themselves through music more than physical art. But the bottom left drawing can be seen to be making a statement on body image. It portrays the impacts of body dysmorphia and allows the user to empathize with both the artists and people who have similar experiences. . . Another AP Studio Art piece shows a photography display of various skincare products, which we found interesting because they relate to our project! We opted to take a fun selfie to document this intersection between our project and an AP Studio Art person’s project. . . Once thoroughly visiting art classrooms such as Digital Media, in addition to AP Studio Art and Ceramics, we returned to see the projects of Computer Science A students. It was really cool to see how they implement things we learn in CSP, but elevate them using novel concepts they learn in CSA. A pattern we observed is that CSA students often use more variables in their function, making it more complex and difficult to manage (and therefore need to manage this complexity). . . In this picture, you can see we are very impressed with their front end! We also enjoyed how they were able to simplify difficult subjects that we had not yet covered in CSP. If I wasn’t a senior, I would take CSA to become as knowledgeable as these students! .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/02/26/natm.html",
            "relUrl": "/create%20performance%20task/2023/02/26/natm.html",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "5.5 and 5.6 Lesson Questions",
            "content": "5.5 Blog Post Reflection . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . Out repository doesn’t seem to be using the license as the section shows none. Some other licenses available include the MIT license, Apache License 2.0, Boost Software License 1.0, and more. These licenses protect your original work when it is published for the public to access. It makes it so that others cannot take credit for something that you created. . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . We talked about how it is important to use a license, so that your work cannot be stolen or claimed as another person’s. This adheres to principles of intellectual property, and keeping track of aspects of your project that use others’ work. . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . I chose to use an MIT License which allows use of my code, and puts limited restrictions on how it can be used. Because my project is low in importance compared to the code of large companies, I feel it should be easy to access for my peers and teacher. I may later decide to further protect my repository if I decide to develop a full functioning website. . The process included making a LICENSE.md file, and selecting a type of license. Once I chose the MIT License, it automatically added information to the markdown file, and then asked me to merge the branches. . 5.6 Blog Post Reflection: . Describe PII you have seen on project in CompSci Principles. Full name, birthday, ID, classOf (when said person graduated) . My specific project: . User’s allergies | User’s skintype | Full name | . What are your feelings about PII and your personal exposure? . I think that PII is important for some programs, as it provides best personalization while also giving the user an opportunity to revisit their results. . Describe good and bad passwords? What is another step that is used to assist in authentication. . Bad passwords include minimal variation (no capital/lowcase letters, symbols) and commonly used information (pets, names, birthdays, usernames). This is because common information is easily guessed, and it is more likely for someone to guess a password without random symbols or capitalized letters. . Try to describe Symmetric and Asymmetric encryption. . Symmetric uses a private key to encrypt the information, while asymmetric used a public key for encryption. A private key is neccesdary to decrypt information. https://blog.mailfence.com/symmetric-vs-asymmetric-encryption/#:~:text=Symmetric%20encryption%20uses%20a%20private,her%20private%20key%20to%20decrypt. . Provide an example of encryption we used in AWS deployment. . We used unique keys for each application. For example, each person needs a different number to run their local host 80:86, 80:87, etc. . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . I have been dmed on instagram and asked for “help” when they were really trying to get my personal information. This often happened when someone I follow or who followed me gets hacked, and the hacker tries to gain for information from that person’s followers. .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2023/02/13/Lesson556.html",
            "relUrl": "/lessons/2023/02/13/Lesson556.html",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "5.3 and 5.4 Questions Blog",
            "content": "Reflection 5.3: I find that computing bias exists at various points in the program production process. It starts from when the idea is born, and continues through production, testing, and even in use. A good example of this is the video we watched of the follow camera not picking up skin color other than white. This may show a problem in testing, because if the majority of subjects were white, it is likely they could have missed this disparity. While bias is not always intentional, it almost always exists implicitly in result of our society and it’s foundations. . Reflection 5.4: . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? | . One might make and create a survey that is sent out to the population of CSP students. This will ensure that as many students as possible are given the chance to give their input, so the program would be best functional for the intended audience. I am on the LIFE Advisory of Mending Matters, and we recently created and sent out a survey so that we may improve mental health opportunities and support at Del Norte. This worked well to make students (our intended audience) feel heard and valued. . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? | . Del Norte crowdsourcing can be done through school-wide surveys. It can also be done by randomly selecting a variety of student to complete a short question are. This will again ensure that the project will best benefit the people we are marketing to. . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. | . After we present our project to the individual, we can ask them to fill out a short feedback survey on user-friendliness, functionality, and visual appeal. We should then blog this feedback, and work to implement it into our project. This will show that in addition to our understanding of the coding aspect of CSP, we also understand real world application of prototyping, crowdsourcing, and bias. .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/02/01/534lesson.html",
            "relUrl": "/create%20performance%20task/2023/02/01/534lesson.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Projectapproval",
            "content": ". toc: true layout: base categories: [Create Performance Task] title: Project Approval — . My portion of our CPT that I will submit to college board will consist of one of the 5 features of our site. Ideally, this will be one of the features that requires fetch from an API, so that I may utilize lists, iteration, and selection (display on frontend). . Individual: Project Blog links added to review ticket. . Describe portion of Project you will use for Create Performance task: . Plan: | Reporting Category | Plan | | ———– | ———– | | Program Purpose and Function | Help people of all ages to gain a thorough understanding of their own skin, and therefore increase their self-confidence. Use dictionaries, keys, and lists to fetch multiple product recommendations from an API | | Data Abstraction | Products stored in list in flask repo deployed on AWS, variables will be determined by user input (dry skin/not dry skin)| | Managing Complexity | Algorithm to provide multiple results to user input, rather than seperate correspondents | | Procedural Abstraction | Procedure called when user clicks submit to the quiz, ensure to describe the procedure | | Algorithm Implementation | Use iteration and selection to select the proper item from the list in the API, and display it on frontend for user use | | Testing | Explain thouroughly, show input and output | . Video Plan: . Sped-up (but still understandable) | Shows submitting input, and shows result | Possibly show API where output was fetched from | Video less than 1 minute | .",
            "url": "https://sanikasha.github.io/superFastPages/2023/01/30/ProjectApproval.html",
            "relUrl": "/2023/01/30/ProjectApproval.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "5.1 and 5.2 Questions Blog",
            "content": "Individual: 5.1, 5.2 Blog . Blog Post Reflection 5.1 . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing . Benefits: . Solving complex problems faster | Reduce bias | Innovation and modern solutions to modern problems | Harm: . Lack of human empathy | Limits the problems that can be solved | Cannot input human preferances | Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . I do not know the scientific specifics, I do think that the more of our happiness we derive from technology, the less we will enjoy activities that are healthy both mentally and physically. I think everything is good in moderation, especially when it comes to technology. Used for both entertainment and school work, high schoolers should learn how to properly divide their time (rather than attributing their lack of productiveness to the tech itself). . Blog Post Reflection 5.2 . How does someone empower themself in a digital world? . Someone can empower themself in the digital world by using it as a resource as opposed to a distraction. The digital world is also a tool for advocacy, so empowering someone’s marginalzied group can be done through social media. . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . Teaching people how to properly use their technology, and learn how to get accurate information is important for both high school and life after graduaton. In Del Norte, all students are given access to the physical technology, but often lack the knowledge to utilize it to its full potential. This can be changed by helping your peers and encouraging people to take technology based coursed. . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . I think red tape is blocking digital empowerment. While paper is the physical alternative, the traditionalist mindset has done more to counter the implementation of technology into various aspects of life. I believe that Del Norte has less of this mindset barrier, as we preach innovaton and have the financial ability to make technology accesible. This may be more difficult in other schools, especially those in lower income communities. . Think of three beneficial effects of your projects based on 5.1 Unit . User friendly | Faster than in-person evaluation | No cost | Think of a potential harmful effect of your project. . Evaluations are limited | Liable for harm done to person (unless contract displayed) | Cannot give medical advice, like a dermatologist can | What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? Pro: Limits ability of non-admins to add, update, or delete important information Con: Also limits ability of student to personalize their project from machines on school . What concerns do you have personally about the digital divide? For yourself or for others. Without a personal computer, individuals will struggle to gain a full understanding of hardware and software that will be used in the real world. .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/01/30/Lesson5qs.html",
            "relUrl": "/create%20performance%20task/2023/01/30/Lesson5qs.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "College Board Corrections",
            "content": "Individual: MCQ Test #2 47/50 . Corrections: Q30 use drawCircle to draw figure on a coordinate grid When adding, the circle must be draw after r and y are redefined, as opposed to before like when r and y are redefined through subtraction. . Q22 Find average height of students While I said “Algorithm B always calculates the correct average, but Algorithm A does not.”, in actuality both Algorithm A and B always calculate the correct average. This is because either way, all the students’ responses are recorded and divided by the number of responses, despite the method in which they are collected. . Q50 ASCII character with hexidecimal My answer was L, as I guessed and did not understand the question. I feel similarly on this how I felt on binary in the last College Board assesment. The correct answer is V. . Reflection: I found this MC easier than the last, which likely means I have gained a better understanding of APCSP concepts. I have an easier time making sense of a procedure using mental processes, rather than having to write it down. .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/01/27/MC2.html",
            "relUrl": "/create%20performance%20task/2023/01/27/MC2.html",
            "date": " • Jan 27, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "SQLite Table Display X",
            "content": "SQlite Data . id name uid classOf shade skinType texture . 1 | Sanika Shahapurkar | sanika | 2023 | medium warm | combination | no | . 2 | Louis Tomlinson | louis | 19.. | light olive | dry | yes | . 3 | Harry Styles | harry | unsure | light neutral | oily | no | . 4 | Zayn Malik | zayn | unsure | cool neutral | combination | no | . 5 | Liam Payne | liam | unsure | light warm | dry | no | . 6 | Niall Horan | niall | unsure | light warm | oily | yes | . 7 | Taylor Swift | taylor | unsure | light warm | dry | no | . Notes: Learn how to fetch info directly from API. Do I use the covid fetch file as a template from last tri? What URL do I use because flask is only ran locally? .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/01/24/SQLITE.html",
            "relUrl": "/create%20performance%20task/2023/01/24/SQLITE.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "SQLite Table Display",
            "content": "SQlite Data . id name uid classOf shade skinType texture . 1 | Sanika Shahapurkar | sanika | 2023 | medium warm | combination | no | . 2 | Louis Tomlinson | louis | 19.. | light olive | dry | yes | . 3 | Harry Styles | harry | unsure | light neutral | oily | no | . 4 | Zayn Malik | zayn | unsure | cool neutral | combination | no | . 5 | Liam Payne | liam | unsure | light warm | dry | no | . 6 | Niall Horan | niall | unsure | light warm | oily | yes | . 7 | Taylor Swift | taylor | unsure | light warm | dry | no | . Notes: Learn how to fetch info directly from API. Do I use the covid fetch file as a template from last tri? What URL do I use because flask is only ran locally? .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/01/23/DisplaySQLite.md.html",
            "relUrl": "/create%20performance%20task/2023/01/23/DisplaySQLite.md.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$VZ6...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5mG...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$50p...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$qpx...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$Qrr...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$VZ6...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5mG...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$rXF...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$qpx...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$Qrr...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$VZ6YE3wOIKULazyt$67f2b4ad2470130819590b895b77c0dc593c2c0a1f1d0cbb6f716b250ebc7b9c&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5mGpLjBkE8isXPtN$2818a6d2924984c1064a835ef291304fe2157c3019ac84be00b928e7882b90f9&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$rXFrLFStOrylsCS5$c00b00b23720c426299a68f67be0a31d80b4181de13ddf549d6e07b7a293bec5&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$qpxtmahbzDD5kLpc$9e26c77bd2811f27f554ddecd36a6bf24a805e1936627c10e05ee1ba3e508bd0&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$QrriRqg3xp5GNkFQ$ea6642c3ad6db03094bb69e72b42f6d78e816ff3f3ead8f90da702580cecb151&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$VZ6YE3wOIKULazyt$67f2b4ad2470130819590b895b77c0dc593c2c0a1f1d0cbb6f716b250ebc7b9c&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5mGpLjBkE8isXPtN$2818a6d2924984c1064a835ef291304fe2157c3019ac84be00b928e7882b90f9&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$rXFrLFStOrylsCS5$c00b00b23720c426299a68f67be0a31d80b4181de13ddf549d6e07b7a293bec5&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$qpxtmahbzDD5kLpc$9e26c77bd2811f27f554ddecd36a6bf24a805e1936627c10e05ee1ba3e508bd0&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$QrriRqg3xp5GNkFQ$ea6642c3ad6db03094bb69e72b42f6d78e816ff3f3ead8f90da702580cecb151&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) . Hack Helper . This ended up being harder than anticipated, complete hacks from this update. . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, shade, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._shade = shade self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # a getter method, extracts email from object @property def shade(self): return self._shade # a setter function, allows name to be updated after initial object creation @shade.setter def shade(self, shade): self._shade = shade # a getter method, extracts email from object @property def classOf(self): return self._classOf # a setter function, allows name to be updated after initial object creation @classOf.setter def classOf(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Sanika Shahapurkar&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), shade=&#39;medium warm&#39;, classOf=&#39;2023&#39;) u2 = User(name=&#39;Mr. Yeung&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), shade=&#39;light olive&#39;, classOf=&#39;19..&#39;) u3 = User(name=&#39;Mr. Mortenson&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), shade=&#39;light neutral&#39;, classOf=&#39;unsure&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u2, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u2), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u2), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u2), &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u3, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u3), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u3), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u3), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Sanika Shahapurkar&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Sanika Shahapurkar&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$SaZ795H4RxaCXPOW$af74df0c7f9d766ca5188dd04a1679e847d3c5fe8338f6d5b28175f965c5590b&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_shade&#39;: &#39;medium warm&#39;, &#39;_classOf&#39;: &#39;2023&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_shade&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;shade&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Sanika Shahapurkar, uid=toby, password=sha256$SaZ795H4RxaCXPOW$af74df0c7f9d766ca5188dd04a1679e847d3c5fe8338f6d5b28175f965c5590b,dob=1847-02-11) JSON ready string: {&#34;name&#34;: &#34;Mr. Yeung&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Mr. Yeung&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$M3CCJOGQUfHTcuIE$2a419134e0f6bd682d54053fd3f46898a12523ff6fb86fd55ef40fc19b5531e5&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_shade&#39;: &#39;light olive&#39;, &#39;_classOf&#39;: &#39;19..&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_shade&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;shade&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Mr. Yeung, uid=toby, password=sha256$M3CCJOGQUfHTcuIE$2a419134e0f6bd682d54053fd3f46898a12523ff6fb86fd55ef40fc19b5531e5,dob=1847-02-11) JSON ready string: {&#34;name&#34;: &#34;Mr. Mortenson&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Mr. Mortenson&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$buz6LVRUnl9YXR6T$42f581c9b3b5940c0dd68a7e8494cd592894cafa153ce4e4cd1bb62ef7655fca&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_shade&#39;: &#39;light neutral&#39;, &#39;_classOf&#39;: &#39;unsure&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_shade&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;shade&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Mr. Mortenson, uid=toby, password=sha256$buz6LVRUnl9YXR6T$42f581c9b3b5940c0dd68a7e8494cd592894cafa153ce4e4cd1bb62ef7655fca,dob=1847-02-11) . Customization for our CPT and Testing . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, shade, classOf, skinType, texture): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._shade = shade self._classOf = classOf #add skin type and texture self._skinType = skinType self._texture = texture @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # a getter method, extracts email from object @property def shade(self): return self._shade # a setter function, allows name to be updated after initial object creation @shade.setter def shade(self, shade): self._shade = shade # a getter method, extracts email from object @property def classOf(self): return self._classOf # a setter function, allows name to be updated after initial object creation @classOf.setter def classOf(self, classOf): self._classOf = classOf # a getter method, extracts email from object @property def skinType(self): return self._skinType # a setter function, allows name to be updated after initial object creation @skinType.setter def skinType(self, skinType): self._skinType = skinType # a getter method, extracts email from object @property def texture(self): return self._texture # a setter function, allows name to be updated after initial object creation @texture.setter def texture(self, texture): self._texture = texture # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;shade&quot; : self.shade, &quot;classOf&quot; : self.classOf, &quot;skinType&quot; : self.skinType, &quot;texture&quot; : self.texture } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Sanika Shahapurkar&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), shade=&#39;medium warm&#39;, classOf=&#39;2023&#39;, skinType=&#39;combination&#39;, texture=&#39;no&#39;) u2 = User(name=&#39;Mr. Yeung&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), shade=&#39;light olive&#39;, classOf=&#39;19..&#39;, skinType=&#39;dry&#39;, texture=&#39;no&#39;) u3 = User(name=&#39;Mr. Mortenson&#39;, uid=&#39;toby&#39;, password=&#39;123mort&#39;, dob=date(1847, 2, 11), shade=&#39;light neutral&#39;, classOf=&#39;unsure&#39;, skinType=&#39;oily&#39;, texture=&#39;no&#39;) # put user objects in list for convenience users = [u1, u2, u3] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123mort&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;Victoria Pacheco&quot; u.uid = &quot;vicp05&quot; u.set_password(&quot;123pach&quot;) u = tester(users, u.uid, &quot;123pach&quot;) . Test 1, find user 3 {&#34;name&#34;: &#34;Sanika Shahapurkar&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;shade&#34;: &#34;medium warm&#34;, &#34;classOf&#34;: &#34;2023&#34;, &#34;skinType&#34;: &#34;combination&#34;, &#34;texture&#34;: &#34;no&#34;} {&#34;name&#34;: &#34;Mr. Yeung&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;shade&#34;: &#34;light olive&#34;, &#34;classOf&#34;: &#34;19..&#34;, &#34;skinType&#34;: &#34;dry&#34;, &#34;texture&#34;: &#34;no&#34;} * {&#34;name&#34;: &#34;Mr. Mortenson&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;shade&#34;: &#34;light neutral&#34;, &#34;classOf&#34;: &#34;unsure&#34;, &#34;skinType&#34;: &#34;oily&#34;, &#34;texture&#34;: &#34;no&#34;} Test 2, change user 3 {&#34;name&#34;: &#34;Sanika Shahapurkar&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;shade&#34;: &#34;medium warm&#34;, &#34;classOf&#34;: &#34;2023&#34;, &#34;skinType&#34;: &#34;combination&#34;, &#34;texture&#34;: &#34;no&#34;} {&#34;name&#34;: &#34;Mr. Yeung&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;shade&#34;: &#34;light olive&#34;, &#34;classOf&#34;: &#34;19..&#34;, &#34;skinType&#34;: &#34;dry&#34;, &#34;texture&#34;: &#34;no&#34;} * {&#34;name&#34;: &#34;Victoria Pacheco&#34;, &#34;uid&#34;: &#34;vicp05&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;shade&#34;: &#34;light neutral&#34;, &#34;classOf&#34;: &#34;unsure&#34;, &#34;skinType&#34;: &#34;oily&#34;, &#34;texture&#34;: &#34;no&#34;} . print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/01/10/PBL-model.html",
            "relUrl": "/create%20performance%20task/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Performance Task Scoring 3",
            "content": "Notes/Reflection: I noticed that I am getting better at grading the Performance Tasks, as my grades match College Board the majority of the time. The most common mistakes seem to be related to missing or forgetting to explain a certain requirement. This is quite preventable, and may be done by using organization tactics (like issues or scrum boards) to prevent this error with our Create Performance Task. . Student 1 . Actual Score CPT: 3/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] input, program functionality, output &lt;li&gt;&lt;li&gt;- [x] describes the overall purpose of the program. &lt;li&gt;&lt;li&gt;- [x] describes functionality of the program. &lt;li&gt;&lt;li&gt;- [x] describes the input and output. &lt;/li&gt;&lt;/ul&gt; | . Data Abstraction | 0 | 0 | &lt;ul&gt;&lt;li&gt;- [ ] data stored in list, list being used &lt;li&gt;&lt;li&gt;- [x] identifies variable. &lt;li&gt;&lt;li&gt;- [x] describes what the data contained in this list is representing in the program. &lt;/li&gt;&lt;/ul&gt; | . Managing Complexity | 0 | 0 | &lt;ul&gt;&lt;li&gt;- [ ] includes segment showing list used to manage complexity &lt;li&gt;&lt;li&gt;- [ ] explains how the named, selected list manages complexity in the program code by explaining the program code could not be written, or how it would be written differently, without using this list. &lt;/li&gt;&lt;/ul&gt; | . Procedural Abstraction | 0 | 0 | &lt;ul&gt;&lt;li&gt;- [x] student developed procedure with one parameter &lt;li&gt;&lt;li&gt;- [x] procedure called &lt;li&gt;&lt;li&gt;- [ ] describes what the identified procedure does and how it contributes to the overall functionality of the program. &lt;/li&gt;&lt;/ul&gt; | . Algorithm Implementation | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] sequencing, selection, iteration &lt;li&gt;&lt;li&gt;- [x] explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. &lt;/li&gt;&lt;/ul&gt; | . Testing | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] describes two calls to the selected procedure identified in written response 3c &lt;li&gt;&lt;li&gt;- [x] describes the condition(s) being tested by each call to the procedure. &lt;li&gt;&lt;li&gt;- [x] identifies the result of each call. &lt;/li&gt;&lt;/ul&gt; | . Student 2 . Actual Score CPT: 6/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] input, program functionality, output &lt;li&gt;&lt;li&gt;- [x] describes the overall purpose of the program. &lt;li&gt;&lt;li&gt;- [x] describes functionality of the program. &lt;li&gt;&lt;li&gt;- [x] describes the input and output. &lt;/li&gt;&lt;/ul&gt; | . Data Abstraction | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] data stored in list, list being used &lt;li&gt;&lt;li&gt;- [x] identifies variable. &lt;li&gt;&lt;li&gt;- [x] describes what the data contained in this list is representing in the program. &lt;/li&gt;&lt;/ul&gt; | . Managing Complexity | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] includes segment showing list used to manage complexity &lt;li&gt;&lt;li&gt;- [x] explains how the named, selected list manages complexity in the program code by explaining the program code could not be written, or how it would be written differently, without using this list. &lt;/li&gt;&lt;/ul&gt; | . Procedural Abstraction | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] student developed procedure with one parameter &lt;li&gt;&lt;li&gt;- [x] procedure called &lt;li&gt;&lt;li&gt;- [x] describes what the identified procedure does and how it contributes to the overall functionality of the program. &lt;/li&gt;&lt;/ul&gt; | . Algorithm Implementation | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] sequencing, selection, iteration &lt;li&gt;&lt;li&gt;- [x] explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. &lt;/li&gt;&lt;/ul&gt; | . Testing | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] describes two calls to the selected procedure identified in written response 3c &lt;li&gt;&lt;li&gt;- [ ] describes the condition(s) being tested by each call to the procedure. &lt;li&gt;&lt;li&gt;- [x] identifies the result of each call. &lt;/li&gt;&lt;/ul&gt; | . Student 3 . Actual Score CPT: 1/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] input, program functionality, output &lt;li&gt;&lt;li&gt;- [x] describes the overall purpose of the program. &lt;li&gt;&lt;li&gt;- [x] describes functionality of the program. &lt;li&gt;&lt;li&gt;- [x] describes the input and output. &lt;/li&gt;&lt;/ul&gt; | . Data Abstraction | 0 | 0 | &lt;ul&gt;&lt;li&gt;- [x] data stored in list, list being used &lt;li&gt;&lt;li&gt;- [ ] identifies variable. &lt;li&gt;&lt;li&gt;- [ ] describes what the data contained in this list is representing in the program. &lt;/li&gt;&lt;/ul&gt; | . Managing Complexity | 0 | 0 | &lt;ul&gt;&lt;li&gt;- [x] includes segment showing list used to manage complexity &lt;li&gt;&lt;li&gt;- [ ] explains how the named, selected list manages complexity in the program code by explaining the program code could not be written, or how it would be written differently, without using this list. &lt;/li&gt;&lt;/ul&gt; | . Procedural Abstraction | 1 | 0 | &lt;ul&gt;&lt;li&gt;- [ ] student developed procedure with one parameter &lt;li&gt;&lt;li&gt;- [ ] procedure called &lt;li&gt;&lt;li&gt;- [ ] describes what the identified procedure does and how it contributes to the overall functionality of the program. &lt;/li&gt;&lt;/ul&gt; | . Algorithm Implementation | 0 | 0 | &lt;ul&gt;&lt;li&gt;- [ ] sequencing, selection, iteration &lt;li&gt;&lt;li&gt;- [ ] explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. &lt;/li&gt;&lt;/ul&gt; | . Testing | 0 | 0 | &lt;ul&gt;&lt;li&gt;- [x] describes two calls to the selected procedure identified in written response 3c &lt;li&gt;&lt;li&gt;- [x] describes the condition(s) being tested by each call to the procedure. &lt;li&gt;&lt;li&gt;- [ ] identifies the result of each call. &lt;/li&gt;&lt;/ul&gt; | . Student 4 . Actual Score CPT: 5/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] input, program functionality, output &lt;li&gt;&lt;li&gt;- [x] describes the overall purpose of the program. &lt;li&gt;&lt;li&gt;- [x] describes functionality of the program. &lt;li&gt;&lt;li&gt;- [ ] describes the input and output. &lt;/li&gt;&lt;/ul&gt; | . Data Abstraction | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] data stored in list, list being used &lt;li&gt;&lt;li&gt;- [x] identifies variable. &lt;li&gt;&lt;li&gt;- [x] describes what the data contained in this list is representing in the program. &lt;/li&gt;&lt;/ul&gt; | . Managing Complexity | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] includes segment showing list used to manage complexity &lt;li&gt;&lt;li&gt;- [x] explains how the named, selected list manages complexity in the program code by explaining the program code could not be written, or how it would be written differently, without using this list. &lt;/li&gt;&lt;/ul&gt; | . Procedural Abstraction | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] student developed procedure with one parameter &lt;li&gt;&lt;li&gt;- [x] procedure called &lt;li&gt;&lt;li&gt;- [x] describes what the identified procedure does and how it contributes to the overall functionality of the program. &lt;/li&gt;&lt;/ul&gt; | . Algorithm Implementation | 1 | 1 | &lt;ul&gt;&lt;li&gt;- [x] sequencing, selection, iteration &lt;li&gt;&lt;li&gt;- [x] explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. &lt;/li&gt;&lt;/ul&gt; | . Testing | 1 | 0 | &lt;ul&gt;&lt;li&gt;- [x] describes two calls to the selected procedure identified in written response 3c &lt;li&gt;&lt;li&gt;- [x] describes the condition(s) being tested by each call to the procedure. &lt;li&gt;&lt;li&gt;- [ ] identifies the result of each call. &lt;/li&gt;&lt;/ul&gt; | .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/01/09/PerformanceTaskGrading3-copy.html",
            "relUrl": "/create%20performance%20task/2023/01/09/PerformanceTaskGrading3-copy.html",
            "date": " • Jan 9, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Performance Task Scoring 2",
            "content": "Student 1 . Actual Score CPT: 1/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 | 0 | Explains function not purpose, tone is informal | . Data Abstraction | 0 | 0 | A list is identified, but it doesn’t seemed to be used in the program | . Managing Complexity | 0 | 0 | The program does not use items in the list, and therefore does not use it as a way to manage complexity | . Procedural Abstraction | 0 | 0 | Describes what the procedure does, but not how it contributes to overall functionality of ther program | . Algorithm Implementation | 0 | 0 | The program includes selection and iteration, but description is not sufficient. College baord mentions how it must be detailed enough that someone else can recreate it | . Testing | 1 | 1 | The student sufficiently tested their program, and proves that it works how it claims to | . Student 2 . Actual Score CPT: 6/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | The response specifies what want their program was created to fulfill. | . Data Abstraction | 1 | 1 | The repsonse specifies their use of a list and fetching the information from that list | . Managing Complexity | 1 | 1 | The response clearly explains why the list was necessary in order to easily randomize their results | . Procedural Abstraction | 1 | 1 | The student demonstrated their procedure and explains its function | . Algorithm Implementation | 1 | 1 | The student used iteration and selection for their creatPoems procedure, and explains in well enough detail | . Testing | 1 | 1 | The student fully demonstrates the two calls they utilized | . Student 3 . Actual Score CPT: 5/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 0 | 0 | The student explains the function, not the purpose. This seems to be a common mistake amongst APCSP students. | . Data Abstraction | 1 | 1 | The response shows data being stored in a list, and that list being accessed for later use. The list is called firstCharacterList | . Managing Complexity | 1 | 1 | The code used a list and was able to well explain what would happen if their list were to be not used in the program. In their case, this is reducing the amount of variables used in the program | . Procedural Abstraction | 1 | 1 | The response meets guidlines of having a procedure with 2 parameters and fully describing the function of the program. It is important to note that here it asks for the function not purpose. | . Algorithm Implementation | 1 | 1 | findWinner includes iteration and selection, and explains in well detail so that the program could be recreated. | . Testing | 1 | 1 | Describes two calls, describes conditions being tested for. It also explains the outputs. | . Student 4 . Actual Score CPT: 3/6 . Reporting Category Student Score College Board Score Comments . Program Purpose and Function | 1 | 1 | Response explains the purpose and function of the program. | . Data Abstraction | 1 | 0 | The response shows use of a list named guesses, and how without this list the program would be uneccesarily complex. However, they do not show use of said list, therefore losing the point | . Managing Complexity | 0 | 0 | The list does not manage complexity as it could be replaced with a counter, therefore not meeting the criteria. | . Procedural Abstraction | 1 | 1 | The response shows a procedure developed by the student as well as explaining the significance of the procedure to the function of the program | . Algorithm Implementation | 1 | 1 | Procedure isitcorrect includes sequencing and iteration. It explains in detail enough that the program can be recreated. | . Testing | 1 | 0 | The student explain the conditions required for certain things to happen, rather than two different “arguments” that would need to be executed. | .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/01/09/PerformanceTaskGrading2.html",
            "relUrl": "/create%20performance%20task/2023/01/09/PerformanceTaskGrading2.html",
            "date": " • Jan 9, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Performance Task Scoring 1",
            "content": "Student 1 Actual Score CPT: 4/6 | Reporting Category | Student Score | College Board Score | Comments | | -- | -- | -- | -- | | Program Purpose and Function | 1 | 0 | While I thought the individual earned the point, I learned that there is an important different between a program purpose and a program function. While a function is what the program does, the purpose is why is was made | | Data Abstraction | 1 | 1 | My response was consistent with college board scoring. The student shows all neccesary aspects of list use, and uses the list in their program| | Managing Complexity | 0 | 0 | The code used needless keys in their list, as they could have just directly defined the string to the function. While theydo use a list, it&#39;s purpose was needless. | | Procedural Abstraction | 1 | 1 | My grade was consistent, the student provides a procedure and describes the function of this procedure | | Algorithm Implementation | 1 | 1 | There are if/then statements used in their procedure, which classifies as algorithms. College board seemed to appreciate the detail given to explain the steps of the alhorithms | | Testing | 1 | 1 | Describes two calls, describes conditions being tested for. I would like to increase my understanding of calls, as it is mentioned quite a bit in Row 6 grading. | Student 2 Actual Score CPT: 6/6 | Reporting Category | Student Score | College Board Score | Comments | | -- | -- | -- | -- | | Program Purpose and Function | 1 | 1 | Unlike the first student, this student specifies WHY they created the program rather than what the program itself does. The video also appropriately displays the program. | | Data Abstraction | 1 | 1 | The student provided all neccesary information, as they makde a list and pull information to help the function of their code. It is important to know that college board does not give extra points or leeway for extra work. | | Managing Complexity | 1 | 1 | Used list to manage many items, that would be essentially impossible to manage individually | | Procedural Abstraction | 1 | 1 | Made a procedure, described said procedure sufficiently | | Algorithm Implementation | 1 | 1 | Uses iteration and selection (if/else, and loops) | | Testing | 1 | 1 | Describes two different calls, describes conditions being tested, describes results of two calls | Notes on Rubric .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2023/01/04/PerformanceTaskGrading-copy.html",
            "relUrl": "/create%20performance%20task/2023/01/04/PerformanceTaskGrading-copy.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "Lesson 17/18 Hacks",
            "content": "Notes 3.17 . Problem: a description of a task that can be solved through an algorithm. . Instance: includes a specific input, ex: sorting problem | . Decision problem: binary problem with answer (yes or no) . Optimization problem: finding the best solution amongst many . Efficiency of an algorithm is determined through formal or mathematical reasoning. . Reasonable amount of time: Linear or square algorithm Unreasonable amount of time: Exponential or factorial algorithm . Types of Run Times (when input increases, does the number of steps it takes to solve the problem increase)&lt;/p&gt; Constant Time: fixed number of steps no matter input . Linear Time: steps increase proportional to input . Quadratic Time: steps increase proportional to input squared . Exponential Time: steps increase faster than polynomial function of input . Notes 3.18 . Computers can&#39;t solve all problems. Even problems they can solve, may not be able to be done in a short enough amount of time. . Undecidable problem: Problems where an algorithm cannot be built to give an accurate yes or no answer . Decidable problem: Problems for which an algorthm could be written to provide a correct answer . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hack 1 A decidable problem is one which can be solved with an algorithm and a correct answer with be outputted (example: average of 10 integers). An undecideable problem is one which cannot be correctly solved with an algorithm (example from research: whether a CFG generates all the strings or not). . Hack 2 C, because the algorithm includes a square (classified as 3 steps and reasonable) . Hack 3 . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . function peak_finder2(array){ if (array.length) === 0{ return `Array cannot be empty` }else if (array.length === 1){ return array[0] }else{ let mid_index = Math.floor(array.length*0.5) if (array[mid_index +1]&gt;array[mid_index]){ return peak_finding(array.slice(mid_index + 1 )) }else if (array[mid_index -1]&gt;array[mid_index]){ new=array.reverse().slice(mid_index+1).reverse() return peak_finding(new) }else{ return array[mid_index] } } } . I had trouble shortening the code myself, so I compares the two and analyzed why the section of code was shortened the way it was. . Explanation: Because counter, peak, and peal_index all equal 0, it is uneccesary to seperate the let statements. Instead the series of else/if statements based on the arrays relative size to zero, can be done as such (instead of using different variables that are not needed). . Hack 4 . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] data.sort() print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . With help of W3 Schools, I was able to find a much simpler way of sorting the values in a list. This sort() method will also work to sort values in a list alphabetically. . Hack 5 . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . [1, 2, 3] [2, 1, 3] [3, 1, 2] [1, 3, 2] [2, 3, 1] [3, 2, 1] . from itertools import permutations perm = permutations([1, 2, 3]) for i in list(perm): print(i) . (1, 2, 3) (1, 3, 2) (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1) . Use of permutations by using a prexisting algorithm is most efficient, and shortens the code significantly. . from itertools import combinations_with_replacement comb = combinations_with_replacement([1, 2, 3], 3) for i in list(comb): print(i) . (1, 1, 1) (1, 1, 2) (1, 1, 3) (1, 2, 2) (1, 2, 3) (1, 3, 3) (2, 2, 2) (2, 2, 3) (2, 3, 3) (3, 3, 3) . There is also an option of using combinations in python, which may be useful in certain statistical contexts. . Reflection . I found this lesson interesting and relavant, as it shows different ways to identify if a computer will be able to efficiently solve a problem. When a computer cannot solve a problem in a timely manner using the resources provided by code, it is important to find alternate ways to help it complete the same function (as demonstrated in hacks). . &lt;/div&gt; .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/12/17/Lesson1718.html",
            "relUrl": "/lessons/2022/12/17/Lesson1718.html",
            "date": " • Dec 17, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Lesson 12/13 Hacks",
            "content": "3.12 Part 1 Hacks . Problem 1 . Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) }&lt;/p&gt; The first procedure uses the correct parameters AND the correct formula for average speed, and is therefore the best procedure for the context. . Problem 2 . James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True&lt;/p&gt; False . Problem 3 . Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . 1. totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252)&lt;/p&gt; totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) | 3. totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252))&lt;/p&gt; laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon | 3.12 Part 2 Hacks . PROCEDURE find a () . { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . a = 729&lt;/p&gt; cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . 110/100 = 1.1 . 173 * 1.1 = $190.30&lt;/p&gt; Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . ( 103 - 32 ) * (5/9) = 39.444&lt;/p&gt; 3.13 Hacks . 1. Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game . Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . PROCEDURE replaceTop(toprbyardspg(100), currentrbyards(1260), totalGames(12)) { IF currentrbyards(1260) &gt; toprbyardspg(100) { toprbyardspg(100) = currentrbyards(1260 } } . 2. Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. . Use what you learned about moving robots . PROCEDURE getOne() { MOVE_RIGHT() MOVE_UP() MOVE_UP() MOVE_RIGHT() MOVE_RIGHT() MOVE_RIGHT() MOVE_UP() MOVE_UP() MOVE_LEFT() MOVE_LEFT() MOVE_UP() MOVE_LEFT() MOVE_LEFT() } . Which Is the Correct Way to define the Name of a Procedure? . A. PROCEDURE MYLIST . B. PROCEDURE MyList&lt;/p&gt; C. procedure mylist . Write A Procedure That gets the BeachBall To the Green Square . PROCEDURE ballSquare() { MOVE_LEFT() MOVE_UP() MOVE_UP() MOVE_UP() MOVE_UP() MOVE_UP() MOVE_UP() MOVE_LEFT() MOVE_LEFT() } . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/12/13/Lesson1213.html",
            "relUrl": "/lessons/2022/12/13/Lesson1213.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Lesson 8/10 Quiz Correction and JavaScript Analysis",
            "content": ". FOR is best for when the number of repititions is know, whereas the WHILE will continue until the code breaks or is told to break. Because the code continues until the user inputs “quit”, WHILE is the best answer. . Javascript Quiz: . Lists allow for multiple pieces of information to be assigned to one variable. This can help with repeating the same process for multiple items, as well as displaying certain sequences. Iteration helps completes a series processes so that each repition doesn’t need to be written out by the coder. .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/12/06/Lesson8.html",
            "relUrl": "/lessons/2022/12/06/Lesson8.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Lesson 8/10 Hacks",
            "content": "array = [1, 2, 3, 4, 5, 6] array.reverse() print(&#39;Reversed List:&#39;, array) . Reversed List: [6, 5, 4, 3, 2, 1] . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] def bubbleSort(list): n = len(list) for i in range(n): for j in range(0, len(list) - i - 1): if list[j] &gt; list[j + 1]: value = list[j] list[j] = list[j + 1] list[j + 1] = value bubbleSort(list) print(list) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/12/06/Lesson.html",
            "relUrl": "/lessons/2022/12/06/Lesson.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Lesson Notes",
            "content": "3.1 and 3.2 Notes . Vocabulary list: a sequence of several variables grouped together variable: a way of storing information in a computer program, which could later be changed, referenced, and used data types: a set of values and operations on those values abstract data types: a data type whose internal representation is hidden from the client client: a program that uses a data type objects: a structure that can take on a data-type value Applications programming interface (API): which is a list of constructors and instance methods or operations, used to specify the behavior of an abstract data type Elements: individual value in a list that is assigned a unique index. And elements are referenced by an index. Index: referencing elements in a list or string using natural numbers . Essential Knowledge The assignment operater allows a program to change the value represented to a variable. The exam reference sheet uses the “⟵” to use for assignment. For example, Text: a ⟵ expression Then the code would display a block text of “a ⟵ expression”. The code will evaluate expression and then assigns a copy of the result to the variable a. . 3.3 and 3.4 . Essential Knowledge Algorithms can be expressed in a variety of ways and can be executed by programs which are implemented using programming languages. Every algorithm can be constructed using combinations of sequencing, selection, and iteration An algorithm is a finite set of instructions that accomplish a specific task, us as humans, do algorithms on a daily basis. Sequencing is doing steps in order, for example, doing the first step then the second then the third, etc. Selection is when the programmer decides between two different outcomes. Iteration is when you have to repeat a step until that condition is fulfilled. . Vocabulary algorithm- finite set of instructions that accomplish a specific task, composed of sequencing, selection, and iteration. selection- a section of code is run only if a condition is met. iteration- repeating steps or instructions over and over again sequencing- outline or set of steps that we do and follow in order that they are given variable- you can store an actual value, the value of a variable in another variable, the result of an operation, or result of a procedural call String- a sequence of characters .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/12/02/Lesson-Notes.html",
            "relUrl": "/lessons/2022/12/02/Lesson-Notes.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "3.5-3.7 Hacks",
            "content": "For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson. . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . B. False | . 2. 10(D) ≠ 0110(B) . A. True | . 3. 56(D) ≥ 111000(B) . A. True | . 3. 99(D) &lt; 1110011(B) . B. True | . Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . Python Practice . # Practice with these statements print(20 != 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &lt;= y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z + y) . False True True . # Practice with these statements print(20 == 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &gt; y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z) . True False False . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake. | 75 | Answer: 3, Please scedule a retake . 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | Answer: 2, An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. . 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement | Answer: 2, if-else statement . 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement | If-else statement | Answer: 1, if-statement . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) else: print(i) if i == &quot;lion&quot; or &quot;raven&quot;: print(&quot;Animal lives in the desert&quot;) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion Animal lives in the desert tiger Animal lives in the desert wildebeest Animal lives in the desert Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! Animal lives in the desert jellyfish Animal lives in the desert blobfish Animal lives in the desert raven Animal lives in the desert . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . Yes = True No = False chickenAlfredo = { &quot;meat&quot;: Yes, &quot;timePrep&quot;: 60, } cheeseQuesadilla = { &quot;meat&quot;: No, &quot;timePrep&quot;: 10, } beefWellington = { &quot;meat&quot;: Yes, &quot;timePrep&quot;: 150, } def makeMeal(item): if item[&quot;timePrep&quot;] &lt;= 30: if item[&quot;meat&quot;] == No: print(&quot;You can make this meal&quot;) else: print(&quot;You need meat to cook this meal&quot;) else: print(&quot;You do not have enough time to make this meal&quot;) makeMeal(chickenAlfredo) makeMeal(cheeseQuesadilla) makeMeal(beefWellington) . You do not have enough time to make this meal You can make this meal You do not have enough time to make this meal . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/11/28/assignment.html",
            "relUrl": "/lessons/2022/11/28/assignment.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Lesson 3/4 Hacks",
            "content": "3.3 Video 1 Hacks . Show two examples and label which one is sequence, selection, iteration . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . The cell as a whole is a sequence. . &quot;for i in numbers&quot; is an iteration. . if (numbers[i] % 2 == 0): is a selection. . 3.3 Video 2 Hacks . Practice Problems . given the following code segment below: | a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . My answer: a = 1 (a changes from 7 to 1) b = 7 (b changes from 1, to 3+4) c = 3 (c does not change) d = 7 (d changes from 4 to 7, due to b changing) . consider the following code segment: | hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true | My answer: . Cold changes to hot, and hot stays true . Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. | Segment 1: . red ⟵ yes . orange ⟵ no . green ⟵ almost . blue ⟵ never . orange ⟵ blue . purple ⟵ absolutely . red ⟵ orange . What is red? . never . Segment 2: . a ⟵ 8 . b ⟵ 3 . c ⟵ 7 . d ⟵ 9 . a ⟵ 2 . b ⟵ a + c . c ⟵ b . Find the value for c. . c = 15 . Sequencing | num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 . What is the value of num1 and num2? . num1 = 6 . num2 + num 3 = 6 . num2 = 11 . num1 + num3 = 6 + 5 = 11 . 3.4 Video 1 Hacks . String Homework . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . | What would the result be? . | . substring individualized the letter B, then name is defined as SmithB, the email then adds the address to become: . SmithB@gmail.com . . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . | . ompuook .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/11/17/Hacks.html",
            "relUrl": "/lessons/2022/11/17/Hacks.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Lesson 1/2 Hacks",
            "content": "1. Your turn to interact, try it now! . Modify the list to change the length to 5. . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;, &quot;other&quot;, &quot;other&quot;] . 2. Change the following code to print out the list. . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;, &quot;other&quot;, &quot;other&quot;] print(languages_list) . [&#39;Python&#39;, &#39;C++&#39;, &#39;JavaScript&#39;, &#39;other&#39;, &#39;other&#39;] . 3. Change the following code to print out only &quot;Python&quot; . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] print(languages_list[0]) . Python . 4. Replace contents/data of listA with contents/data from listB. . Print listA out afterward . listA = [] listA = [1, 55, 8, 2, 76] listB = [] listB = [22, 7, 13] listA = listB print(listA) . [22, 7, 13] . 5. Make 2 lists: . a list of string data | a list of number data | the length of the each list is a minimum of 4 | change the names of the lists | . typeAnimals = [&quot;Cats&quot;, &quot;Dogs&quot;, &quot;Rabbits&quot;, &quot;Pigs&quot;] numAnimals = [5, 10, 15, 20] . 6. Combine the list to contain all of the data from both lists. . Hint! Use extend or append typeAnimals = [&quot;Cats&quot;, &quot;Dogs&quot;, &quot;Rabbits&quot;, &quot;Pigs&quot;] numAnimals = [5, 10, 15, 20] joinAnimals = typeAnimals + numAnimals print(joinAnimals) . [&#39;Cats&#39;, &#39;Dogs&#39;, &#39;Rabbits&#39;, &#39;Pigs&#39;, 5, 10, 15, 20] . Binary Hacks . Convert these binary notation to decimal notation. (the way we normally count) . The binary number 111. 1 + 2 + 4 = 7 . | The binary number 1011. 1 + 2 + 8 = 11 . | The binary number 1101011. 1 + 2 + 8 + 32 + 64 = 107 . | Convert the decimal notation to binary notation. (You can use the Binary Math from Mr. Yeung or the one you have) . 12 | 4 + 8 = 12 . 1100 . 44 | 8 + 4 + 32 = 44 . 101100 . 254 | 255 - 1 = 254 . 11111110 . Extra Binary Hacks if you changed your bits to 24 . Convert decimal notation to binary notation. . 57345 Click for the answer! 1110000000000001 | . 16777215 Click for the answer! 111111111111111111111111 | . 11184810 Click for the answer! 101010101010101010101010 | . Convert the binary notation to decimal notation . 101011101010 Click for the answer! 2794 | . 10011100000 Click for the answer! 1248 | . 1101001000101000 Click for the answer! 53800 | . Homework/Hacks . Consider the following code segment: . scores1 &lt;- [89, 78, 92, 63, 95, 88] | scores2 &lt;- [92, 79, 97, 63] | scores1 &lt;- scores2 | . What are the contents of scores1 after the code segment is executed?: . [92, 79, 97, 63] | . Consider the following code segment: . listA &lt;- [&quot;Sam&quot;, &quot;Ann&quot;] | listB &lt;- [&quot;Jamal&quot;, &quot;Tamara&quot;] | listB &lt;- listA | listA &lt;- listB | . What are the contents of listA after the code segment is executed? . [&quot;Sam&quot;, &quot;Ann&quot;] | Though value of listB changes to match listA, listA remains the same due to taking on the value of the new listB. . . What is the length of this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 6 | . What is the index number of &quot;Purple&quot; in this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . Count starts at 0, therefore there is index 5. . . Which of the following types of data can be stored in a list? . All of the above | Note: Any type of data can be stored within a list. A list can contain a mix of types of data. . . Which of the following variables is a float? . -106.2 | Note: A float is a decimal number. . . If a list has a length of 24 items, what is the index number of the 17th item? . Index starts at 0, therefore the 17th item would be the 16th index. . . A variable is permanent and cannot be changed later on. . False | . Which of the following is true about the list? [&quot;Apples&quot;, 42.0, &quot;Bananas&quot;, 0.5, &quot;Avocado&quot;, -902.2, &quot;Lychee&quot;, 6.9, &quot;Orange&quot;, 7.2] . 1 and 4 . | The list has floats and string variable types. . | The index of &quot;Avocado&quot; is 4. . | .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/11/16/3.2dailyvideo2.html",
            "relUrl": "/lessons/2022/11/16/3.2dailyvideo2.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Night at The Museum Blog",
            "content": "NATM . After completeing and personalizing our project, we were excited to share it with atendees of Night at The Museum. . Because we arrived early, our first participants (our friends) used our personal computer to explore our Song-by-Emotion generator. We explained to them how each aspect of our project connects, and simplified the concepts of frontend and backend. . . Once we were able to connect to a larger display, we explained our program to larger groups of people. They found it interesting, and often understoof how it worked due to having prior computer science knowlege. . . After demonstrating our project to a variety of peers and parents, we found a few points of improvement. . Add more synonyms so that user has more leeway for input (more specific emotions) | More specific instructions so that user is able to understand purpose better | Frontend to improve appearance | . After finishing our own presentation, we explored projects from other groups in APCSP and APCSA. . Some included marketplace to sell personal items, stopwatches to help studying, and arcade games. . . Finally, we explored projects from other classes like AP Studio Art. . .",
            "url": "https://sanikasha.github.io/superFastPages/ssjn/2022/11/04/NATM-Blog.html",
            "relUrl": "/ssjn/2022/11/04/NATM-Blog.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "API Burger (formatted)",
            "content": "import requests url = &quot;https://burgers1.p.rapidapi.com/burgers&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;45de2811f2mshc93a1328afeb302p1ee42bjsnbde76995c6f3&quot;, &quot;X-RapidAPI-Host&quot;: &quot;burgers1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . [ { &#34;id&#34;: 0, &#34;name&#34;: &#34;Tribute Burger&#34;, &#34;restaurant&#34;: &#34;Honest Burgers&#34;, &#34;web&#34;: &#34;www.honestburgers.co.uk&#34;, &#34;description&#34;: &#34;A mouth-watering honest beef burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;american cheese&#34;, &#34;burger sauce&#34;, &#34;french mustard&#34;, &#34;pickes&#34;, &#34;onion&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;75&#34;, &#34;line1&#34;: &#34;Venn Street&#34;, &#34;line2&#34;: &#34;Clapham&#34;, &#34;postcode&#34;: &#34;SW4 0BD&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 1, &#34;name&#34;: &#34;Pulled Mooshie&#34;, &#34;restaurant&#34;: &#34;Mooshies&#34;, &#34;web&#34;: &#34;www.veganburger.org&#34;, &#34;description&#34;: &#34;Spicy vegan burger with jackfruit&#34;, &#34;ingredients&#34;: [ &#34;jackfruit&#34;, &#34;coleslaw&#34;, &#34;gluten free bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;104&#34;, &#34;line1&#34;: &#34;Brick Lane&#34;, &#34;line2&#34;: &#34;Shoreditch&#34;, &#34;postcode&#34;: &#34;E1 6RL&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 2, &#34;name&#34;: &#34;Krabby Patty&#34;, &#34;restaurant&#34;: &#34;Krusty Krab&#34;, &#34;web&#34;: &#34;https://twitter.com/SpongeBob&#34;, &#34;description&#34;: &#34;The only people who don&#39;t like a Krabby Patty have never tasted one.&#34;, &#34;ingredients&#34;: [ &#34;bun&#34;, &#34;patty&#34;, &#34;ketchup&#34;, &#34;mustard&#34;, &#34;pickles&#34;, &#34;onions&#34;, &#34;lettuce&#34;, &#34;cheese&#34;, &#34;tomato&#34;, &#34;bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;831&#34;, &#34;line1&#34;: &#34;Bottom Feeder Lane&#34;, &#34;line2&#34;: &#34;&#34;, &#34;postcode&#34;: &#34;&#34;, &#34;country&#34;: &#34;Bikini Bottom, Pacific Ocean&#34; } ] }, { &#34;id&#34;: 3, &#34;name&#34;: &#34;The Good Burger&#34;, &#34;restaurant&#34;: &#34;Good Burger&#34;, &#34;web&#34;: &#34;https://en.wikipedia.org/wiki/Good_Burger&#34;, &#34;description&#34;: &#34;Welcome to Good Burger, home of the Good Burger, can I take your order?&#34;, &#34;ingredients&#34;: [ &#34;bun&#34;, &#34;tomato&#34;, &#34;Ed&#39;s secret sauce&#34;, &#34;lettuce&#34;, &#34;onions&#34;, &#34;cheese&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;000&#34;, &#34;line1&#34;: &#34;Good Burger&#34;, &#34;line2&#34;: &#34;437 Glendora Ave.&#34;, &#34;postcode&#34;: &#34;CA&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 4, &#34;name&#34;: &#34;Crunchy Nacho Burger&#34;, &#34;restaurant&#34;: &#34;Max Burgers&#34;, &#34;web&#34;: &#34;https://www.max.se/maten/meny/burgare/crunchy-nacho-burger/&#34;, &#34;description&#34;: &#34;The best combination of crunchiness and softness, all in one single burger&#34;, &#34;ingredients&#34;: [ &#34;sesame bun&#34;, &#34;salsa&#34;, &#34;cheddar&#34;, &#34;nachos&#34;, &#34;beef&#34;, &#34;tomato&#34;, &#34;pickled onion&#34;, &#34;lettuce&#34;, &#34;jalapeño mayonnaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;48D&#34;, &#34;line1&#34;: &#34;Skeppsbrogatan&#34;, &#34;line2&#34;: &#34;Luleå&#34;, &#34;postcode&#34;: &#34;971 25&#34;, &#34;country&#34;: &#34;Sweden&#34; } ] }, { &#34;id&#34;: 5, &#34;name&#34;: &#34;Barbie Burger&#34;, &#34;restaurant&#34;: &#34;Flower Burger&#34;, &#34;web&#34;: &#34;https://www.flowerburger.it/&#34;, &#34;description&#34;: &#34;From a pink explosion was born Barbie Burger, a special edition in partnership with Mattel&#34;, &#34;ingredients&#34;: [ &#34;pink bun&#34;, &#34;lentil and beetroot burger&#34;, &#34;tomatoes&#34;, &#34;gentilina salad&#34;, &#34;barbie hummus&#34;, &#34;barbie mayo&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;Porta Genova&#34;, &#34;line2&#34;: &#34;Via Tortona&#34;, &#34;postcode&#34;: &#34;20144&#34;, &#34;country&#34;: &#34;Italy&#34; } ] }, { &#34;id&#34;: 6, &#34;name&#34;: &#34;Curry On My Wayward Bun&#34;, &#34;restaurant&#34;: &#34;Bob&#39;s Burgers&#34;, &#34;web&#34;: &#34;https://bobs-burgers.fandom.com/wiki/Burger_of_the_Day&#34;, &#34;description&#34;: &#34;N/A&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;curry&#34;, &#34;bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;0&#34;, &#34;line1&#34;: &#34;Ocean Avenue&#34;, &#34;line2&#34;: &#34;NJ&#34;, &#34;postcode&#34;: &#34;08260&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 7, &#34;name&#34;: &#34;MEISTER ALLER KLASSEN&#34;, &#34;restaurant&#34;: &#34;Burgermeister&#34;, &#34;web&#34;: &#34;https://burger-meister.de&#34;, &#34;description&#34;: &#34;Fast food joint located in a public toilet? Why on earth?!&#34;, &#34;ingredients&#34;: [ &#34;2 x meat&#34;, &#34;2 x cheese&#34;, &#34;bacon&#34;, &#34;barbequesauce&#34;, &#34;jalapenos&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;1&#34;, &#34;line1&#34;: &#34;Potsdamer Platz&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10785&#34;, &#34;country&#34;: &#34;Germany&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;45&#34;, &#34;line1&#34;: &#34;Eberswalder, Schönhauser Allee&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10435&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 8, &#34;name&#34;: &#34;Vegetarian Burger (Indian Style)&#34;, &#34;restaurant&#34;: &#34;Indian Burgers&#34;, &#34;web&#34;: &#34;https://www.cookwithmanali.com/vegetarian-burger-indian-style/&#34;, &#34;description&#34;: &#34;With summer around the corner, I had to share a vegetarian burger recipe with you guys. Actually I plan to share more in the next month but I thought I will start with this Indian style Vegetarian Burger aka Masala Burger!&#34;, &#34;ingredients&#34;: [ &#34;american cheese&#34;, &#34;burger sauce&#34;, &#34;french mustard&#34;, &#34;pickes&#34;, &#34;onion&#34;, &#34;Veggies&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;007&#34;, &#34;line1&#34;: &#34;Line1&#34;, &#34;line2&#34;: &#34;Line2&#34;, &#34;postcode&#34;: &#34;&#34;, &#34;country&#34;: &#34;India&#34; } ] }, { &#34;id&#34;: 9, &#34;name&#34;: &#34;Fat Santa&#34;, &#34;restaurant&#34;: &#34;Sky City Hamilton&#34;, &#34;web&#34;: &#34;https://skycityhamilton.co.nz/eat-drink/eat-burger/&#34;, &#34;description&#34;: &#34;A Christmas themed burger&#34;, &#34;ingredients&#34;: [ &#34;chicken thigh&#34;, &#34;champagne ham&#34;, &#34;sage and onion stuffing&#34;, &#34;gravy mash&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;cranberry sauce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;348&#34;, &#34;line1&#34;: &#34;Victoria street&#34;, &#34;line2&#34;: &#34;Hamilton Central, Hamilton&#34;, &#34;postcode&#34;: &#34;3204&#34;, &#34;country&#34;: &#34;New Zealand&#34; } ] }, { &#34;id&#34;: 10, &#34;name&#34;: &#34;Blondie&#34;, &#34;restaurant&#34;: &#34;Yankys&#34;, &#34;web&#34;: &#34;http://yankyslambton.co.za/menu/&#34;, &#34;description&#34;: &#34;Delicious steak burger&#34;, &#34;ingredients&#34;: [ &#34;steak&#34;, &#34;BBQ sauce&#34;, &#34;bacon&#34;, &#34;egg&#34;, &#34;cheese&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;onion&#34;, &#34;gerkins&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;114&#34;, &#34;line1&#34;: &#34;Webber Road&#34;, &#34;line2&#34;: &#34;Lambton, Germiston&#34;, &#34;postcode&#34;: &#34;1414&#34;, &#34;country&#34;: &#34;South Africa&#34; } ] }, { &#34;id&#34;: 11, &#34;name&#34;: &#34;Monster Burger&#34;, &#34;restaurant&#34;: &#34;Yankys&#34;, &#34;web&#34;: &#34;http://yankyslambton.co.za/menu/&#34;, &#34;description&#34;: &#34;Massive meaty burger - the size of a dinner plate&#34;, &#34;ingredients&#34;: [ &#34;250g patty&#34;, &#34;bacon&#34;, &#34;cheese&#34;, &#34;2 eggs&#34;, &#34;steak&#34;, &#34;BBQ sauce&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;onion&#34;, &#34;gerkins&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;114&#34;, &#34;line1&#34;: &#34;Webber Road&#34;, &#34;line2&#34;: &#34;Lambton, Germiston&#34;, &#34;postcode&#34;: &#34;1414&#34;, &#34;country&#34;: &#34;South Africa&#34; } ] }, { &#34;id&#34;: 12, &#34;name&#34;: &#34;Buffalo chicken burger&#34;, &#34;restaurant&#34;: &#34;Meat Mission&#34;, &#34;web&#34;: &#34;http://meatliquor.com/&#34;, &#34;description&#34;: &#34;Large, messy, super tasty buffalo chicken burger&#34;, &#34;ingredients&#34;: [ &#34;Fried chicken breast&#34;, &#34;House-made buffalo sauce&#34;, &#34;Lettuce&#34;, &#34;Red onions&#34;, &#34;Blue cheese sauce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;15&#34;, &#34;line1&#34;: &#34;Hoxton Market,&#34;, &#34;line2&#34;: &#34;Hackney, London&#34;, &#34;postcode&#34;: &#34;N1 6HG&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 13, &#34;name&#34;: &#34;Cheatday Burger&#34;, &#34;restaurant&#34;: &#34;Burgeramt&#34;, &#34;web&#34;: &#34;https://www.burgeramt.com/&#34;, &#34;description&#34;: &#34;Perfect when you need a day off from your workout routine&#34;, &#34;ingredients&#34;: [ &#34;double beef&#34;, &#34;chilli-cheese sauce&#34;, &#34;2 slices cheddar cheese&#34;, &#34;crispy bacon stripes&#34;, &#34;nachos&#34;, &#34;mayonnaise&#34;, &#34;mustard&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;21 - 22&#34;, &#34;line1&#34;: &#34;Krossener Straße&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10245&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 14, &#34;name&#34;: &#34;The Truffler (vegan)&#34;, &#34;restaurant&#34;: &#34;Byron Burgers&#34;, &#34;web&#34;: &#34;https://www.byron.co.uk/&#34;, &#34;description&#34;: &#34;Beyond Meat patty, crispy onions, mushrooms, pickled red onions, lettuce American mustard, truffle ‘cheese’ fondue, truffle ‘mayo’&#34;, &#34;ingredients&#34;: [ &#34;1/4 Beyond Meat patty&#34;, &#34;crispy onions&#34;, &#34;sauteed mushrooms&#34;, &#34;pickled red onions&#34;, &#34;lettuce&#34;, &#34;American mustard&#34;, &#34;truffle vegan cheese fondue&#34;, &#34;truffle vegan mayo&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;41-45&#34;, &#34;line1&#34;: &#34;The Cut&#34;, &#34;line2&#34;: &#34;London&#34;, &#34;postcode&#34;: &#34;SE1 8LF&#34;, &#34;country&#34;: &#34;United Kingdom&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;The Loft&#34;, &#34;line1&#34;: &#34;Westfield Shopping Centre&#34;, &#34;line2&#34;: &#34;London&#34;, &#34;postcode&#34;: &#34;W12 7GF&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 15, &#34;name&#34;: &#34;Aloette Buger&#34;, &#34;restaurant&#34;: &#34;Aloette&#34;, &#34;web&#34;: &#34;https://aloetterestaurant.com/&#34;, &#34;description&#34;: &#34;Haute cuisine meets cravings for cheeseburgers.&#34;, &#34;ingredients&#34;: [ &#34;6oz beef patty, served medium&#34;, &#34;griddled beaufort cheese&#34;, &#34;cheddar mayo&#34;, &#34;shredded lettuce&#34;, &#34;potato roll&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;163&#34;, &#34;line1&#34;: &#34;Spadina Ave&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5V 2A5&#34;, &#34;country&#34;: &#34;Canada&#34; } ] }, { &#34;id&#34;: 16, &#34;name&#34;: &#34;BBQ Burger&#34;, &#34;restaurant&#34;: &#34;Fresh Plant Powered&#34;, &#34;web&#34;: &#34;https://freshplantpowered.com/&#34;, &#34;description&#34;: &#34;Vegan burger made from whole, natural ingredients.&#34;, &#34;ingredients&#34;: [ &#34;house-made grain burger&#34;, &#34;bbq sauce&#34;, &#34;quinoa onion rings&#34;, &#34;vegan garlic mayo&#34;, &#34;napa cabbage&#34;, &#34;banana chillies&#34;, &#34;tomato&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;147&#34;, &#34;line1&#34;: &#34;Spadina Ave&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5V 2L7&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;326&#34;, &#34;line1&#34;: &#34;Bloor Street West&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5S 1W5&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;894&#34;, &#34;line1&#34;: &#34;Queen Street West&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M6J 1G3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;90&#34;, &#34;line1&#34;: &#34;Eglinton Avenue East&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M4P 2Y3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;47&#34;, &#34;line1&#34;: &#34;Front Street East&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5E 1B3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 5, &#34;number&#34;: &#34;95&#34;, &#34;line1&#34;: &#34;Queen Elizabeth Blvd&#34;, &#34;line2&#34;: &#34;Etobicoke&#34;, &#34;postcode&#34;: &#34;M8Z 1P3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 6, &#34;number&#34;: &#34;8768&#34;, &#34;line1&#34;: &#34;Sunset Blvd&#34;, &#34;line2&#34;: &#34;Los Angeles&#34;, &#34;postcode&#34;: &#34;90069&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 17, &#34;name&#34;: &#34;Carroll&#39;s Cheese Burger&#34;, &#34;restaurant&#34;: &#34;Carroll&#39;s Pub Worms&#34;, &#34;web&#34;: &#34;https://www.carrolls-pub-worms.de/&#34;, &#34;description&#34;: &#34;Tasty black angus beef burger.&#34;, &#34;ingredients&#34;: [ &#34;Irish black angus beef&#34;, &#34;tomato&#34;, &#34;lettuce&#34;, &#34;caramelized onions&#34;, &#34;pickles&#34;, &#34;cheddar cheese&#34;, &#34;tomato relish&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;54&#34;, &#34;line1&#34;: &#34;Rheinstraße&#34;, &#34;line2&#34;: &#34;Worms&#34;, &#34;postcode&#34;: &#34;67547&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 18, &#34;name&#34;: &#34;Mojitto Burger&#34;, &#34;restaurant&#34;: &#34;Burger King India&#34;, &#34;web&#34;: &#34;www.mojitto.com&#34;, &#34;description&#34;: &#34;Burger a day keeps the fat away&#34;, &#34;ingredients&#34;: [ &#34;bread&#34;, &#34;maida&#34;, &#34;chick&#34;, &#34;patty&#34; ], &#34;addresses&#34;: [ { &#34;addressID&#34;: 0, &#34;number&#34;: &#34;8A&#34;, &#34;line1&#34;: &#34;Kaythye millath street&#34;, &#34;postcode&#34;: &#34;620020&#34;, &#34;country&#34;: &#34;India&#34; } ] }, { &#34;id&#34;: 19, &#34;name&#34;: &#34;Double Slab Burger&#34;, &#34;restaurant&#34;: &#34;Slab Burgers&#34;, &#34;web&#34;: &#34;www.slabburgers.com&#34;, &#34;description&#34;: &#34;taste of hormone-free running cows&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;caramelized onions&#34;, &#34;slab sauce&#34;, &#34;pickles&#34;, &#34;mushrooms&#34;, &#34;tomato&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;47&#34;, &#34;line1&#34;: &#34;Charles Street West&#34;, &#34;line2&#34;: &#34;Toronto, Ontario&#34;, &#34;postcode&#34;: &#34;M4Y 2R4&#34;, &#34;country&#34;: &#34;Canada&#34; } ] }, { &#34;id&#34;: 20, &#34;name&#34;: &#34;Du Brown&#34;, &#34;restaurant&#34;: &#34;Du Brown Burger Café&#34;, &#34;web&#34;: &#34;https://www.dubrown.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;bacon&#34;, &#34;caramelized onions&#34;, &#34;cheddar cheese&#34;, &#34;barbecue sauce&#34;, &#34;onion rings&#34;, &#34;jalepeños&#34;, &#34;tomato&#34;, &#34;lettuce&#34;, &#34;chipote mayonaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;rue St Léonard&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 21, &#34;name&#34;: &#34;Melting Potes&#34;, &#34;restaurant&#34;: &#34;Melting Potes Nantes&#34;, &#34;web&#34;: &#34;https://www.meltingpotesnantes.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;poutine&#34;, &#34;raclette cheese&#34;, &#34;honey mustard sauce&#34;, &#34;goats cheese&#34;, &#34;crispy onions&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;boulevard de la Prairie au Duc&#34;, &#34;line2&#34;: &#34;Ile de Nantes, Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 22, &#34;name&#34;: &#34;Big Fernand&#34;, &#34;restaurant&#34;: &#34;Big Fernand&#34;, &#34;web&#34;: &#34;https://bigfernand.com/&#34;, &#34;description&#34;: &#34;L&#39;atelier du Hamburgé - The burger workshop&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;sundried tomates&#34;, &#34;tatar sauce&#34;, &#34;confit onions&#34;, &#34;blue cheese&#34;, &#34;smokey bacon&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;7&#34;, &#34;line1&#34;: &#34;rue des Halles&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;3&#34;, &#34;line1&#34;: &#34;Place de Béthune&#34;, &#34;line2&#34;: &#34;Lille&#34;, &#34;postcode&#34;: &#34;59000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;6&#34;, &#34;line1&#34;: &#34;place Jean Jaurès&#34;, &#34;line2&#34;: &#34;Montpellier&#34;, &#34;postcode&#34;: &#34;34000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;86&#34;, &#34;line1&#34;: &#34;Boulevard du Montparnasse&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75014&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;55&#34;, &#34;line1&#34;: &#34;rue de Faubourg Poissonnière&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 5, &#34;number&#34;: &#34;4&#34;, &#34;line1&#34;: &#34;rue du Parchemin&#34;, &#34;line2&#34;: &#34;Strasbourg&#34;, &#34;postcode&#34;: &#34;67000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 23, &#34;name&#34;: &#34;PNY Burger&#34;, &#34;restaurant&#34;: &#34;PNY Burger&#34;, &#34;web&#34;: &#34;https://pnyburger.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;poutine&#34;, &#34;raclette cheese&#34;, &#34;honey mustard sauce&#34;, &#34;goats cheese&#34;, &#34;crispy onions&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;50&#34;, &#34;line1&#34;: &#34;rue de Cautartin&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;120&#34;, &#34;line1&#34;: &#34;rue du Faubourg St Antoine&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75012&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;1&#34;, &#34;line1&#34;: &#34;rue Perrée&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75003&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;96&#34;, &#34;line1&#34;: &#34;rue Oberkampf&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75011&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;24&#34;, &#34;line1&#34;: &#34;rue Pierre Fontaine&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 24, &#34;name&#34;: &#34;231 East&#34;, &#34;restaurant&#34;: &#34;231 East Street&#34;, &#34;web&#34;: &#34;https://www.231-east.fr/&#34;, &#34;description&#34;: &#34;True New York style burger in France&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;smoked bacon&#34;, &#34;chicken&#34;, &#34;veggie burgers&#34;, &#34;brioche bun&#34;, &#34;honey mustard sauce&#34;, &#34;onion chutney&#34;, &#34;pepper sauce&#34;, &#34;avacado&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;7&#34;, &#34;line1&#34;: &#34;rue de la Couronne&#34;, &#34;line2&#34;: &#34;Aix-en-Provence&#34;, &#34;postcode&#34;: &#34;13100&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;9&#34;, &#34;line1&#34;: &#34;faubourg Sainte-Claire&#34;, &#34;line2&#34;: &#34;Annecy&#34;, &#34;postcode&#34;: &#34;7400&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;10&#34;, &#34;line1&#34;: &#34;Grande rue&#34;, &#34;line2&#34;: &#34;Grenoble&#34;, &#34;postcode&#34;: &#34;38000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;2&#34;, &#34;line1&#34;: &#34;rue de la Pépinière&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75008&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;&#34;, &#34;line1&#34;: &#34;boulevard Géneral de Gaulle&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 25, &#34;name&#34;: &#34;Cajun Black Bean Burger&#34;, &#34;restaurant&#34;: &#34;The Chicago Diner&#34;, &#34;web&#34;: &#34;www.veggiediner.com&#34;, &#34;description&#34;: &#34;a hearty veggie burger with a kick that goes great with sweet potato fries&#34;, &#34;ingredients&#34;: [ &#34;spicy black bean veggie patty&#34;, &#34;sautéed onions&#34;, &#34;mushrooms&#34;, &#34;spinach&#34;, &#34;tomato&#34;, &#34;fried jalapeño&#34;, &#34;cheddar sauce&#34;, &#34;creole mustard&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;3411&#34;, &#34;line1&#34;: &#34;N Halsted St&#34;, &#34;line2&#34;: &#34;Chicago, Illinois&#34;, &#34;postcode&#34;: &#34;60657&#34;, &#34;country&#34;: &#34;USA&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;2333&#34;, &#34;line1&#34;: &#34;N Milwaukee Ave&#34;, &#34;line2&#34;: &#34;Chicago, Illinois&#34;, &#34;postcode&#34;: &#34;60647&#34;, &#34;country&#34;: &#34;USA&#34; } ] }, { &#34;id&#34;: 26, &#34;name&#34;: &#34;Hatch Green Chile Bacon Burger&#34;, &#34;restaurant&#34;: &#34;Whataburger&#34;, &#34;web&#34;: &#34;www.whataburger.com&#34;, &#34;description&#34;: &#34;burger with hatch green chiles, bacon and cheese&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;cheese&#34;, &#34;bacon&#34;, &#34;hatch green chiles&#34;, &#34;mayonnaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;984&#34;, &#34;line1&#34;: &#34;388 E Stacy Rd&#34;, &#34;line2&#34;: &#34;Allen, TX&#34;, &#34;postcode&#34;: &#34;75002&#34;, &#34;country&#34;: &#34;USA&#34; } ] }, { &#34;id&#34;: 27, &#34;name&#34;: &#34;The Street Burgers and Coctail Bar Prague 1&#34;, &#34;restaurant&#34;: &#34;The Street&#34;, &#34;web&#34;: &#34;www.thestreet.cz&#34;, &#34;description&#34;: &#34;American, Bar, International, European, Vegetarian Friendly&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;cheddar cheese&#34;, &#34;blue cheese&#34;, &#34;onion&#34;, &#34;mozzarella&#34;, &#34;bacon&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;11&#34;, &#34;line1&#34;: &#34;Konviktska&#34;, &#34;line2&#34;: &#34;Prague&#34;, &#34;postcode&#34;: &#34;110 00&#34;, &#34;country&#34;: &#34;The Czech Republic&#34; } ] } ] .",
            "url": "https://sanikasha.github.io/superFastPages/week%207/2022/10/10/BurgerAPI.html",
            "relUrl": "/week%207/2022/10/10/BurgerAPI.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Title",
            "content": "",
            "url": "https://sanikasha.github.io/superFastPages/2022/10/10/BurgerAPI-jvsc-fa8558d5-9305-41ca-86d5-bb432b35e2b588a10683-7e9a-4a42-aa4f-61ded704af3e.html",
            "relUrl": "/2022/10/10/BurgerAPI-jvsc-fa8558d5-9305-41ca-86d5-bb432b35e2b588a10683-7e9a-4a42-aa4f-61ded704af3e.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "API Spotify",
            "content": "import requests url = &quot;https://spotify23.p.rapidapi.com/search/&quot; querystring = {&quot;q&quot;:&quot;&lt;REQUIRED&gt;&quot;,&quot;type&quot;:&quot;multi&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;limit&quot;:&quot;10&quot;,&quot;numberOfTopResults&quot;:&quot;5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;45de2811f2mshc93a1328afeb302p1ee42bjsnbde76995c6f3&quot;, &quot;X-RapidAPI-Host&quot;: &quot;spotify23.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) json = response.json() . {&#34;albums&#34;:{&#34;totalCount&#34;:28,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:1rVhockt4RAiZFaK3M3zPB&#34;,&#34;name&#34;:&#34;No Jacket Required (2016 Remaster)&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4lxfqrEsLX6N1N4OCSkILp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Phil Collins&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0279553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485179553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27379553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:1985}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:7avlHipAwnKsxcXwC9Wpin&#34;,&#34;name&#34;:&#34;No Jacket Required (Deluxe Edition)&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4lxfqrEsLX6N1N4OCSkILp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Phil Collins&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0257480be4ce4fd7659a25b7d9&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485157480be4ce4fd7659a25b7d9&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27357480be4ce4fd7659a25b7d9&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:1985}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:3JalRx7hoyAC7pyoc7aaw7&#34;,&#34;name&#34;:&#34;Some Assembly Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:1dwRnam2taNMv8H3VR6isd&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Assembly of Dust&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e023a08256fb7ce8a38b41ea5ff&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048513a08256fb7ce8a38b41ea5ff&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2733a08256fb7ce8a38b41ea5ff&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2009}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:5gxL1YPTDUtyUG2Qp3wVO0&#34;,&#34;name&#34;:&#34;Required Etiquette Vol. 1&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:0LyfQWJT6nXafLPZqxe9Of&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Various Artists&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e023f494786d82cc0f20a452dbe&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048513f494786d82cc0f20a452dbe&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2733f494786d82cc0f20a452dbe&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2014}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:53aQdegVPKq4MgSGgCQuLz&#34;,&#34;name&#34;:&#34;No Faith Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4DMlDJn7CPSSS0DuUf1vrH&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Snowy White&#34;}},{&#34;uri&#34;:&#34;spotify:artist:5zRIFTHDQwGWKZ7z61fFKb&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;The White Flames&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02c3e11f275c54926f5bfcb411&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851c3e11f275c54926f5bfcb411&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273c3e11f275c54926f5bfcb411&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:1996}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:0BbeoTXqQv0qKki6CDcznI&#34;,&#34;name&#34;:&#34;Disassembly Required (Teaser Original Soundtrack)&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:0yXeAQirPMVzAlhxGvux1s&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Liam Vickers&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0226cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485126cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27326cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2021}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:1nYOe3S7pWbZwbzS92IScH&#34;,&#34;name&#34;:&#34;Required Repertoire for the 46th PTNA Piano Competition 2022, Vol. 1&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:0LyfQWJT6nXafLPZqxe9Of&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Various Artists&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0258c6ffa1c61bed0f61ac1204&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485158c6ffa1c61bed0f61ac1204&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27358c6ffa1c61bed0f61ac1204&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2022}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:3xEUUVwjNVvTaHQjcpea8O&#34;,&#34;name&#34;:&#34;Assembly Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:6ytGxUYeXamODJwiXuZvjO&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Olivia Penalva&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2022}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:55bIeFDVLsLwa3WEnSJe0C&#34;,&#34;name&#34;:&#34;No Fantasy Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:5l9wiTZVfqQTfMDOt0HtwC&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Tiga&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e023542e4268c5a12d41a98b164&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048513542e4268c5a12d41a98b164&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2733542e4268c5a12d41a98b164&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2016}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:2ZNhj2qao5CEasrS2NH45J&#34;,&#34;name&#34;:&#34;No Assembly Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:70BRQ5tBte6kVqHviL3srE&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Pieces Of A Dream&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0238b547096e33bf308c492a4b&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485138b547096e33bf308c492a4b&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27338b547096e33bf308c492a4b&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2004}}}]},&#34;artists&#34;:{&#34;totalCount&#34;:9,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:1g05P4Ua1FzC0cQxSlgmyu&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebc86baaa7ad722a74dda4d43c&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178c86baaa7ad722a74dda4d43c&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:2FikzP9y7jVNqwpMgvyxnk&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5eb4cbc0b4529e9795a45a7ffe2&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f1784cbc0b4529e9795a45a7ffe2&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:4C2vxz7RaHdh9A97EA4NEp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Required for Entry&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5eb49f6cfb7fc3162bd3024683a&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f17849f6cfb7fc3162bd3024683a&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:0S5ZedpU3jHX9ihOrOVYhT&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Maintenance Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebbbe71234449ca45b2bc7da2a&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178bbe71234449ca45b2bc7da2a&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:7npQgtl4CC9gX2uq9voTT2&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;No Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebd0309f42daa0bfd24954bd6e&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178d0309f42daa0bfd24954bd6e&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:5QDlAcYAOhP52ors9UnBah&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;No Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:null}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:6BAFZXut0gZrxHlxNWUBzn&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Hard Hat Required!!&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273f47c07d1097b04371ca2474a&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851f47c07d1097b04371ca2474a&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:5Ct8sSRWZX4Pp9hEJ6Qr9f&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;No Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27391150be1b9ed929035666754&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485191150be1b9ed929035666754&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:1q1qCPxxITofbZLotknvyB&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Some Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273783e027a2b93eb73654f71e6&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851783e027a2b93eb73654f71e6&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}}]},&#34;episodes&#34;:{&#34;totalCount&#34;:916,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:4afg7iiB5Ql8hv5DCpP9KH&#34;,&#34;name&#34;:&#34;Ep. 1023 - New Medical Guidelines Say Parental Consent Not Required For Child Gender Transition&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d306e6ebc33226673336530f8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f306e6ebc33226673336530f8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a306e6ebc33226673336530f8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:3435546},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-09-16T18:30:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d306e6ebc33226673336530f8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f306e6ebc33226673336530f8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a306e6ebc33226673336530f8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Click here to join the member exclusive portion of my show: https: / /utm.io /ueSEm u00a0 Today on the Matt Walsh Show, the leading u201ctransgender health u201d organization has finally released its new guidelines recommending medical and surgical transition for kids. It also recommends going around the parents if they aren u2019t u201caffirming. u201d Parental consent is now optional, says WPATH. Also, in one of the best stories of the year, governor Ron DeSantis ships plane loads of illegals to the sanctuary city of Martha u2019s Vineyard. We u2019ll find out how this is just like the holocaust, according to the Left. And the treasury secretary says that the IRS is the foundation of our country. In our Daily Cancellation, a fat activist on Twitter says that she u2019s only fat because of white people. How does she connect those dots? u00a0 u00a0 - - - u00a0 DailyWire+: Stop giving your money to woke corporations that hate you. Get your Jeremy u2019s Razors today at https: / /www.jeremysrazors.com. u00a0 Get the brand new Johnny the Walrus Plushie here: https: / /bit.ly /3CHeLlu u00a0 u00a0- - - u00a0 Today u2019s Sponsors: With thousands of satisfied customers and an A+ rating with the Better Business Bureau, Birch Gold can help you protect your savings. Text &#34;WALSH &#34; to 989898 for your no-cost, no-obligation, FREE information kit. Get 10% OFF Your Will! Use Promo Code u2018WALSH u2019 at EpicWill.com u00a0 - - - Socials: Follow on Twitter: https: / /bit.ly /3Rv1VeF u00a0 Follow on Instagram: https: / /bit.ly /3KZC3oA u00a0 Follow on Facebook: https: / /bit.ly /3eBKjiA u00a0 Subscribe on YouTube: https: / /bit.ly /3RQp4rs u00a0 Learn more about your ad choices. Visit podcastchoices.com /adchoices&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:3K4S63et2MdE0227PBB9dw&#34;,&#34;name&#34;:&#34;The Video Game Required Reading List: 1995-1999 [The Resties]&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d493f9081e6102fecccdfeddb&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f493f9081e6102fecccdfeddb&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a493f9081e6102fecccdfeddb&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:3833113},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-10-04T06:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /0eac8fed3787b82b1f34f5d4ba7a890764d17e48&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /7ca66d4bb76706d2a7456813872d08815fe4b9ef&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /9dcdb02a31e7eb76c0b97e272476db6552838a3a&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;The Resties Required Reading List returns! u00a0Our goal is to curate a &#34;must play &#34; list of 25 games released between 1980 to 2020. Think of it like Video Games 101. This week, we&#39;ve selected games from 1995-1999. Join us as we revisit the moment when video games went u00a0mainstream! u00a0Visit @thebestiespod on Twitter to see a full list of games from this week&#39;s episode.Previous picks:1985-89 - Super Mario Bros., The Legend of Zelda, SimCity2005-09 - Resident Evil 4, Wii Sports, Call of Duty: Modern WarfareThis week&#39;s bonus recs: u00a0Deep Rock Galactic and When Worlds Collide (1951) u00a0&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:1K69VSdmJf2iWMGd7Ys21j&#34;,&#34;name&#34;:&#34;No More Than This Is Required | Ask Daily Stoic&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:973635},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-09-30T07:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;We are impressed by people who do incredible things u2013whether it u2019s creating some great work of art or pulling off some impossible athletic feat, bringing about social change or building an enormous organization. How did they do it? Where did that come from? Sometimes to excuse our own failures, we tell ourselves it was genius or genetics, inspiration rather than perspiration. ud83d udcd5 Ryan Holiday&#39;s new book &#34;Discipline Is Destiny &#34; is available for pre-order now! We u2019ve put together a bunch of cool preorder bonuses u2014among them is a signed and numbered page from the original manuscript of the book. You can learn more about those and how to receive them over at Dailystoic.com /preorder. u00a0 u2709 ufe0f Want Stoic wisdom delivered to your inbox daily? Sign up for the FREE Daily Stoic email at https: / /dailystoic.com /dailyemail ud83d udcf1 Follow us: Instagram, Twitter, YouTube, TikTok, and Facebook u00a0See Privacy Policy at https: / /art19.com /privacy and California Privacy Notice at https: / /art19.com /privacy#do-not-sell-my-info.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:0KoDcIN8UXlDFKYYiuwClc&#34;,&#34;name&#34;:&#34;S7E2: No Roadmap Required&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68dc003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fc003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ac003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:2357774},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-09-20T00:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68dc003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fc003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ac003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Michaela always craved the kind of life she didn u2019t have as a kid. She u2019d find a stable guy, settle down, and start a family. For several years, she seemed to be on her way. But then she discovered that, no matter how clear that original path may have seemed, she ultimately had to build her own. Email us at loveletters@boston.com.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:4GN7MqKoicdv5lXOVpLRGc&#34;,&#34;name&#34;:&#34;Orgasms &amp; Oral (No Penetration Required)&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68de0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fe0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ae0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:1971853},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-07-12T18:21:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68de0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fe0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ae0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;It u2019s a good time to expand our definition of sex. At the end of the day, sex is play for adults: it u2019s where we collaborate with another person, creating a momentary world of pleasure and eroticism with them. But so often, we assume that sex equals penetration, and here u2019s the problem with that: not everyone orgasms during penetration. Not everyone feels erotic during penetration! So let u2019s make sex more interesting and exploratory, shall we?On today u2019s show, I u2019m talking up all the different types of non-penetrative sex u2013 like mutual masturbation, sensual massage, toys, hand stuff u2013 to help you break out of a conventional sex script, and have sex that u2019s more tailored to your personality and desires. Because you never have to take penetration off the table entirely u2026but what would happen if you took it off the table for a little while? (Hint: probably more orgasms.) u00a0Show Notes:Prostate Play 101Want to Try a Sex Cleanse? u00a0Penis Problems, Solved u00a0Shop with Emily4 Ways to Close The Orgasm GapFirst Date, First Orgasm, First Threesome u00a0 Hosted on Acast. See acast.com /privacy for more information.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:1pIV5kyw1Yg1NULRJyM240&#34;,&#34;name&#34;:&#34;The Flagship: &#39;All Gas, No Breaks&#39; mentality required for Texas facing embattled Oklahoma&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d75db97843096b67fa8a949f7&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f75db97843096b67fa8a949f7&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a75db97843096b67fa8a949f7&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:2805916},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-10-07T19:29:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d5a9969c4a0d7dca4426ac445&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f5a9969c4a0d7dca4426ac445&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a5a9969c4a0d7dca4426ac445&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;One of the most unique rivalry games in College Football kicks off Saturday morning when Texas takes on Oklahoma in the Red River Showdown. The Flagship Podcast delivers a loaded shows leading up to kickoff as Horns247&#39;s Chip Brown and Taylor Estes deliver the latest intel on the Longhorns QB situation, what to expect from Texas against this embattled OU team and much, much more! To learn more about listener data and our privacy practices visit: https: / /www.audacyinc.com /privacy-policy Learn more about your ad choices. Visit https: / /podcastchoices.com /adchoices&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:4zdN5vspt3aA2uxmq0sQDt&#34;,&#34;name&#34;:&#34;BARD - Required Standard of Care&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68dc368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fc368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ac368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:894563},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-10-02T17:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68dc368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fc368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ac368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Mark and Gary link up on Sunday morning to discuss Gavin Newsom&#39;s signing of previously discussed California Assembly Bill 2098 governing what doctors can say to their patients. They also discuss a development in the Erika Jayne Tom Girardi saga and tease a story that&#39;ll be covered in further depth early this week with Adam. Watch Beyond A Reasonable Doubt on YouTube at YouTube.com /ReasonableDoubtPodcast and subscribe while you&#39;re there.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:5JTNmxeJ0xysbdspkgDElm&#34;,&#34;name&#34;:&#34;Peloton: Some Assembly Required&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:1358367},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-08-24T20:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Amazon becomes the first partner to sell Peloton&#39;s equipment and apparel on their own site. (0:21) Bill Mann discusses: - The upside potential for Peloton - Whether Peloton may become part of Amazon&#39;s Prime membership offerings - Toll Brothers blaming supply chain and labor shortages for a cut in guidance - Nordstrom&#39;s challenges with inventory and family ownership (11:31) Jeremy Bowman and Jason Hall engage in a Bull vs. Bear debate over Beyond Meat. Who won the debate? You can cast your vote in our poll on Twitter @MotleyFoolMoney. Stocks mentioned: PTON, AMZN, TOL, JWN, BYND, YUM Host: Chris Hill Guest: Bill Mann Producer: Ricky Mulvey Engineer: Dan Boyd&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:5b7S50H9UhDr1iSQHBDxnD&#34;,&#34;name&#34;:&#34;WHATEVER IS REQUIRED&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /bcc27befd398f1cb53da780aeac22af6c3d6264f&#34;,&#34;width&#34;:64,&#34;height&#34;:36},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /4b3673c2783a84793200bcfc75186a6f94b47284&#34;,&#34;width&#34;:300,&#34;height&#34;:169},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /935182f3581b526209c3c7236987a6717865d362&#34;,&#34;width&#34;:640,&#34;height&#34;:360}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:211644},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2018-09-27T02:06:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /1dfd39d29f4f582a1b05fc0e5b09e00d97c780b4&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /f52eb414473d024bcd8edf24ba8787a4cbdb0059&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /9daaf33e2fe6b144fc5423ce2bdc19fc3c9190f4&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;This episode is spoken by Dr. Ken Friendly, Les Brown, Eric Thomas and Andy Frisella. You can see more of Dr. Ken Friendly at tr.im /DrKenFriendly, Les Brown at tr.im /LesBrown, Eric Thomas at tr.im /EricThomas and Andy Frisella at tr.im /AndyFrisella. The music is MK Ultra by Really Slow Motion. You can see more of Really Slow Motion at tr.im /ReallySlowMotion.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:7ApZigXnepkUslqMgFDrwC&#34;,&#34;name&#34;:&#34;r /Choosingbeggars JOB OPENING: PhD required. Pay: $0&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /8ac63e7a1028fce0c8790ed9738614d4d886b6cc&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /a07c27c4d7bdd30b14c8f828002d1c3f0a74d1ad&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /b62520a69d29390116eb0f9f9a911f780c54960e&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:954618},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2021-02-05T14:07:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /8ac63e7a1028fce0c8790ed9738614d4d886b6cc&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /a07c27c4d7bdd30b14c8f828002d1c3f0a74d1ad&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /b62520a69d29390116eb0f9f9a911f780c54960e&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;r /Choosingbeggars Are you ready for an exciting new career with CHOOSING BEGGARS INCORPORATED?! We&#39;ve got a great new job opening for a qualified candidate who has a PhD and 20 years of work experience. The pay is only $0 to start, but if you work here you will be rewarded with a sense of pride and accomplishment!&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}}]},&#34;genres&#34;:{&#34;totalCount&#34;:0,&#34;items&#34;:[]},&#34;playlists&#34;:{&#34;totalCount&#34;:3,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:playlist:4Je4L7rV8xRuiybokARidj&#34;,&#34;name&#34;:&#34;Audiophile u2019s Guide to Eargasms: Headphones Required ud83c udfa7&#34;,&#34;description&#34;:&#34;An eclectic mix of some of my favorite songs to listen to with headphones. Headphones Required for Eargasm Experience!&#34;,&#34;images&#34;:{&#34;items&#34;:[{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67706c0000da848349d25e06538a01f545e4b4&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}]},&#34;owner&#34;:{&#34;name&#34;:&#34;Priscilla Bernstein&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:playlist:4mTq7OtfwClwWcCGOseL6Y&#34;,&#34;name&#34;:&#34;Lipscomb Rock and Roll - Required Recordings&#34;,&#34;description&#34;:&#34;This playlist was created to facilitate study of the history of rock and roll as presented in Scott D. Lipscomb&amp;#x27;s &amp;quot;Rock and roll: Its history and stylistic development&amp;quot; (8th edition). See the Recommended Recordings list for additional suggestions beyond this core set of tracks.&#34;,&#34;images&#34;:{&#34;items&#34;:[{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /mosaic.scdn.co /640 /ab67616d00001e022f017e3180aca26809813d2cab67616d00001e0246556d7ac53c73f319d33442ab67616d00001e028f5281f66452016858aef137ab67616d00001e02a0b8a1ce10fddbba6879262e&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /mosaic.scdn.co /300 /ab67616d00001e022f017e3180aca26809813d2cab67616d00001e0246556d7ac53c73f319d33442ab67616d00001e028f5281f66452016858aef137ab67616d00001e02a0b8a1ce10fddbba6879262e&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /mosaic.scdn.co /60 /ab67616d00001e022f017e3180aca26809813d2cab67616d00001e0246556d7ac53c73f319d33442ab67616d00001e028f5281f66452016858aef137ab67616d00001e02a0b8a1ce10fddbba6879262e&#34;,&#34;width&#34;:60,&#34;height&#34;:60}]}]},&#34;owner&#34;:{&#34;name&#34;:&#34;Scott Lipscomb&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:playlist:5HcGRtFtRbYIXuzn50QMdP&#34;,&#34;name&#34;:&#34;We Are Scientists - Required Reading&#34;,&#34;description&#34;:&#34;Using a careful combination of streaming statistics and the clapping sounds we hear at shows, we u2019ve generated the definitive Greatest Hits playlist. For fans of We Are Scientists, and of rock &amp;amp; roll music, this is truly u2026 Required Reading.&#34;,&#34;images&#34;:{&#34;items&#34;:[{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67706c0000da8457377918dcef0337833b2456&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}]},&#34;owner&#34;:{&#34;name&#34;:&#34;We Are Scientists&#34;}}}]},&#34;podcasts&#34;:{&#34;totalCount&#34;:0,&#34;items&#34;:[]},&#34;topResults&#34;:{&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:1g05P4Ua1FzC0cQxSlgmyu&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebc86baaa7ad722a74dda4d43c&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178c86baaa7ad722a74dda4d43c&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:0AzjJdpWFNfl2Jfq8PiNwA&#34;,&#34;id&#34;:&#34;0AzjJdpWFNfl2Jfq8PiNwA&#34;,&#34;name&#34;:&#34;Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:0TCeHxWUMuwosZORJ6yBd9&#34;,&#34;name&#34;:&#34;God Works&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0285c561c798615f07db3b3642&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485185c561c798615f07db3b3642&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27385c561c798615f07db3b3642&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;0TCeHxWUMuwosZORJ6yBd9&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /0TCeHxWUMuwosZORJ6yBd9?si=YcYrqlgiTbWljlcFshQ8aA&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:6aEn1FrJfuRVm9CXpxzLge&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Papy Jeico&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:45375},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:playlist:4Je4L7rV8xRuiybokARidj&#34;,&#34;name&#34;:&#34;Audiophile u2019s Guide to Eargasms: Headphones Required ud83c udfa7&#34;,&#34;description&#34;:&#34;An eclectic mix of some of my favorite songs to listen to with headphones. Headphones Required for Eargasm Experience!&#34;,&#34;images&#34;:{&#34;items&#34;:[{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67706c0000da848349d25e06538a01f545e4b4&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}]},&#34;owner&#34;:{&#34;name&#34;:&#34;Priscilla Bernstein&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:1rVhockt4RAiZFaK3M3zPB&#34;,&#34;name&#34;:&#34;No Jacket Required (2016 Remaster)&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4lxfqrEsLX6N1N4OCSkILp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Phil Collins&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0279553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485179553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27379553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:1985}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:4afg7iiB5Ql8hv5DCpP9KH&#34;,&#34;name&#34;:&#34;Ep. 1023 - New Medical Guidelines Say Parental Consent Not Required For Child Gender Transition&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d306e6ebc33226673336530f8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f306e6ebc33226673336530f8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a306e6ebc33226673336530f8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:3435546},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-09-16T18:30:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d306e6ebc33226673336530f8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f306e6ebc33226673336530f8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a306e6ebc33226673336530f8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Click here to join the member exclusive portion of my show: https: / /utm.io /ueSEm u00a0 Today on the Matt Walsh Show, the leading u201ctransgender health u201d organization has finally released its new guidelines recommending medical and surgical transition for kids. It also recommends going around the parents if they aren u2019t u201caffirming. u201d Parental consent is now optional, says WPATH. Also, in one of the best stories of the year, governor Ron DeSantis ships plane loads of illegals to the sanctuary city of Martha u2019s Vineyard. We u2019ll find out how this is just like the holocaust, according to the Left. And the treasury secretary says that the IRS is the foundation of our country. In our Daily Cancellation, a fat activist on Twitter says that she u2019s only fat because of white people. How does she connect those dots? u00a0 u00a0 - - - u00a0 DailyWire+: Stop giving your money to woke corporations that hate you. Get your Jeremy u2019s Razors today at https: / /www.jeremysrazors.com. u00a0 Get the brand new Johnny the Walrus Plushie here: https: / /bit.ly /3CHeLlu u00a0 u00a0- - - u00a0 Today u2019s Sponsors: With thousands of satisfied customers and an A+ rating with the Better Business Bureau, Birch Gold can help you protect your savings. Text &#34;WALSH &#34; to 989898 for your no-cost, no-obligation, FREE information kit. Get 10% OFF Your Will! Use Promo Code u2018WALSH u2019 at EpicWill.com u00a0 - - - Socials: Follow on Twitter: https: / /bit.ly /3Rv1VeF u00a0 Follow on Instagram: https: / /bit.ly /3KZC3oA u00a0 Follow on Facebook: https: / /bit.ly /3eBKjiA u00a0 Subscribe on YouTube: https: / /bit.ly /3RQp4rs u00a0 Learn more about your ad choices. Visit podcastchoices.com /adchoices&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}}],&#34;featured&#34;:[]},&#34;tracks&#34;:{&#34;totalCount&#34;:27,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:0AzjJdpWFNfl2Jfq8PiNwA&#34;,&#34;id&#34;:&#34;0AzjJdpWFNfl2Jfq8PiNwA&#34;,&#34;name&#34;:&#34;Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:0TCeHxWUMuwosZORJ6yBd9&#34;,&#34;name&#34;:&#34;God Works&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0285c561c798615f07db3b3642&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485185c561c798615f07db3b3642&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27385c561c798615f07db3b3642&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;0TCeHxWUMuwosZORJ6yBd9&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /0TCeHxWUMuwosZORJ6yBd9?si=w4yrEav7Sie8dSsCWOzetg&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:6aEn1FrJfuRVm9CXpxzLge&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Papy Jeico&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:45375},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:10UNa6qLnyJqCidBklPGm0&#34;,&#34;id&#34;:&#34;10UNa6qLnyJqCidBklPGm0&#34;,&#34;name&#34;:&#34;Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:2smT3A7MjmmfKNFwlDnEBd&#34;,&#34;name&#34;:&#34;Pre Heat&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e020520ecfcc5dfbe14ef8cf183&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048510520ecfcc5dfbe14ef8cf183&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2730520ecfcc5dfbe14ef8cf183&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;2smT3A7MjmmfKNFwlDnEBd&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /2smT3A7MjmmfKNFwlDnEBd?si=1r7s73_6T4e8Rw6WN6M4Ug&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:57fgfg6PTbTqtPegX6rXV5&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;HEAVY CHEST&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:167206},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:1cIfODqkOniMnWWl0EcRMc&#34;,&#34;id&#34;:&#34;1cIfODqkOniMnWWl0EcRMc&#34;,&#34;name&#34;:&#34;Disassembly Required (Teaser Original Soundtrack)&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:0BbeoTXqQv0qKki6CDcznI&#34;,&#34;name&#34;:&#34;Disassembly Required (Teaser Original Soundtrack)&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0226cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485126cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27326cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;0BbeoTXqQv0qKki6CDcznI&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /0BbeoTXqQv0qKki6CDcznI?si=IdDBLdNVSnKsKxVbAeOyaw&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:0yXeAQirPMVzAlhxGvux1s&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Liam Vickers&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:120000},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:2R6EjjxkSop7x8adokEnqb&#34;,&#34;id&#34;:&#34;2R6EjjxkSop7x8adokEnqb&#34;,&#34;name&#34;:&#34;REQUIRED MALFUNCTION&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:79B1nOppxSiiA8rfe7EGzg&#34;,&#34;name&#34;:&#34;DIVISION&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e026baeeab4c2084620dca4fc02&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048516baeeab4c2084620dca4fc02&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2736baeeab4c2084620dca4fc02&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;79B1nOppxSiiA8rfe7EGzg&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /79B1nOppxSiiA8rfe7EGzg?si=esvFk_zbQ9-0UTrC6dUbJQ&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4gRFSxjAcJkb54BDjqo7Bc&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;the GazettE&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:247253},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:6ce7mZm67N4CB6llmyRPib&#34;,&#34;id&#34;:&#34;6ce7mZm67N4CB6llmyRPib&#34;,&#34;name&#34;:&#34;Assembly Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:3xEUUVwjNVvTaHQjcpea8O&#34;,&#34;name&#34;:&#34;Assembly Required&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;3xEUUVwjNVvTaHQjcpea8O&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /3xEUUVwjNVvTaHQjcpea8O?si=Yz5u9200SwK5Oe2LkobDvg&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:6ytGxUYeXamODJwiXuZvjO&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Olivia Penalva&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:225684},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:22S28x7QBBJmVSIzz4YCnE&#34;,&#34;id&#34;:&#34;22S28x7QBBJmVSIzz4YCnE&#34;,&#34;name&#34;:&#34;Some Assembly Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:7FuOdULJORMIFwOFb7EXTG&#34;,&#34;name&#34;:&#34;Singles&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02c158d1d8cc70e1b6d3152eb7&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851c158d1d8cc70e1b6d3152eb7&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273c158d1d8cc70e1b6d3152eb7&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;7FuOdULJORMIFwOFb7EXTG&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /7FuOdULJORMIFwOFb7EXTG?si=Jah5Bm2RRly3Yi5qZU53kQ&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:1gUi2utSbJLNPddYENJAp4&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Abhi The Nomad&#34;}},{&#34;uri&#34;:&#34;spotify:artist:20Ec073CbzajOXt5a3rfsI&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Foster&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:157000},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:4eLPlC9E0XWQcJd5WjjKQL&#34;,&#34;id&#34;:&#34;4eLPlC9E0XWQcJd5WjjKQL&#34;,&#34;name&#34;:&#34;Wanna Fly&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:2gEl3qFsgQQtiK8TqMotBt&#34;,&#34;name&#34;:&#34;Wanna Fly&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02358f83f11f3df253118efe7a&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851358f83f11f3df253118efe7a&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273358f83f11f3df253118efe7a&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;2gEl3qFsgQQtiK8TqMotBt&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /2gEl3qFsgQQtiK8TqMotBt?si=0LUFI83XTBG1aM66BiEDlg&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4xSp6WltH5N47OrAu4pjKw&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Revelation&#34;}},{&#34;uri&#34;:&#34;spotify:artist:1g05P4Ua1FzC0cQxSlgmyu&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Required&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:184511},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:7EpuVjHnXlbLOyYOvIUcXx&#34;,&#34;id&#34;:&#34;7EpuVjHnXlbLOyYOvIUcXx&#34;,&#34;name&#34;:&#34;Some Assembly Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:5l1BFWphq5XiWlpbYUjrhr&#34;,&#34;name&#34;:&#34;Portal 2: Songs to Test By (Collectors Edition)&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0294008f6625cab88b318e3c49&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485194008f6625cab88b318e3c49&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27394008f6625cab88b318e3c49&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;5l1BFWphq5XiWlpbYUjrhr&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /5l1BFWphq5XiWlpbYUjrhr?si=C7EKoxYGRQmLVcWhe3u91g&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:7d58WZ8qQHy2Sm5p52V2NP&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Aperture Science Psychoacoustic Laboratories&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:112106},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:5vdTsxP1p3Vshq9TaI9Ffr&#34;,&#34;id&#34;:&#34;5vdTsxP1p3Vshq9TaI9Ffr&#34;,&#34;name&#34;:&#34;Some Assembly Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:6aBCXfFv8Nq5u7pnrwrpmd&#34;,&#34;name&#34;:&#34;The Beginning Of All Things To End&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e026cdfc4722c49b54cf6dd27da&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048516cdfc4722c49b54cf6dd27da&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2736cdfc4722c49b54cf6dd27da&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;6aBCXfFv8Nq5u7pnrwrpmd&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /6aBCXfFv8Nq5u7pnrwrpmd?si=UiwLKWJVQZSWoSyOIRSyrQ&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:2Pfv2w8a20xzC7Dr7QXRqM&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Mudvayne&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:166840},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:0PJt62CEBPvMdLDY1RQ0Oo&#34;,&#34;id&#34;:&#34;0PJt62CEBPvMdLDY1RQ0Oo&#34;,&#34;name&#34;:&#34;No Names Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:4zNKdLbL3B21JpSfVllCPC&#34;,&#34;name&#34;:&#34;Midnight&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02678d47c8733f90365864b5e8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851678d47c8733f90365864b5e8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273678d47c8733f90365864b5e8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;4zNKdLbL3B21JpSfVllCPC&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /4zNKdLbL3B21JpSfVllCPC?si=nG2UwUiqSOKAnls5r2ApYw&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:2LANxYqr0jAMn7BpUV5hOp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Lord of the Dream&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:93351},&#34;playability&#34;:{&#34;playable&#34;:true}}}]},&#34;users&#34;:{&#34;totalCount&#34;:1,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:user:jwbe7sw2exw0sswleoende557&#34;,&#34;id&#34;:&#34;jwbe7sw2exw0sswleoende557&#34;,&#34;displayName&#34;:&#34;no headphones required&#34;,&#34;username&#34;:&#34;jwbe7sw2exw0sswleoende557&#34;,&#34;image&#34;:{&#34;smallImageUrl&#34;:&#34;https: / /i.scdn.co /image /ab67757000003b827365e3e82a12ae1089dd8fde&#34;,&#34;largeImageUrl&#34;:&#34;https: / /i.scdn.co /image /ab6775700000ee857365e3e82a12ae1089dd8fde&#34;}}}]}} .",
            "url": "https://sanikasha.github.io/superFastPages/week%207/2022/10/10/APIspotify.html",
            "relUrl": "/week%207/2022/10/10/APIspotify.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "API Genius Lyrics",
            "content": "import requests url = &quot;https://genius-song-lyrics1.p.rapidapi.com/search&quot; querystring = {&quot;q&quot;:&quot;Alan Walker&quot;,&quot;per_page&quot;:&quot;10&quot;,&quot;page&quot;:&quot;1&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;45de2811f2mshc93a1328afeb302p1ee42bjsnbde76995c6f3&quot;, &quot;X-RapidAPI-Host&quot;: &quot;genius-song-lyrics1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) string = {response.text} . {&#34;meta&#34;:{&#34;status&#34;:200},&#34;response&#34;:{&#34;hits&#34;:[{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:13,&#34;api_path&#34;:&#34;/songs/2396871&#34;,&#34;artist_names&#34;:&#34;Alan Walker&#34;,&#34;full_title&#34;:&#34;Faded by Alan Walker&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.1000x1000x1.jpg&#34;,&#34;id&#34;:2396871,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:93685,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1648231336,&#34;path&#34;:&#34;/Alan-walker-faded-lyrics&#34;,&#34;pyongs_count&#34;:116,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-faded-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2015,&#34;month&#34;:12,&#34;day&#34;:3},&#34;release_date_for_display&#34;:&#34;December 3, 2015&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Dec. 3, 2015&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/708aef5551c9f670205b5cab3f38c8bd.300x300x1.jpg&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/708aef5551c9f670205b5cab3f38c8bd.1000x1000x1.jpg&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:0,&#34;concurrents&#34;:2,&#34;hot&#34;:false,&#34;pageviews&#34;:1429351},&#34;title&#34;:&#34;Faded&#34;,&#34;title_with_featured&#34;:&#34;Faded&#34;,&#34;updated_by_human_at&#34;:1644264066,&#34;url&#34;:&#34;https://genius.com/Alan-walker-faded-lyrics&#34;,&#34;featured_artists&#34;:[],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/456537&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/5dc7f5c57981ba34e464414f7fc08ebf.1000x333x1.jpg&#34;,&#34;id&#34;:456537,&#34;image_url&#34;:&#34;https://images.genius.com/70b44d7b5a4be028e87b865dd425a4cc.1000x1000x1.jpg&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:true,&#34;name&#34;:&#34;Alan Walker&#34;,&#34;slug&#34;:&#34;Alan-walker&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker&#34;,&#34;iq&#34;:3530}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:2,&#34;api_path&#34;:&#34;/songs/3801089&#34;,&#34;artist_names&#34;:&#34;Alan Walker (Ft. Au/Ra &amp; Tomine Harket)&#34;,&#34;full_title&#34;:&#34;Darkside by Alan Walker (Ft. Au/Ra &amp; Tomine Harket)&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.1000x1000x1.jpg&#34;,&#34;id&#34;:3801089,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:6355938,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1644862245,&#34;path&#34;:&#34;/Alan-walker-darkside-lyrics&#34;,&#34;pyongs_count&#34;:47,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-darkside-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2018,&#34;month&#34;:7,&#34;day&#34;:27},&#34;release_date_for_display&#34;:&#34;July 27, 2018&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Jul. 27, 2018&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/bbfa8575eaff89e5e2c93c8a0095fab9.300x300x1.png&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/bbfa8575eaff89e5e2c93c8a0095fab9.1000x1000x1.png&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:1,&#34;hot&#34;:false,&#34;pageviews&#34;:698329},&#34;title&#34;:&#34;Darkside&#34;,&#34;title_with_featured&#34;:&#34;Darkside (Ft. Au/Ra &amp; Tomine Harket)&#34;,&#34;updated_by_human_at&#34;:1644862246,&#34;url&#34;:&#34;https://genius.com/Alan-walker-darkside-lyrics&#34;,&#34;featured_artists&#34;:[{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/142571&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/4cdb3c39b6f693a32805ed616601dc27.1000x667x1.jpg&#34;,&#34;id&#34;:142571,&#34;image_url&#34;:&#34;https://images.genius.com/ff8b82d65a1dcafebbc117ba8265b162.939x939x1.jpg&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:true,&#34;name&#34;:&#34;Au/Ra&#34;,&#34;slug&#34;:&#34;Au-ra&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Au-ra&#34;,&#34;iq&#34;:2063},{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/500222&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/5cb04a3fa934944e15d8cbab927e5d7c.1000x1000x1.jpg&#34;,&#34;id&#34;:500222,&#34;image_url&#34;:&#34;https://images.genius.com/a9f076d8b434fdf9ad08d773868188a7.1000x1000x1.jpg&#34;,&#34;index_character&#34;:&#34;t&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:false,&#34;name&#34;:&#34;Tomine Harket&#34;,&#34;slug&#34;:&#34;Tomine-harket&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Tomine-harket&#34;}],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/456537&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/5dc7f5c57981ba34e464414f7fc08ebf.1000x333x1.jpg&#34;,&#34;id&#34;:456537,&#34;image_url&#34;:&#34;https://images.genius.com/70b44d7b5a4be028e87b865dd425a4cc.1000x1000x1.jpg&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:true,&#34;name&#34;:&#34;Alan Walker&#34;,&#34;slug&#34;:&#34;Alan-walker&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker&#34;,&#34;iq&#34;:3530}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:5,&#34;api_path&#34;:&#34;/songs/3714282&#34;,&#34;artist_names&#34;:&#34;Alan Walker (Ft. Sophia Somajo)&#34;,&#34;full_title&#34;:&#34;Diamond Heart by Alan Walker (Ft. Sophia Somajo)&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.1000x1000x1.jpg&#34;,&#34;id&#34;:3714282,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:6355938,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1664101366,&#34;path&#34;:&#34;/Alan-walker-diamond-heart-lyrics&#34;,&#34;pyongs_count&#34;:36,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-diamond-heart-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2018,&#34;month&#34;:9,&#34;day&#34;:28},&#34;release_date_for_display&#34;:&#34;September 28, 2018&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Sep. 28, 2018&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/c0d2b31b18186ca1898e0622f44a3b0d.300x300x1.jpg&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/c0d2b31b18186ca1898e0622f44a3b0d.1000x1000x1.jpg&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:4,&#34;hot&#34;:false,&#34;pageviews&#34;:546153},&#34;title&#34;:&#34;Diamond Heart&#34;,&#34;title_with_featured&#34;:&#34;Diamond Heart (Ft. Sophia Somajo)&#34;,&#34;updated_by_human_at&#34;:1664101366,&#34;url&#34;:&#34;https://genius.com/Alan-walker-diamond-heart-lyrics&#34;,&#34;featured_artists&#34;:[{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/404796&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/d1ed6c19253d29e9e6560b9bdee0f176.960x539x1.jpg&#34;,&#34;id&#34;:404796,&#34;image_url&#34;:&#34;https://images.genius.com/f971256aaddf684c7a2585e00fc8db14.700x700x1.jpg&#34;,&#34;index_character&#34;:&#34;s&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:false,&#34;name&#34;:&#34;Sophia Somajo&#34;,&#34;slug&#34;:&#34;Sophia-somajo&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Sophia-somajo&#34;}],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/456537&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/5dc7f5c57981ba34e464414f7fc08ebf.1000x333x1.jpg&#34;,&#34;id&#34;:456537,&#34;image_url&#34;:&#34;https://images.genius.com/70b44d7b5a4be028e87b865dd425a4cc.1000x1000x1.jpg&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:true,&#34;name&#34;:&#34;Alan Walker&#34;,&#34;slug&#34;:&#34;Alan-walker&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker&#34;,&#34;iq&#34;:3530}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:1,&#34;api_path&#34;:&#34;/songs/5123075&#34;,&#34;artist_names&#34;:&#34;Alan Walker &amp; Ava Max&#34;,&#34;full_title&#34;:&#34;Alone, Pt. II by Alan Walker &amp; Ava Max&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/0b14a916f0d132ea696b587ecd5c8dea.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/0b14a916f0d132ea696b587ecd5c8dea.1000x1000x1.jpg&#34;,&#34;id&#34;:5123075,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:8059868,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1652728556,&#34;path&#34;:&#34;/Alan-walker-and-ava-max-alone-pt-ii-lyrics&#34;,&#34;pyongs_count&#34;:33,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-and-ava-max-alone-pt-ii-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2019,&#34;month&#34;:12,&#34;day&#34;:27},&#34;release_date_for_display&#34;:&#34;December 27, 2019&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Dec. 27, 2019&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/9fa97a64e5bebfbf9d692b7b82bbed90.300x300x1.png&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/9fa97a64e5bebfbf9d692b7b82bbed90.1000x1000x1.png&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:0,&#34;hot&#34;:false,&#34;pageviews&#34;:342624},&#34;title&#34;:&#34;Alone, Pt. II&#34;,&#34;title_with_featured&#34;:&#34;Alone, Pt. II&#34;,&#34;updated_by_human_at&#34;:1652720366,&#34;url&#34;:&#34;https://genius.com/Alan-walker-and-ava-max-alone-pt-ii-lyrics&#34;,&#34;featured_artists&#34;:[],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/2055165&#34;,&#34;header_image_url&#34;:&#34;https://assets.genius.com/images/default_avatar_300.png?1665072509&#34;,&#34;id&#34;:2055165,&#34;image_url&#34;:&#34;https://assets.genius.com/images/default_avatar_300.png?1665072509&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:false,&#34;name&#34;:&#34;Alan Walker &amp; Ava Max&#34;,&#34;slug&#34;:&#34;Alan-walker-and-ava-max&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker-and-ava-max&#34;}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:1,&#34;api_path&#34;:&#34;/songs/3234393&#34;,&#34;artist_names&#34;:&#34;Alan Walker, Digital Farm Animals, Noah Cyrus &amp; Juliander&#34;,&#34;full_title&#34;:&#34;All Falls Down by Alan Walker, Digital Farm Animals, Noah Cyrus &amp; Juliander&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.1000x1000x1.jpg&#34;,&#34;id&#34;:3234393,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:93685,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1601012369,&#34;path&#34;:&#34;/Alan-walker-digital-farm-animals-noah-cyrus-and-juliander-all-falls-down-lyrics&#34;,&#34;pyongs_count&#34;:39,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-digital-farm-animals-noah-cyrus-and-juliander-all-falls-down-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2017,&#34;month&#34;:10,&#34;day&#34;:27},&#34;release_date_for_display&#34;:&#34;October 27, 2017&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Oct. 27, 2017&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/dc1c965917b3b1cb820008cfc217ae9e.300x300x1.jpg&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/dc1c965917b3b1cb820008cfc217ae9e.1000x1000x1.jpg&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:0,&#34;hot&#34;:false,&#34;pageviews&#34;:326969},&#34;title&#34;:&#34;All Falls Down&#34;,&#34;title_with_featured&#34;:&#34;All Falls Down&#34;,&#34;updated_by_human_at&#34;:1609878489,&#34;url&#34;:&#34;https://genius.com/Alan-walker-digital-farm-animals-noah-cyrus-and-juliander-all-falls-down-lyrics&#34;,&#34;featured_artists&#34;:[],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/2408754&#34;,&#34;header_image_url&#34;:&#34;https://assets.genius.com/images/default_avatar_300.png?1665072509&#34;,&#34;id&#34;:2408754,&#34;image_url&#34;:&#34;https://assets.genius.com/images/default_avatar_300.png?1665072509&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:false,&#34;name&#34;:&#34;Alan Walker, Digital Farm Animals, Noah Cyrus &amp; Juliander&#34;,&#34;slug&#34;:&#34;Alan-walker-digital-farm-animals-noah-cyrus-and-juliander&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker-digital-farm-animals-noah-cyrus-and-juliander&#34;}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:3,&#34;api_path&#34;:&#34;/songs/4395068&#34;,&#34;artist_names&#34;:&#34;Alan Walker, Sabrina Carpenter &amp; Farruko&#34;,&#34;full_title&#34;:&#34;On My Way by Alan Walker, Sabrina Carpenter &amp; Farruko&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/0b14a916f0d132ea696b587ecd5c8dea.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/0b14a916f0d132ea696b587ecd5c8dea.1000x1000x1.jpg&#34;,&#34;id&#34;:4395068,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:5667167,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1611267605,&#34;path&#34;:&#34;/Alan-walker-sabrina-carpenter-and-farruko-on-my-way-lyrics&#34;,&#34;pyongs_count&#34;:60,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-sabrina-carpenter-and-farruko-on-my-way-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2019,&#34;month&#34;:3,&#34;day&#34;:21},&#34;release_date_for_display&#34;:&#34;March 21, 2019&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Mar. 21, 2019&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/ad957509e73769340113146e3d74f4f7.300x300x1.png&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/ad957509e73769340113146e3d74f4f7.1000x1000x1.png&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:0,&#34;hot&#34;:false,&#34;pageviews&#34;:301679},&#34;title&#34;:&#34;On My Way&#34;,&#34;title_with_featured&#34;:&#34;On My Way&#34;,&#34;updated_by_human_at&#34;:1646242626,&#34;url&#34;:&#34;https://genius.com/Alan-walker-sabrina-carpenter-and-farruko-on-my-way-lyrics&#34;,&#34;featured_artists&#34;:[],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/1767908&#34;,&#34;header_image_url&#34;:&#34;https://assets.genius.com/images/default_avatar_300.png?1665072509&#34;,&#34;id&#34;:1767908,&#34;image_url&#34;:&#34;https://assets.genius.com/images/default_avatar_300.png?1665072509&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:false,&#34;name&#34;:&#34;Alan Walker, Sabrina Carpenter &amp; Farruko&#34;,&#34;slug&#34;:&#34;Alan-walker-sabrina-carpenter-and-farruko&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker-sabrina-carpenter-and-farruko&#34;}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:1,&#34;api_path&#34;:&#34;/songs/2917386&#34;,&#34;artist_names&#34;:&#34;Alan Walker&#34;,&#34;full_title&#34;:&#34;Alone by Alan Walker&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.1000x1000x1.jpg&#34;,&#34;id&#34;:2917386,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:3768782,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1664011912,&#34;path&#34;:&#34;/Alan-walker-alone-lyrics&#34;,&#34;pyongs_count&#34;:40,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-alone-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2016,&#34;month&#34;:12,&#34;day&#34;:2},&#34;release_date_for_display&#34;:&#34;December 2, 2016&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Dec. 2, 2016&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/7055783b516c9db919098cd119ab714e.300x300x1.jpg&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/7055783b516c9db919098cd119ab714e.1000x1000x1.jpg&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:0,&#34;hot&#34;:false,&#34;pageviews&#34;:247432},&#34;title&#34;:&#34;Alone&#34;,&#34;title_with_featured&#34;:&#34;Alone&#34;,&#34;updated_by_human_at&#34;:1664011912,&#34;url&#34;:&#34;https://genius.com/Alan-walker-alone-lyrics&#34;,&#34;featured_artists&#34;:[],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/456537&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/5dc7f5c57981ba34e464414f7fc08ebf.1000x333x1.jpg&#34;,&#34;id&#34;:456537,&#34;image_url&#34;:&#34;https://images.genius.com/70b44d7b5a4be028e87b865dd425a4cc.1000x1000x1.jpg&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:true,&#34;name&#34;:&#34;Alan Walker&#34;,&#34;slug&#34;:&#34;Alan-walker&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker&#34;,&#34;iq&#34;:3530}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:1,&#34;api_path&#34;:&#34;/songs/3089240&#34;,&#34;artist_names&#34;:&#34;Alan Walker (Ft. Gavin James)&#34;,&#34;full_title&#34;:&#34;Tired by Alan Walker (Ft. Gavin James)&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/4dcbbcb94dcf4af84c1071e35973255a.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/4dcbbcb94dcf4af84c1071e35973255a.640x640x1.jpg&#34;,&#34;id&#34;:3089240,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:126836,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1657300524,&#34;path&#34;:&#34;/Alan-walker-tired-lyrics&#34;,&#34;pyongs_count&#34;:25,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-tired-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2017,&#34;month&#34;:5,&#34;day&#34;:19},&#34;release_date_for_display&#34;:&#34;May 19, 2017&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;May. 19, 2017&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/4dcbbcb94dcf4af84c1071e35973255a.300x300x1.jpg&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/4dcbbcb94dcf4af84c1071e35973255a.640x640x1.jpg&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:0,&#34;hot&#34;:false,&#34;pageviews&#34;:178316},&#34;title&#34;:&#34;Tired&#34;,&#34;title_with_featured&#34;:&#34;Tired (Ft. Gavin James)&#34;,&#34;updated_by_human_at&#34;:1657293239,&#34;url&#34;:&#34;https://genius.com/Alan-walker-tired-lyrics&#34;,&#34;featured_artists&#34;:[{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/452119&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/9c79847d754ca506adc64bd1e7f40c50.615x615x1.jpg&#34;,&#34;id&#34;:452119,&#34;image_url&#34;:&#34;https://images.genius.com/9c79847d754ca506adc64bd1e7f40c50.615x615x1.jpg&#34;,&#34;index_character&#34;:&#34;g&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:true,&#34;name&#34;:&#34;Gavin James&#34;,&#34;slug&#34;:&#34;Gavin-james&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Gavin-james&#34;,&#34;iq&#34;:924}],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/456537&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/5dc7f5c57981ba34e464414f7fc08ebf.1000x333x1.jpg&#34;,&#34;id&#34;:456537,&#34;image_url&#34;:&#34;https://images.genius.com/70b44d7b5a4be028e87b865dd425a4cc.1000x1000x1.jpg&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:true,&#34;name&#34;:&#34;Alan Walker&#34;,&#34;slug&#34;:&#34;Alan-walker&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker&#34;,&#34;iq&#34;:3530}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:3,&#34;api_path&#34;:&#34;/songs/7432868&#34;,&#34;artist_names&#34;:&#34;​salem ilese, TOMORROW X TOGETHER &amp; Alan Walker&#34;,&#34;full_title&#34;:&#34;PS5 by ​salem ilese, TOMORROW X TOGETHER &amp; Alan Walker&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/791f4e51e8a23d5c0c91d25c2f4cdd26.300x300x1.png&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/791f4e51e8a23d5c0c91d25c2f4cdd26.1000x1000x1.png&#34;,&#34;id&#34;:7432868,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:7748793,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1663082433,&#34;path&#34;:&#34;/Salem-ilese-tomorrow-x-together-and-alan-walker-ps5-lyrics&#34;,&#34;pyongs_count&#34;:12,&#34;relationships_index_url&#34;:&#34;https://genius.com/Salem-ilese-tomorrow-x-together-and-alan-walker-ps5-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2022,&#34;month&#34;:2,&#34;day&#34;:23},&#34;release_date_for_display&#34;:&#34;February 23, 2022&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Feb. 23, 2022&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/791f4e51e8a23d5c0c91d25c2f4cdd26.300x300x1.png&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/791f4e51e8a23d5c0c91d25c2f4cdd26.1000x1000x1.png&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:1,&#34;hot&#34;:false,&#34;pageviews&#34;:180018},&#34;title&#34;:&#34;PS5&#34;,&#34;title_with_featured&#34;:&#34;PS5&#34;,&#34;updated_by_human_at&#34;:1663071333,&#34;url&#34;:&#34;https://genius.com/Salem-ilese-tomorrow-x-together-and-alan-walker-ps5-lyrics&#34;,&#34;featured_artists&#34;:[],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/3071759&#34;,&#34;header_image_url&#34;:&#34;https://assets.genius.com/images/default_avatar_300.png?1665072509&#34;,&#34;id&#34;:3071759,&#34;image_url&#34;:&#34;https://assets.genius.com/images/default_avatar_300.png?1665072509&#34;,&#34;index_character&#34;:&#34;s&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:false,&#34;name&#34;:&#34;​salem ilese, TOMORROW X TOGETHER &amp; Alan Walker&#34;,&#34;slug&#34;:&#34;Salem-ilese-tomorrow-x-together-and-alan-walker&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Salem-ilese-tomorrow-x-together-and-alan-walker&#34;}}},{&#34;highlights&#34;:[],&#34;index&#34;:&#34;song&#34;,&#34;type&#34;:&#34;song&#34;,&#34;result&#34;:{&#34;_type&#34;:&#34;song&#34;,&#34;annotation_count&#34;:6,&#34;api_path&#34;:&#34;/songs/2486419&#34;,&#34;artist_names&#34;:&#34;Alan Walker&#34;,&#34;full_title&#34;:&#34;Sing Me to Sleep by Alan Walker&#34;,&#34;header_image_thumbnail_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.300x300x1.jpg&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/10db94c5c11e1bb1ac9cc917a6c59250.1000x1000x1.jpg&#34;,&#34;id&#34;:2486419,&#34;instrumental&#34;:false,&#34;language&#34;:&#34;en&#34;,&#34;lyrics_owner_id&#34;:104344,&#34;lyrics_state&#34;:&#34;complete&#34;,&#34;lyrics_updated_at&#34;:1628044059,&#34;path&#34;:&#34;/Alan-walker-sing-me-to-sleep-lyrics&#34;,&#34;pyongs_count&#34;:28,&#34;relationships_index_url&#34;:&#34;https://genius.com/Alan-walker-sing-me-to-sleep-sample&#34;,&#34;release_date_components&#34;:{&#34;year&#34;:2016,&#34;month&#34;:6,&#34;day&#34;:2},&#34;release_date_for_display&#34;:&#34;June 2, 2016&#34;,&#34;release_date_with_abbreviated_month_for_display&#34;:&#34;Jun. 2, 2016&#34;,&#34;song_art_image_thumbnail_url&#34;:&#34;https://images.genius.com/82006c454b4bb897f02c1a66e2d3f2df.300x300x1.jpg&#34;,&#34;song_art_image_url&#34;:&#34;https://images.genius.com/82006c454b4bb897f02c1a66e2d3f2df.300x300x1.jpg&#34;,&#34;stats&#34;:{&#34;unreviewed_annotations&#34;:4,&#34;hot&#34;:false,&#34;pageviews&#34;:158635},&#34;title&#34;:&#34;Sing Me to Sleep&#34;,&#34;title_with_featured&#34;:&#34;Sing Me to Sleep&#34;,&#34;updated_by_human_at&#34;:1628044059,&#34;url&#34;:&#34;https://genius.com/Alan-walker-sing-me-to-sleep-lyrics&#34;,&#34;featured_artists&#34;:[],&#34;primary_artist&#34;:{&#34;_type&#34;:&#34;artist&#34;,&#34;api_path&#34;:&#34;/artists/456537&#34;,&#34;header_image_url&#34;:&#34;https://images.genius.com/5dc7f5c57981ba34e464414f7fc08ebf.1000x333x1.jpg&#34;,&#34;id&#34;:456537,&#34;image_url&#34;:&#34;https://images.genius.com/70b44d7b5a4be028e87b865dd425a4cc.1000x1000x1.jpg&#34;,&#34;index_character&#34;:&#34;a&#34;,&#34;is_meme_verified&#34;:false,&#34;is_verified&#34;:true,&#34;name&#34;:&#34;Alan Walker&#34;,&#34;slug&#34;:&#34;Alan-walker&#34;,&#34;url&#34;:&#34;https://genius.com/artists/Alan-walker&#34;,&#34;iq&#34;:3530}}}]}} .",
            "url": "https://sanikasha.github.io/superFastPages/week%207/2022/10/07/APIGroup.html",
            "relUrl": "/week%207/2022/10/07/APIGroup.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;Chile&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name Chile cases 3,544,463 deaths 57,375 region total_recovered 3,368,772 new_deaths 0 new_cases 0 serious_critical 286 active_cases 118,316 total_cases_per_1m_population 182,588 deaths_per_1m_population 2,956 total_tests 36,711,724 tests_per_1m_population 1,891,147 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;45de2811f2mshc93a1328afeb302p1ee42bjsnbde76995c6f3&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1502,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29505,&#34;totalExchanges&#34;:172,&#34;totalMarketCap&#34;:&#34;983817743632&#34;,&#34;total24hVolume&#34;:&#34;63318342735&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384318311102&#34;,&#34;price&#34;:&#34;20046.583845211964&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.88&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20218.790755276827&#34;,&#34;20127.51385253795&#34;,&#34;20050.210772224906&#34;,&#34;20104.086969351873&#34;,&#34;20157.612080991814&#34;,&#34;20244.902254214187&#34;,&#34;20296.13179911493&#34;,&#34;20355.40420179014&#34;,&#34;20339.584455003165&#34;,&#34;20380.9608314705&#34;,&#34;20334.43838223393&#34;,&#34;20256.397755502137&#34;,&#34;20213.541433157436&#34;,&#34;20197.409714271824&#34;,&#34;20157.854380513738&#34;,&#34;20138.83563685875&#34;,&#34;20144.72679870046&#34;,&#34;20209.85445296406&#34;,&#34;20213.129981516948&#34;,&#34;20126.330299910573&#34;,&#34;20008.692799610475&#34;,&#34;20067.06630630579&#34;,&#34;20051.763166007153&#34;,&#34;20095.90651849141&#34;,&#34;20077.847000648446&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;54323357393&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166205046465&#34;,&#34;price&#34;:&#34;1358.8203036993507&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.36&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1356.0326277033864&#34;,&#34;1350.7784529712667&#34;,&#34;1349.0952855712028&#34;,&#34;1351.020589256574&#34;,&#34;1352.8575645347053&#34;,&#34;1363.1472565613235&#34;,&#34;1374.6067561390107&#34;,&#34;1375.494244817268&#34;,&#34;1372.953523219661&#34;,&#34;1375.925446184292&#34;,&#34;1374.4292408387619&#34;,&#34;1368.4552635284397&#34;,&#34;1365.9761444655962&#34;,&#34;1364.1511199020563&#34;,&#34;1360.2387340898908&#34;,&#34;1358.6184047649765&#34;,&#34;1359.371491753535&#34;,&#34;1367.4847503615897&#34;,&#34;1369.9959841899833&#34;,&#34;1365.6970543302764&#34;,&#34;1361.7827799311112&#34;,&#34;1364.9037258052106&#34;,&#34;1362.847000833661&#34;,&#34;1364.3331808179248&#34;,&#34;1362.1203211552202&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;19710554963&#34;,&#34;btcPrice&#34;:&#34;0.06778313523098842&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68265264916&#34;,&#34;price&#34;:&#34;1.0007724451188478&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.15&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0003204255445886&#34;,&#34;1.001072379399179&#34;,&#34;1.0005865365358848&#34;,&#34;0.9997222677525898&#34;,&#34;1.000302739310476&#34;,&#34;0.9991136110008606&#34;,&#34;0.9999088281238293&#34;,&#34;1.0001228624687193&#34;,&#34;1.0002330626742733&#34;,&#34;0.9999085006515177&#34;,&#34;1.000637166558432&#34;,&#34;1.0010864048424142&#34;,&#34;1.0004431233324322&#34;,&#34;1.0007615615436023&#34;,&#34;1.0003388222639724&#34;,&#34;1.000614662065736&#34;,&#34;1.0001840231067416&#34;,&#34;0.9995194000310701&#34;,&#34;1.0007881476607334&#34;,&#34;1.001450558525984&#34;,&#34;1.0001623631259906&#34;,&#34;1.00016739393608&#34;,&#34;1.0000662445755446&#34;,&#34;0.9998026781628899&#34;,&#34;1.0007565027795222&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;41152018316&#34;,&#34;btcPrice&#34;:&#34;0.000049922343519785&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46240403105&#34;,&#34;price&#34;:&#34;1.0010183883810226&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.17&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0000952324290522&#34;,&#34;1.0009272060557761&#34;,&#34;1.0004792903280844&#34;,&#34;0.9997900335112507&#34;,&#34;1.0002409949691449&#34;,&#34;0.9991618677934375&#34;,&#34;0.9998534185910576&#34;,&#34;0.9999410847854596&#34;,&#34;1.0002265014975766&#34;,&#34;0.9999486744759792&#34;,&#34;1.0006735177764154&#34;,&#34;1.0009635471641476&#34;,&#34;1.0003793496402105&#34;,&#34;1.0006075162547052&#34;,&#34;1.0003150084025718&#34;,&#34;1.0005962670735402&#34;,&#34;1.000183064789904&#34;,&#34;0.9995159217489921&#34;,&#34;1.0007054694724418&#34;,&#34;1.0013678601445475&#34;,&#34;1.0002887936832605&#34;,&#34;1.0000682306361377&#34;,&#34;1.0002103812911312&#34;,&#34;0.9998509676658609&#34;,&#34;1.0006509341919907&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3336397549&#34;,&#34;btcPrice&#34;:&#34;0.000049934612106996&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;42492337204&#34;,&#34;price&#34;:&#34;293.30188392001014&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.16&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;294.0371081156913&#34;,&#34;293.2112530986315&#34;,&#34;293.0659068658593&#34;,&#34;293.14125809992265&#34;,&#34;293.927072308215&#34;,&#34;294.83908930457306&#34;,&#34;297.17141223267646&#34;,&#34;296.54802038189746&#34;,&#34;296.5585630450058&#34;,&#34;296.294553936533&#34;,&#34;295.9679395053358&#34;,&#34;295.35520526954036&#34;,&#34;294.7305627322402&#34;,&#34;295.26036234435696&#34;,&#34;294.50338543103425&#34;,&#34;294.3146859082695&#34;,&#34;294.2242933902924&#34;,&#34;294.68917140200585&#34;,&#34;294.5604388244027&#34;,&#34;294.00907997017464&#34;,&#34;293.6022776572697&#34;,&#34;294.03667340284875&#34;,&#34;293.6765697846322&#34;,&#34;293.53999170702116&#34;,&#34;293.2406982951704&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;727094328&#34;,&#34;btcPrice&#34;:&#34;0.014631015747357071&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24735896573&#34;,&#34;price&#34;:&#34;0.49612120329910436&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.45&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.49589772060313664&#34;,&#34;0.4961486906400564&#34;,&#34;0.4937540033530011&#34;,&#34;0.4935243660903145&#34;,&#34;0.49094545203960516&#34;,&#34;0.4918624009473887&#34;,&#34;0.4957389899343572&#34;,&#34;0.49519738378148237&#34;,&#34;0.4958525362412369&#34;,&#34;0.5001275119658124&#34;,&#34;0.5026720193539957&#34;,&#34;0.4991920707876871&#34;,&#34;0.49522495287007584&#34;,&#34;0.4941919849308346&#34;,&#34;0.4937444053409089&#34;,&#34;0.49446095598775164&#34;,&#34;0.496642463441308&#34;,&#34;0.4978006721039619&#34;,&#34;0.49921650767419506&#34;,&#34;0.49601634880586165&#34;,&#34;0.4951610447765719&#34;,&#34;0.496178608849929&#34;,&#34;0.49613233058332035&#34;,&#34;0.49725894146588856&#34;,&#34;0.4969405448624372&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;3686435620&#34;,&#34;btcPrice&#34;:&#34;0.000024748416345142&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21392579713&#34;,&#34;price&#34;:&#34;1.0005116038816269&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.12&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0002374035811614&#34;,&#34;1.0009231467297586&#34;,&#34;1.0005254447624727&#34;,&#34;0.9997390821935204&#34;,&#34;1.0002531268638544&#34;,&#34;0.99900371650551&#34;,&#34;0.9998191100048063&#34;,&#34;0.9999887701995116&#34;,&#34;1.0001269869516713&#34;,&#34;0.9997967773830551&#34;,&#34;1.0005975052435443&#34;,&#34;1.0010354550388738&#34;,&#34;1.0003422928404686&#34;,&#34;1.0006512077264678&#34;,&#34;1.0002496569957884&#34;,&#34;1.000522506477387&#34;,&#34;1.0000921083554326&#34;,&#34;0.9994565714751489&#34;,&#34;1.000664394698665&#34;,&#34;1.0013436729310667&#34;,&#34;1.000188611569681&#34;,&#34;1.0001484188855425&#34;,&#34;0.999994252391756&#34;,&#34;0.9996200374804973&#34;,&#34;1.0006890393113752&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6318180538&#34;,&#34;btcPrice&#34;:&#34;0.000049909331764803&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13346915206&#34;,&#34;price&#34;:&#34;0.42898904780299635&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.29&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.43196332621553907&#34;,&#34;0.4303903814757409&#34;,&#34;0.4294077817341544&#34;,&#34;0.43010743439413285&#34;,&#34;0.4311330265281362&#34;,&#34;0.43172655110842456&#34;,&#34;0.43548735625164897&#34;,&#34;0.4357388064320796&#34;,&#34;0.4347251184847503&#34;,&#34;0.43502688530763967&#34;,&#34;0.4347130159622236&#34;,&#34;0.433471895077104&#34;,&#34;0.4325792144011695&#34;,&#34;0.4321579186673506&#34;,&#34;0.4312862401664264&#34;,&#34;0.43111658597117936&#34;,&#34;0.4302339335978089&#34;,&#34;0.4317434701799593&#34;,&#34;0.43206059667502594&#34;,&#34;0.4307267144731139&#34;,&#34;0.4292816425386448&#34;,&#34;0.42999742569126925&#34;,&#34;0.4296811584257473&#34;,&#34;0.4300197823883678&#34;,&#34;0.42948820128284876&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;748690713&#34;,&#34;btcPrice&#34;:&#34;0.000021399608587448&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11975247263&#34;,&#34;price&#34;:&#34;33.712032667285605&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.76&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;34.147881403359996&#34;,&#34;33.84415516450556&#34;,&#34;33.76424676052897&#34;,&#34;33.851653978639725&#34;,&#34;34.0161400563986&#34;,&#34;34.24080407969258&#34;,&#34;34.31681894129343&#34;,&#34;34.35588900553808&#34;,&#34;34.33042777400873&#34;,&#34;34.38277635446187&#34;,&#34;34.379681489180044&#34;,&#34;34.23752810964467&#34;,&#34;34.00620972119799&#34;,&#34;34.03688155243466&#34;,&#34;34.02092461524907&#34;,&#34;33.989046163945&#34;,&#34;33.96632938263619&#34;,&#34;34.09203292248955&#34;,&#34;34.096015183734444&#34;,&#34;33.92754199776204&#34;,&#34;33.902628493017076&#34;,&#34;33.91352789473223&#34;,&#34;33.87605951997402&#34;,&#34;33.796587286578394&#34;,&#34;33.720584195864205&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;1413402950&#34;,&#34;btcPrice&#34;:&#34;0.001681684666454408&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8472575859&#34;,&#34;price&#34;:&#34;0.0638616646530509&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.18&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06512794974898865&#34;,&#34;0.06492853490382612&#34;,&#34;0.06431595805843943&#34;,&#34;0.06435400841112346&#34;,&#34;0.0645379870268131&#34;,&#34;0.0650123288913721&#34;,&#34;0.06501563524570002&#34;,&#34;0.06505378638919912&#34;,&#34;0.0657960580235114&#34;,&#34;0.06603851629936867&#34;,&#34;0.0658184759881278&#34;,&#34;0.06555988714644552&#34;,&#34;0.06533964737697033&#34;,&#34;0.06514516595507432&#34;,&#34;0.06524645778146733&#34;,&#34;0.06510502596464673&#34;,&#34;0.06505472735660629&#34;,&#34;0.06531541912756778&#34;,&#34;0.065324533726232&#34;,&#34;0.06494902475797701&#34;,&#34;0.064395228238987&#34;,&#34;0.06439997547269011&#34;,&#34;0.06400574562646442&#34;,&#34;0.06396647624972104&#34;,&#34;0.06389241926664797&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;416809135&#34;,&#34;btcPrice&#34;:&#34;0.000003185663210558&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7368472560&#34;,&#34;price&#34;:&#34;0.8415656771217019&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.84&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8491395902598512&#34;,&#34;0.8449629381087024&#34;,&#34;0.8434958048685458&#34;,&#34;0.850001213528094&#34;,&#34;0.853335038035505&#34;,&#34;0.8542282047138157&#34;,&#34;0.8515372370926926&#34;,&#34;0.8500057857531073&#34;,&#34;0.8471550687491181&#34;,&#34;0.8479199485431772&#34;,&#34;0.8469126231548905&#34;,&#34;0.8444467185672693&#34;,&#34;0.8450110528754514&#34;,&#34;0.8478056714088978&#34;,&#34;0.8464500595587834&#34;,&#34;0.8438919072119496&#34;,&#34;0.8409254158392585&#34;,&#34;0.8417285480356804&#34;,&#34;0.8406644189646862&#34;,&#34;0.8395706517084087&#34;,&#34;0.8416948139859297&#34;,&#34;0.8436027596584215&#34;,&#34;0.8437616471321229&#34;,&#34;0.8450251415679219&#34;,&#34;0.8425213019893486&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;368755612&#34;,&#34;btcPrice&#34;:&#34;0.000041980503192952&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7338498389&#34;,&#34;price&#34;:&#34;6.379095272664653&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.01&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.392841133300501&#34;,&#34;6.404046340600803&#34;,&#34;6.399722350341929&#34;,&#34;6.407431469281856&#34;,&#34;6.427796901211662&#34;,&#34;6.453758384149317&#34;,&#34;6.486494555997307&#34;,&#34;6.502517900580541&#34;,&#34;6.4967988980633296&#34;,&#34;6.498221992937296&#34;,&#34;6.477292881924281&#34;,&#34;6.477685872716661&#34;,&#34;6.447106699092705&#34;,&#34;6.444481366056926&#34;,&#34;6.445795929939406&#34;,&#34;6.43835202318247&#34;,&#34;6.432886306326887&#34;,&#34;6.4585750397515&#34;,&#34;6.4575042220625996&#34;,&#34;6.428584116127258&#34;,&#34;6.392783665842638&#34;,&#34;6.391999796479689&#34;,&#34;6.383833341177868&#34;,&#34;6.391886622069542&#34;,&#34;6.382935196378932&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;239758701&#34;,&#34;btcPrice&#34;:&#34;0.000318213583018449&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6657554490&#34;,&#34;price&#34;:&#34;0.00001129248587654&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.11&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011430739202123&#34;,&#34;0.000011392816174463&#34;,&#34;0.000011387877948418&#34;,&#34;0.000011396704562993&#34;,&#34;0.000011430609861&#34;,&#34;0.000011487055432932&#34;,&#34;0.00001152036610693&#34;,&#34;0.000011526380751596&#34;,&#34;0.000011558700842959&#34;,&#34;0.000011588746012207&#34;,&#34;0.000011501542165893&#34;,&#34;0.000011474456994294&#34;,&#34;0.000011432246795571&#34;,&#34;0.000011441277378302&#34;,&#34;0.000011454818205796&#34;,&#34;0.000011474266131642&#34;,&#34;0.00001147214753892&#34;,&#34;0.000011470794345928&#34;,&#34;0.000011440980426603&#34;,&#34;0.000011377989441906&#34;,&#34;0.000011351810964821&#34;,&#34;0.000011340064292117&#34;,&#34;0.000011289212736263&#34;,&#34;0.000011276875729243&#34;,&#34;0.000011287629108946&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;269454517&#34;,&#34;btcPrice&#34;:&#34;5.63312231e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6333767549&#34;,&#34;price&#34;:&#34;1.000588465014447&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.13&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;0.9998145439524316&#34;,&#34;1.000642279152023&#34;,&#34;1.0002501483819342&#34;,&#34;0.9996079953426593&#34;,&#34;0.9998324870129061&#34;,&#34;0.9990101105933146&#34;,&#34;0.9994857500759958&#34;,&#34;0.999624908391188&#34;,&#34;0.9998816954065115&#34;,&#34;0.9994957093637207&#34;,&#34;1.0001208517367788&#34;,&#34;1.0005216349460553&#34;,&#34;1.0001350227691488&#34;,&#34;1.0001759939377812&#34;,&#34;1.0001566588096102&#34;,&#34;1.0001680592088615&#34;,&#34;0.9998685940934117&#34;,&#34;0.9992399716835088&#34;,&#34;1.0001284294864254&#34;,&#34;1.0007521705052862&#34;,&#34;1.0004089988343272&#34;,&#34;0.9997234623566964&#34;,&#34;1.0000149764927293&#34;,&#34;0.9996615337084641&#34;,&#34;1.0002277549462553&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;105252493&#34;,&#34;btcPrice&#34;:&#34;0.000049913165891027&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5776954138&#34;,&#34;price&#34;:&#34;0.06256427894867475&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.21&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06250325237506649&#34;,&#34;0.06233314358322569&#34;,&#34;0.06236315630333049&#34;,&#34;0.06246392912773974&#34;,&#34;0.06240652113985693&#34;,&#34;0.06227589703736964&#34;,&#34;0.06221053328122907&#34;,&#34;0.06260319363131635&#34;,&#34;0.06283033390340566&#34;,&#34;0.06275581270672362&#34;,&#34;0.0626978662815527&#34;,&#34;0.06256692378726383&#34;,&#34;0.06245450631309343&#34;,&#34;0.06246716658573998&#34;,&#34;0.06254250847566674&#34;,&#34;0.06267562907314361&#34;,&#34;0.06269806673235553&#34;,&#34;0.06269042836471053&#34;,&#34;0.06271779939264273&#34;,&#34;0.0626352143047651&#34;,&#34;0.06255809006884133&#34;,&#34;0.06259756053775786&#34;,&#34;0.0626288235451432&#34;,&#34;0.06266136827454773&#34;,&#34;0.06260767940111292&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;495315097&#34;,&#34;btcPrice&#34;:&#34;0.000003120944667269&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5516673972&#34;,&#34;price&#34;:&#34;1359.7372924111291&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.61&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1356.323363837661&#34;,&#34;1352.9612185068595&#34;,&#34;1349.149143129576&#34;,&#34;1351.1432170463336&#34;,&#34;1354.6776632978115&#34;,&#34;1359.8352913708866&#34;,&#34;1372.7157537367023&#34;,&#34;1375.4201893881768&#34;,&#34;1373.656092011277&#34;,&#34;1374.4831471744365&#34;,&#34;1374.1769793087985&#34;,&#34;1370.915906218165&#34;,&#34;1366.9918430438015&#34;,&#34;1365.2433081113772&#34;,&#34;1361.7193072320867&#34;,&#34;1361.265176416104&#34;,&#34;1360.1196886880427&#34;,&#34;1366.1267940382033&#34;,&#34;1371.852174671929&#34;,&#34;1367.6753656170195&#34;,&#34;1362.1323660641553&#34;,&#34;1367.2441915406994&#34;,&#34;1362.4560591679638&#34;,&#34;1363.6579586538305&#34;,&#34;1361.8529815506354&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;311491126&#34;,&#34;btcPrice&#34;:&#34;0.06782887812258825&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5351613164&#34;,&#34;price&#34;:&#34;6.891546741433287&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.34&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.7702311836496065&#34;,&#34;6.761140276375334&#34;,&#34;6.773487842115684&#34;,&#34;6.754212108157756&#34;,&#34;6.7904912939092545&#34;,&#34;6.859091490236875&#34;,&#34;6.930938536697723&#34;,&#34;6.979888406385319&#34;,&#34;6.95205928455466&#34;,&#34;6.9286481982692205&#34;,&#34;6.908425318713336&#34;,&#34;6.880030568657563&#34;,&#34;6.885009662800914&#34;,&#34;6.911057456813229&#34;,&#34;6.870280219320744&#34;,&#34;6.834855065486267&#34;,&#34;6.831621857223752&#34;,&#34;6.8953103550610155&#34;,&#34;6.908863467949224&#34;,&#34;6.856605553515915&#34;,&#34;6.8311360382612705&#34;,&#34;6.883493135136312&#34;,&#34;6.890903845214016&#34;,&#34;6.900291020453263&#34;,&#34;6.896068828342364&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;398509523&#34;,&#34;btcPrice&#34;:&#34;0.000343776615240072&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5083499116&#34;,&#34;price&#34;:&#34;17.168456711545172&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.55&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.311701710847508&#34;,&#34;17.262407515153612&#34;,&#34;17.253975766732072&#34;,&#34;17.305445105419164&#34;,&#34;17.35179898605964&#34;,&#34;17.43602090243061&#34;,&#34;17.5320617464102&#34;,&#34;17.556198635951862&#34;,&#34;17.522328032378404&#34;,&#34;17.567506807180212&#34;,&#34;17.518999622426595&#34;,&#34;17.438188969460462&#34;,&#34;17.392497971145044&#34;,&#34;17.384246174563923&#34;,&#34;17.340216723503893&#34;,&#34;17.317870880113258&#34;,&#34;17.317934073434696&#34;,&#34;17.361762627511066&#34;,&#34;17.38602816111171&#34;,&#34;17.34594206123334&#34;,&#34;17.293727405518197&#34;,&#34;17.28814395490991&#34;,&#34;17.237643606417418&#34;,&#34;17.233591279853332&#34;,&#34;17.194633259709995&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;403942012&#34;,&#34;btcPrice&#34;:&#34;0.000856428049991459&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4905656527&#34;,&#34;price&#34;:&#34;20043.002401942034&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.83&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20222.63472069461&#34;,&#34;20130.23749062799&#34;,&#34;20049.450436563653&#34;,&#34;20101.625670107587&#34;,&#34;20156.496626937733&#34;,&#34;20240.909995938804&#34;,&#34;20292.728315757773&#34;,&#34;20352.616852214596&#34;,&#34;20337.507383965705&#34;,&#34;20378.75288185548&#34;,&#34;20330.405569268383&#34;,&#34;20254.404761507907&#34;,&#34;20209.02661429861&#34;,&#34;20195.282207698066&#34;,&#34;20153.01465667849&#34;,&#34;20135.17585599672&#34;,&#34;20143.80296662876&#34;,&#34;20207.977287072288&#34;,&#34;20214.020111791888&#34;,&#34;20128.20065392008&#34;,&#34;20010.289645039305&#34;,&#34;20071.07422742167&#34;,&#34;20052.970806421596&#34;,&#34;20097.890506360407&#34;,&#34;20079.9038027439&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;60561819&#34;,&#34;btcPrice&#34;:&#34;0.9998213439607674&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4088991043&#34;,&#34;price&#34;:&#34;13.135788613986428&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.08&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.926276871448609&#34;,&#34;12.875277004781758&#34;,&#34;12.86904144147151&#34;,&#34;12.971292431991326&#34;,&#34;12.997809503523687&#34;,&#34;13.053288754075908&#34;,&#34;13.126935514160385&#34;,&#34;13.162946510226798&#34;,&#34;13.176459006280066&#34;,&#34;13.160096288039203&#34;,&#34;13.137389824650167&#34;,&#34;13.06998182322184&#34;,&#34;13.019107100623595&#34;,&#34;13.019228236724262&#34;,&#34;12.997097540770518&#34;,&#34;13.001447370293056&#34;,&#34;12.963267806956667&#34;,&#34;13.037160583312037&#34;,&#34;13.107469133546218&#34;,&#34;13.118997058963204&#34;,&#34;13.103829863058571&#34;,&#34;13.315259420750875&#34;,&#34;13.354096128684052&#34;,&#34;13.370022499985016&#34;,&#34;13.204669222579465&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;456069399&#34;,&#34;btcPrice&#34;:&#34;0.000655263196732836&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3941757781&#34;,&#34;price&#34;:&#34;15.665044692450335&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.40&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.575137028046232&#34;,&#34;15.662580503747137&#34;,&#34;15.564802534652488&#34;,&#34;15.557466143075752&#34;,&#34;15.524158368263686&#34;,&#34;15.564589461143923&#34;,&#34;15.626264641755956&#34;,&#34;15.739580440410696&#34;,&#34;15.723161103836562&#34;,&#34;15.756631052262051&#34;,&#34;15.719769516902309&#34;,&#34;15.679332809859426&#34;,&#34;15.659289279509137&#34;,&#34;15.653479618484809&#34;,&#34;15.638547000563062&#34;,&#34;15.642201616641493&#34;,&#34;15.628032569899407&#34;,&#34;15.743689332355745&#34;,&#34;15.776354680109298&#34;,&#34;15.74205990533899&#34;,&#34;15.71449931537389&#34;,&#34;15.72721690532428&#34;,&#34;15.644132451610492&#34;,&#34;15.658647972363548&#34;,&#34;15.659683879265028&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;16548129&#34;,&#34;btcPrice&#34;:&#34;0.000781432128955571&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3833413908&#34;,&#34;price&#34;:&#34;54.09436583189665&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.97&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.72718478384808&#34;,&#34;54.528922891099036&#34;,&#34;54.29583735175494&#34;,&#34;54.33319375556465&#34;,&#34;54.50446073551073&#34;,&#34;54.689512299086346&#34;,&#34;54.83579215246787&#34;,&#34;54.86128649682968&#34;,&#34;54.85557746061394&#34;,&#34;54.79815311448016&#34;,&#34;54.77378739059752&#34;,&#34;54.513674702652395&#34;,&#34;54.34291061527474&#34;,&#34;54.366132999303794&#34;,&#34;54.400099914380476&#34;,&#34;54.44667454869584&#34;,&#34;54.48304825815074&#34;,&#34;54.529253889973695&#34;,&#34;54.655222447706805&#34;,&#34;54.469993831812964&#34;,&#34;54.2175175293153&#34;,&#34;54.43545977145926&#34;,&#34;54.201578616656455&#34;,&#34;54.296559637153436&#34;,&#34;54.17231950080165&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;484062455&#34;,&#34;btcPrice&#34;:&#34;0.002698433122051209&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3298542579&#34;,&#34;price&#34;:&#34;24.710340434142324&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.55&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.86505055445004&#34;,&#34;24.74930489751853&#34;,&#34;24.683542378165935&#34;,&#34;24.719459773866813&#34;,&#34;24.76219388151077&#34;,&#34;24.89617949229818&#34;,&#34;24.99584490014685&#34;,&#34;25.024271811661002&#34;,&#34;25.03560312685286&#34;,&#34;25.100681844582844&#34;,&#34;25.06002637860313&#34;,&#34;24.964601458157446&#34;,&#34;24.904376569262773&#34;,&#34;24.895606258899775&#34;,&#34;24.842026144960307&#34;,&#34;24.831021985095166&#34;,&#34;24.838044627193764&#34;,&#34;24.940402746453593&#34;,&#34;24.948282135740968&#34;,&#34;24.83587699336903&#34;,&#34;24.725774848675666&#34;,&#34;24.78882994554855&#34;,&#34;24.765227280716434&#34;,&#34;24.7852189588019&#34;,&#34;24.745364911411198&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;40553069&#34;,&#34;btcPrice&#34;:&#34;0.001232645952294973&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3253027716&#34;,&#34;price&#34;:&#34;27.96780543291794&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.19&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.637527345169847&#34;,&#34;27.58455257426415&#34;,&#34;27.57375287086344&#34;,&#34;27.583701817024274&#34;,&#34;27.628337152556885&#34;,&#34;27.71293784101918&#34;,&#34;28.233029378330688&#34;,&#34;28.720730972372852&#34;,&#34;28.46641731982247&#34;,&#34;28.461748558520167&#34;,&#34;28.43371813306647&#34;,&#34;28.28911168246897&#34;,&#34;28.14430045599654&#34;,&#34;28.142119512945897&#34;,&#34;28.221174564475163&#34;,&#34;28.325040597432697&#34;,&#34;28.30280000118542&#34;,&#34;28.3082711843151&#34;,&#34;28.305799119732846&#34;,&#34;28.17075432549671&#34;,&#34;28.033606002119882&#34;,&#34;28.04521965718026&#34;,&#34;27.9781438177713&#34;,&#34;28.000644887917996&#34;,&#34;27.985116549581665&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;573621601&#34;,&#34;btcPrice&#34;:&#34;0.001395140720676851&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2644302465&#34;,&#34;price&#34;:&#34;145.42302192434917&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.59&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.8964152073788&#34;,&#34;146.34861960366464&#34;,&#34;146.06343032587645&#34;,&#34;146.2075982055981&#34;,&#34;146.16344802044546&#34;,&#34;146.888041879794&#34;,&#34;147.51024728525&#34;,&#34;147.80256016994798&#34;,&#34;148.2027654532922&#34;,&#34;149.11840657324646&#34;,&#34;148.0031628172107&#34;,&#34;146.08426002755598&#34;,&#34;145.4736608337662&#34;,&#34;145.4792527320685&#34;,&#34;145.1806672731441&#34;,&#34;145.00953730395867&#34;,&#34;145.0257998044549&#34;,&#34;145.46149782104706&#34;,&#34;145.12677492201496&#34;,&#34;144.64783256872903&#34;,&#34;144.02537845271183&#34;,&#34;144.10667787347248&#34;,&#34;143.88440788084827&#34;,&#34;143.97466187776286&#34;,&#34;144.66960607873492&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;162591683&#34;,&#34;btcPrice&#34;:&#34;0.007254254542680237&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2461275167&#34;,&#34;price&#34;:&#34;0.3508527512952266&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.16&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3525689251209651&#34;,&#34;0.35240762628811517&#34;,&#34;0.3515600123998059&#34;,&#34;0.35203683586559326&#34;,&#34;0.3530001942757888&#34;,&#34;0.35412309079161114&#34;,&#34;0.35642368756646714&#34;,&#34;0.35691371592641125&#34;,&#34;0.35632693256778514&#34;,&#34;0.35761063132157045&#34;,&#34;0.35770076129143336&#34;,&#34;0.35735739919120424&#34;,&#34;0.35584404133402586&#34;,&#34;0.35511420911441055&#34;,&#34;0.3543293095619535&#34;,&#34;0.3542433100860763&#34;,&#34;0.3544828228310482&#34;,&#34;0.35581805922078813&#34;,&#34;0.3553205603594315&#34;,&#34;0.3533918044887771&#34;,&#34;0.3523456135021036&#34;,&#34;0.353425618064933&#34;,&#34;0.3530853264198689&#34;,&#34;0.35199812899097604&#34;,&#34;0.3514138521664796&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;105127494&#34;,&#34;btcPrice&#34;:&#34;0.000017501872339163&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2434719119&#34;,&#34;price&#34;:&#34;0.12049770010869333&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.68&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11950402118554868&#34;,&#34;0.11919352351425183&#34;,&#34;0.11887874398521932&#34;,&#34;0.11899682832112154&#34;,&#34;0.11900784650582279&#34;,&#34;0.11903091787613028&#34;,&#34;0.11932756061340988&#34;,&#34;0.1193124601461036&#34;,&#34;0.11935198330687927&#34;,&#34;0.11968956008888623&#34;,&#34;0.11982768782602261&#34;,&#34;0.11926800493330945&#34;,&#34;0.11893478804653866&#34;,&#34;0.11915965495976946&#34;,&#34;0.11883424587143657&#34;,&#34;0.11874400251754233&#34;,&#34;0.11865620480407152&#34;,&#34;0.11962505531373109&#34;,&#34;0.11974625477512996&#34;,&#34;0.1192297752398314&#34;,&#34;0.11949911477927162&#34;,&#34;0.1195363384683802&#34;,&#34;0.11991168298644643&#34;,&#34;0.12023167850372701&#34;,&#34;0.12013730757452189&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;196920364&#34;,&#34;btcPrice&#34;:&#34;0.000006010884499778&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2300086606&#34;,&#34;price&#34;:&#34;120.22573455216414&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.08&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.75983045148368&#34;,&#34;122.33389967310332&#34;,&#34;122.32262573171138&#34;,&#34;122.21216671462395&#34;,&#34;122.2424076189862&#34;,&#34;122.65231412716444&#34;,&#34;123.18814722852751&#34;,&#34;123.0389419465099&#34;,&#34;122.7525437321455&#34;,&#34;122.63297695763477&#34;,&#34;122.25888231512374&#34;,&#34;121.6083740301883&#34;,&#34;121.06920532209728&#34;,&#34;121.06505253851132&#34;,&#34;121.31641268309612&#34;,&#34;121.31342982731974&#34;,&#34;121.42232686519066&#34;,&#34;121.73409744703572&#34;,&#34;121.89798728864076&#34;,&#34;121.56372256374502&#34;,&#34;120.69906776713734&#34;,&#34;121.03687818262068&#34;,&#34;120.78791155090717&#34;,&#34;120.72364621766697&#34;,&#34;120.42837017176116&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;240609203&#34;,&#34;btcPrice&#34;:&#34;0.00599731782135436&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2256743933&#34;,&#34;price&#34;:&#34;20059.76776641939&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.51&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20231.098261558018&#34;,&#34;20149.617640664368&#34;,&#34;20057.082143515574&#34;,&#34;20073.73634471567&#34;,&#34;20155.35074272695&#34;,&#34;20201.665838224184&#34;,&#34;20307.87652463223&#34;,&#34;20347.737496425136&#34;,&#34;20336.451830858347&#34;,&#34;20370.359230166003&#34;,&#34;20347.242691661544&#34;,&#34;20289.47946418053&#34;,&#34;20236.43515036491&#34;,&#34;20227.307289890327&#34;,&#34;20159.253111186365&#34;,&#34;20151.59933538431&#34;,&#34;20140.561492740446&#34;,&#34;20182.239409718797&#34;,&#34;20226.462817293763&#34;,&#34;20155.56495267985&#34;,&#34;19999.67086131824&#34;,&#34;20059.420703023447&#34;,&#34;20034.48757190991&#34;,&#34;20087.652566779983&#34;,&#34;20106.00131657147&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;3532116&#34;,&#34;btcPrice&#34;:&#34;1.0006576642339275&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2219001419&#34;,&#34;price&#34;:&#34;3.650608062518831&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.37&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;3.709145399891202&#34;,&#34;3.6855537742923947&#34;,&#34;3.6764432411708334&#34;,&#34;3.6877377535157785&#34;,&#34;3.695275020835127&#34;,&#34;3.703712737949751&#34;,&#34;3.7340726187087037&#34;,&#34;3.7301224517518223&#34;,&#34;3.726830183476546&#34;,&#34;3.732039649903934&#34;,&#34;3.717434927228703&#34;,&#34;3.6877396306355372&#34;,&#34;3.6716138278055315&#34;,&#34;3.672023646958891&#34;,&#34;3.6796627968878117&#34;,&#34;3.6827271652478855&#34;,&#34;3.673292435001616&#34;,&#34;3.6850689868755926&#34;,&#34;3.6848299842173686&#34;,&#34;3.6621052069632927&#34;,&#34;3.645473470040869&#34;,&#34;3.65438135452944&#34;,&#34;3.650467522910622&#34;,&#34;3.657259859564373&#34;,&#34;3.65150836584407&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;219984296&#34;,&#34;btcPrice&#34;:&#34;0.000182106242674897&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2210437016&#34;,&#34;price&#34;:&#34;0.1099067550955083&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.39&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;0.1102866655978439&#34;,&#34;0.10973972405741797&#34;,&#34;0.10962651467178453&#34;,&#34;0.10994008962491644&#34;,&#34;0.1102558436062367&#34;,&#34;0.11066651769044844&#34;,&#34;0.11099761359490694&#34;,&#34;0.11112033875517015&#34;,&#34;0.11109668798682694&#34;,&#34;0.11125486280094371&#34;,&#34;0.11097328447826356&#34;,&#34;0.11061839872555923&#34;,&#34;0.11049480906095765&#34;,&#34;0.11047705770928287&#34;,&#34;0.11016808565081138&#34;,&#34;0.11017204357466145&#34;,&#34;0.11019667819823448&#34;,&#34;0.11063136672626925&#34;,&#34;0.11069867867729656&#34;,&#34;0.11043373302719106&#34;,&#34;0.11008751029922599&#34;,&#34;0.1102298592915935&#34;,&#34;0.11019877919003072&#34;,&#34;0.11038877818188102&#34;,&#34;0.11011369004139103&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;18125510&#34;,&#34;btcPrice&#34;:&#34;0.000005482567800287&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1916068983&#34;,&#34;price&#34;:&#34;0.000290719731748237&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.47&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000298998676450639&#34;,&#34;0.000299826766758632&#34;,&#34;0.000297534732475355&#34;,&#34;0.00029924350285628&#34;,&#34;0.000301788299795161&#34;,&#34;0.000299920153570012&#34;,&#34;0.000298931795978761&#34;,&#34;0.00030181081782183&#34;,&#34;0.000303176990591589&#34;,&#34;0.000301682155659599&#34;,&#34;0.000300427127360826&#34;,&#34;0.000299399340560452&#34;,&#34;0.000296030916678464&#34;,&#34;0.000294229563164984&#34;,&#34;0.00029620922346966&#34;,&#34;0.000295899215933004&#34;,&#34;0.000296217702108255&#34;,&#34;0.000296829911058331&#34;,&#34;0.000296559426866186&#34;,&#34;0.000295191934413479&#34;,&#34;0.000295456788652574&#34;,&#34;0.000295777378499636&#34;,&#34;0.000294459432139008&#34;,&#34;0.000292410713953547&#34;,&#34;0.000290756027146779&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;84554025&#34;,&#34;btcPrice&#34;:&#34;1.4502208156e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1803593278&#34;,&#34;price&#34;:&#34;1.8035932783044732&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.29&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8280494116453418&#34;,&#34;1.8283763827973312&#34;,&#34;1.8200632272957997&#34;,&#34;1.8247805232483643&#34;,&#34;1.828712312707551&#34;,&#34;1.833483750666553&#34;,&#34;1.8388113856711226&#34;,&#34;1.8340065059765118&#34;,&#34;1.833810679916731&#34;,&#34;1.8379730157830576&#34;,&#34;1.839871909045534&#34;,&#34;1.8316951407594886&#34;,&#34;1.8228200406729849&#34;,&#34;1.813347598660363&#34;,&#34;1.8119797410726592&#34;,&#34;1.809839266259027&#34;,&#34;1.8056779775027223&#34;,&#34;1.8171058470471277&#34;,&#34;1.8207781512935177&#34;,&#34;1.8161039074009673&#34;,&#34;1.8067945451862275&#34;,&#34;1.8198882851409492&#34;,&#34;1.8153134018571955&#34;,&#34;1.811475359482419&#34;,&#34;1.8130568319639457&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;12622279&#34;,&#34;btcPrice&#34;:&#34;0.000089970106240084&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1761178596&#34;,&#34;price&#34;:&#34;1.699651221961024&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.89&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6916190276130023&#34;,&#34;1.6870161618997255&#34;,&#34;1.6885003563699261&#34;,&#34;1.6911129238364746&#34;,&#34;1.6949035542249486&#34;,&#34;1.7027954737084738&#34;,&#34;1.7125610716564361&#34;,&#34;1.7140651860196017&#34;,&#34;1.714695946307908&#34;,&#34;1.7186349196969963&#34;,&#34;1.7112095222795702&#34;,&#34;1.7059432521776707&#34;,&#34;1.6990849778102466&#34;,&#34;1.7009865441984156&#34;,&#34;1.6974608241600029&#34;,&#34;1.693719842832861&#34;,&#34;1.691546977165074&#34;,&#34;1.6994974763911996&#34;,&#34;1.7010007554542457&#34;,&#34;1.691066171618029&#34;,&#34;1.6853627168164407&#34;,&#34;1.7006901856350147&#34;,&#34;1.700642727036232&#34;,&#34;1.7059726265028285&#34;,&#34;1.7045502578525151&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;46747487&#34;,&#34;btcPrice&#34;:&#34;0.000084785080345097&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1715645478&#34;,&#34;price&#34;:&#34;17.156454777297956&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.41&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.274155600975227&#34;,&#34;17.178968151553384&#34;,&#34;17.0775388533003&#34;,&#34;17.067912741278125&#34;,&#34;17.19371992172132&#34;,&#34;17.4049080612785&#34;,&#34;17.349122197170388&#34;,&#34;17.383691525495145&#34;,&#34;17.38955154672953&#34;,&#34;17.62408133673586&#34;,&#34;17.593322076060364&#34;,&#34;17.4386892965598&#34;,&#34;17.32333194983784&#34;,&#34;17.454935581534613&#34;,&#34;17.325985988795207&#34;,&#34;17.368904943606196&#34;,&#34;17.362546803048055&#34;,&#34;17.3764087970854&#34;,&#34;17.419117141273638&#34;,&#34;17.35271679037387&#34;,&#34;17.38519844965686&#34;,&#34;17.573923269656888&#34;,&#34;17.412442758361905&#34;,&#34;17.37020170660671&#34;,&#34;17.169874171318288&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;15615546&#34;,&#34;btcPrice&#34;:&#34;0.000855993353008056&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1627732805&#34;,&#34;price&#34;:&#34;5.538253629331978&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.68&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.596100786175611&#34;,&#34;5.582033529324813&#34;,&#34;5.563583111239947&#34;,&#34;5.566550453652093&#34;,&#34;5.574658649368248&#34;,&#34;5.59947207926758&#34;,&#34;5.623738949982796&#34;,&#34;5.620874463842186&#34;,&#34;5.636449717522663&#34;,&#34;5.636012075827377&#34;,&#34;5.621787024814909&#34;,&#34;5.604863066684564&#34;,&#34;5.591110699301258&#34;,&#34;5.594109335499362&#34;,&#34;5.579395762312111&#34;,&#34;5.571603862378717&#34;,&#34;5.568665240867289&#34;,&#34;5.584428109854282&#34;,&#34;5.589357305391382&#34;,&#34;5.571466398392628&#34;,&#34;5.555143733013601&#34;,&#34;5.566649712407954&#34;,&#34;5.558897804317119&#34;,&#34;5.557931622936892&#34;,&#34;5.545052787374964&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;112381700&#34;,&#34;btcPrice&#34;:&#34;0.000276269197390196&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1586381530&#34;,&#34;price&#34;:&#34;6.040895547504492&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.63&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.028032946026687&#34;,&#34;6.023496800537139&#34;,&#34;6.016755740637141&#34;,&#34;6.025549949045874&#34;,&#34;6.025640938683228&#34;,&#34;6.0377448148370085&#34;,&#34;6.064372958080765&#34;,&#34;6.083168222934446&#34;,&#34;6.121138125111502&#34;,&#34;6.122110772502033&#34;,&#34;6.115151992864029&#34;,&#34;6.094617924935418&#34;,&#34;6.060175751820776&#34;,&#34;6.057627134702182&#34;,&#34;6.044453572817335&#34;,&#34;6.041605429471563&#34;,&#34;6.031060257031912&#34;,&#34;6.047144324679883&#34;,&#34;6.056531123948183&#34;,&#34;6.043157182392127&#34;,&#34;6.029286234340265&#34;,&#34;6.030315565311347&#34;,&#34;6.029530798006678&#34;,&#34;6.044644250021093&#34;,&#34;6.042323700028405&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;29072281&#34;,&#34;btcPrice&#34;:&#34;0.000301342891843756&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1573784812&#34;,&#34;price&#34;:&#34;0.023573507140828676&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.21&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.02383669526151831&#34;,&#34;0.023777063134524188&#34;,&#34;0.02375170887710745&#34;,&#34;0.023790767210407363&#34;,&#34;0.02385906108038382&#34;,&#34;0.023963654949121647&#34;,&#34;0.024032391322482857&#34;,&#34;0.02406040482720113&#34;,&#34;0.0240241062637749&#34;,&#34;0.024037336226182978&#34;,&#34;0.02400171948264513&#34;,&#34;0.02387998962803967&#34;,&#34;0.02378850465137536&#34;,&#34;0.023837111243251226&#34;,&#34;0.023815921540209235&#34;,&#34;0.023769995820392444&#34;,&#34;0.023739891208846193&#34;,&#34;0.023855321629745706&#34;,&#34;0.023897228613256757&#34;,&#34;0.023791321188323424&#34;,&#34;0.02367760390068874&#34;,&#34;0.02374190806050289&#34;,&#34;0.02367962724028958&#34;,&#34;0.023674409512811297&#34;,&#34;0.023617007075663103&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;95797729&#34;,&#34;btcPrice&#34;:&#34;0.000001175936375138&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1569986890&#34;,&#34;price&#34;:&#34;4.720556375462068&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.66&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.697071631303028&#34;,&#34;4.669868830815898&#34;,&#34;4.661125064396867&#34;,&#34;4.663869351538766&#34;,&#34;4.66954849891612&#34;,&#34;4.700257578283811&#34;,&#34;4.730018157572612&#34;,&#34;4.714143976512721&#34;,&#34;4.723478551910749&#34;,&#34;4.726841497246268&#34;,&#34;4.71589081766422&#34;,&#34;4.704019970362516&#34;,&#34;4.698161923039412&#34;,&#34;4.7031209766755016&#34;,&#34;4.692579489314503&#34;,&#34;4.679648115490985&#34;,&#34;4.687714757432509&#34;,&#34;4.719032873982035&#34;,&#34;4.724971359920624&#34;,&#34;4.712351130155052&#34;,&#34;4.719029191980287&#34;,&#34;4.7279686027861425&#34;,&#34;4.7260647727410285&#34;,&#34;4.73075062619031&#34;,&#34;4.725009330598604&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;40403850&#34;,&#34;btcPrice&#34;:&#34;0.000235479342111926&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1537213952&#34;,&#34;price&#34;:&#34;0.7008040361582227&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.38&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7063006873405935&#34;,&#34;0.7035393581891307&#34;,&#34;0.7018437336148443&#34;,&#34;0.7012296643669335&#34;,&#34;0.7022993535952263&#34;,&#34;0.7043824624342494&#34;,&#34;0.7061012732016445&#34;,&#34;0.7092722059821073&#34;,&#34;0.7107294942869858&#34;,&#34;0.7108990080244315&#34;,&#34;0.7099791984418414&#34;,&#34;0.7078420220186218&#34;,&#34;0.7049582130893842&#34;,&#34;0.7073897479512065&#34;,&#34;0.7053057857361185&#34;,&#34;0.7046517786625648&#34;,&#34;0.7039018744140978&#34;,&#34;0.7061875672681424&#34;,&#34;0.7064691025691597&#34;,&#34;0.7038019871422808&#34;,&#34;0.7011256758919822&#34;,&#34;0.7014300165554707&#34;,&#34;0.7002696349282048&#34;,&#34;0.700707473052219&#34;,&#34;0.7001849088771882&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;115193177&#34;,&#34;btcPrice&#34;:&#34;0.000034958776097186&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1528867295&#34;,&#34;price&#34;:&#34;0.7644336476628847&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.43&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7927847188535762&#34;,&#34;0.7884975496245668&#34;,&#34;0.7862352418397442&#34;,&#34;0.7857962385011888&#34;,&#34;0.7860823591712383&#34;,&#34;0.7913864227222935&#34;,&#34;0.7931731378366671&#34;,&#34;0.7918535836709918&#34;,&#34;0.7934385490032205&#34;,&#34;0.7935992087657073&#34;,&#34;0.7897855169136626&#34;,&#34;0.7868869873929384&#34;,&#34;0.7827398180680905&#34;,&#34;0.783228165174872&#34;,&#34;0.7815364376407758&#34;,&#34;0.7781414627334526&#34;,&#34;0.7744570301287642&#34;,&#34;0.7791777850589451&#34;,&#34;0.77910792480725&#34;,&#34;0.7748083717236799&#34;,&#34;0.771741132204964&#34;,&#34;0.7719247547364205&#34;,&#34;0.7697367918455802&#34;,&#34;0.767620389561085&#34;,&#34;0.7661499177156591&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;60225147&#34;,&#34;btcPrice&#34;:&#34;0.000038132863612344&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1410983125&#34;,&#34;price&#34;:&#34;0.057955556105098525&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.10&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05797686934406815&#34;,&#34;0.05774970665222453&#34;,&#34;0.05770820809062958&#34;,&#34;0.05773161591193554&#34;,&#34;0.057901448026430706&#34;,&#34;0.058104711439575775&#34;,&#34;0.05821494457445837&#34;,&#34;0.05837605385144989&#34;,&#34;0.0583912493104286&#34;,&#34;0.058424171286181624&#34;,&#34;0.05828953359467471&#34;,&#34;0.058191254382563104&#34;,&#34;0.05807000164742536&#34;,&#34;0.058160951983569076&#34;,&#34;0.05809875543730914&#34;,&#34;0.05804408247369093&#34;,&#34;0.05806716774177746&#34;,&#34;0.05823647896782499&#34;,&#34;0.05829966185121518&#34;,&#34;0.058247050540209844&#34;,&#34;0.05798533858210562&#34;,&#34;0.05803846783625502&#34;,&#34;0.05802081484422402&#34;,&#34;0.05809046002134666&#34;,&#34;0.05804751096559524&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;51003068&#34;,&#34;btcPrice&#34;:&#34;0.000002891044007927&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1358607996&#34;,&#34;price&#34;:&#34;1.0003993495790997&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.16&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.9993285438443996&#34;,&#34;1.0001938698647872&#34;,&#34;0.99995237657306&#34;,&#34;0.9992610930077082&#34;,&#34;0.9995048898577841&#34;,&#34;0.9984857957300194&#34;,&#34;0.9991338275862605&#34;,&#34;0.9991463646832447&#34;,&#34;0.9995515068035792&#34;,&#34;0.9992688671456238&#34;,&#34;0.9999129851645419&#34;,&#34;1.0002242997546233&#34;,&#34;0.9997489012662978&#34;,&#34;0.9999089765400784&#34;,&#34;0.9996981799238007&#34;,&#34;0.9997742307253584&#34;,&#34;0.9993713087045574&#34;,&#34;0.9989351433651499&#34;,&#34;1.0000638089453535&#34;,&#34;1.0006451157986236&#34;,&#34;0.9999648159326433&#34;,&#34;0.9994226357449991&#34;,&#34;0.9996808337018925&#34;,&#34;0.9992443919870343&#34;,&#34;0.9998943295360442&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;3733741&#34;,&#34;btcPrice&#34;:&#34;0.00004990373209239&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1353080262&#34;,&#34;price&#34;:&#34;138.39087676538432&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.54&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;137.5931163349706&#34;,&#34;137.1964500881598&#34;,&#34;136.82868883894076&#34;,&#34;137.71306856606782&#34;,&#34;138.03647928074753&#34;,&#34;138.80197795554938&#34;,&#34;139.12071269372848&#34;,&#34;139.05878455835125&#34;,&#34;139.14677841096062&#34;,&#34;138.87253490735398&#34;,&#34;138.02179236057498&#34;,&#34;137.42442294208283&#34;,&#34;137.46239645857338&#34;,&#34;139.5002036124544&#34;,&#34;138.97889139890526&#34;,&#34;139.28426593094446&#34;,&#34;139.56150019257015&#34;,&#34;140.736716556136&#34;,&#34;139.96389332265113&#34;,&#34;139.6272333811887&#34;,&#34;139.07635485204617&#34;,&#34;139.63664566013787&#34;,&#34;139.31235216385738&#34;,&#34;139.11852066488916&#34;,&#34;138.98410332519478&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;50635040&#34;,&#34;btcPrice&#34;:&#34;0.00690346434255123&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1300204054&#34;,&#34;price&#34;:&#34;1.4316486920645115&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.26&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;1.4303771565197818&#34;,&#34;1.4263870016300133&#34;,&#34;1.421883939884071&#34;,&#34;1.42509607402001&#34;,&#34;1.4278239665456545&#34;,&#34;1.4336636277697252&#34;,&#34;1.4443645638453815&#34;,&#34;1.4463747088081587&#34;,&#34;1.4428608091094144&#34;,&#34;1.4490881454348474&#34;,&#34;1.4450878337651158&#34;,&#34;1.4401715843904537&#34;,&#34;1.4355060812047051&#34;,&#34;1.4365702563644107&#34;,&#34;1.4342648056647027&#34;,&#34;1.4335722045688304&#34;,&#34;1.4324898436773112&#34;,&#34;1.4381985706493114&#34;,&#34;1.4396839449567278&#34;,&#34;1.4329513431489487&#34;,&#34;1.4241068248436421&#34;,&#34;1.4249205356366212&#34;,&#34;1.4218540466859932&#34;,&#34;1.4273001583428873&#34;,&#34;1.431100926224263&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;26826699&#34;,&#34;btcPrice&#34;:&#34;0.000071416092792611&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1297267328&#34;,&#34;price&#34;:&#34;54.906068498049464&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.40&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;54.78019415186295&#34;,&#34;54.622161996831736&#34;,&#34;54.49977253219301&#34;,&#34;54.11874620026287&#34;,&#34;54.2183062824539&#34;,&#34;54.68045352030543&#34;,&#34;55.29261101979573&#34;,&#34;55.12466500529631&#34;,&#34;55.4096265101037&#34;,&#34;55.17360006105945&#34;,&#34;55.03825697066999&#34;,&#34;54.83782041498208&#34;,&#34;54.61575869744404&#34;,&#34;54.70295376603455&#34;,&#34;55.00400189240814&#34;,&#34;55.12856947927623&#34;,&#34;55.12370474660532&#34;,&#34;55.09496818313045&#34;,&#34;55.071190262317295&#34;,&#34;54.8879367152154&#34;,&#34;54.82942987973649&#34;,&#34;55.05026322723258&#34;,&#34;55.347006013656&#34;,&#34;55.053173275089456&#34;,&#34;54.82032064325985&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;64240250&#34;,&#34;btcPrice&#34;:&#34;0.002738923944448696&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1280957145&#34;,&#34;price&#34;:&#34;0.21561767129967355&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.2167380301064244&#34;,&#34;0.2171911085758357&#34;,&#34;0.21553593139708543&#34;,&#34;0.21544366417321525&#34;,&#34;0.21646610949174847&#34;,&#34;0.21730782782429547&#34;,&#34;0.21865681130587172&#34;,&#34;0.21939390999187283&#34;,&#34;0.21985592005582816&#34;,&#34;0.21915437745243896&#34;,&#34;0.2184171446254368&#34;,&#34;0.21798236632181323&#34;,&#34;0.21693749749939806&#34;,&#34;0.21615410342830474&#34;,&#34;0.21571986164973528&#34;,&#34;0.2159788490629823&#34;,&#34;0.2156433096393173&#34;,&#34;0.21617987529587182&#34;,&#34;0.21607036881499855&#34;,&#34;0.21498784486894162&#34;,&#34;0.21491990483747653&#34;,&#34;0.21697133723181256&#34;,&#34;0.21755752799238656&#34;,&#34;0.21695741930079548&#34;,&#34;0.21624210773698346&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;460083495&#34;,&#34;btcPrice&#34;:&#34;0.000010755831166275&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1271733183&#34;,&#34;price&#34;:&#34;0.848121674413878&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.84&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8657345193530482&#34;,&#34;0.8652752878725027&#34;,&#34;0.8590405964683089&#34;,&#34;0.859478250004335&#34;,&#34;0.8609939510022012&#34;,&#34;0.8652881133772078&#34;,&#34;0.8665208089867517&#34;,&#34;0.8666644958759461&#34;,&#34;0.8662362089943302&#34;,&#34;0.8669849089516505&#34;,&#34;0.8647803548984957&#34;,&#34;0.8606548254227334&#34;,&#34;0.8585067841087192&#34;,&#34;0.8664345388506387&#34;,&#34;0.8598642242587775&#34;,&#34;0.8550905012498858&#34;,&#34;0.8525754893351933&#34;,&#34;0.8559365662168398&#34;,&#34;0.8569336638527342&#34;,&#34;0.8534178656749926&#34;,&#34;0.8500209726685031&#34;,&#34;0.8518987104449217&#34;,&#34;0.8509619881948727&#34;,&#34;0.8511662710715976&#34;,&#34;0.8487851228369447&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;88867473&#34;,&#34;btcPrice&#34;:&#34;0.00004230754132288&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1214493417&#34;,&#34;price&#34;:&#34;1.509958655569204&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.23&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.5262127929864016&#34;,&#34;1.5176954452819915&#34;,&#34;1.5150991540359635&#34;,&#34;1.5176061095960762&#34;,&#34;1.5245756510192037&#34;,&#34;1.5369489213784007&#34;,&#34;1.5521086753177897&#34;,&#34;1.5577273434480916&#34;,&#34;1.5620222188046804&#34;,&#34;1.5618008806408366&#34;,&#34;1.5635266954065115&#34;,&#34;1.5512539189835166&#34;,&#34;1.5391761578058742&#34;,&#34;1.5417728397433934&#34;,&#34;1.5391662862821918&#34;,&#34;1.551732422410982&#34;,&#34;1.5578727920234121&#34;,&#34;1.5605897391023955&#34;,&#34;1.5588570574766867&#34;,&#34;1.5471920671898944&#34;,&#34;1.5272851166043249&#34;,&#34;1.5300952108412735&#34;,&#34;1.5251316323745978&#34;,&#34;1.5245868135847145&#34;,&#34;1.517349608311682&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;15460209&#34;,&#34;btcPrice&#34;:&#34;0.00007532249221255&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1157793715&#34;,&#34;price&#34;:&#34;1.1712453110782213&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.13&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1762786527168803&#34;,&#34;1.171863999952927&#34;,&#34;1.1694694824289555&#34;,&#34;1.1709120673050462&#34;,&#34;1.1739859596809479&#34;,&#34;1.17900555328724&#34;,&#34;1.184230473597679&#34;,&#34;1.185710435108849&#34;,&#34;1.1864344657129484&#34;,&#34;1.1885516582635711&#34;,&#34;1.1870888275685685&#34;,&#34;1.1829654851494844&#34;,&#34;1.1771131630544172&#34;,&#34;1.1762377714095447&#34;,&#34;1.1769630259663557&#34;,&#34;1.1772035508413894&#34;,&#34;1.1801998841804127&#34;,&#34;1.182765609452055&#34;,&#34;1.1831309976109754&#34;,&#34;1.1791147972134663&#34;,&#34;1.1763354821221652&#34;,&#34;1.1775466682421731&#34;,&#34;1.1755236038522172&#34;,&#34;1.1754738968052796&#34;,&#34;1.1733712393528222&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;281714819&#34;,&#34;btcPrice&#34;:&#34;0.000058426179748225&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 20046.583845211964 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1358.8203036993507 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 1.0007724451188478 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 1.0010183883810226 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 293.30188392001014 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.49612120329910436 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 1.0005116038816269 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.42898904780299635 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 33.712032667285605 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.0638616646530509 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge MATIC 0.8415656771217019 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic DOT 6.379095272664653 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot SHIB 0.00001129248587654 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 1.000588465014447 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06256427894867475 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1359.7372924111291 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.891546741433287 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 17.168456711545172 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax WBTC 20043.002401942034 Icon Url: https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg Rank Url: https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc ATOM 13.135788613986428 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom OKB 15.665044692450335 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb LTC 54.09436583189665 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 24.710340434142324 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 27.96780543291794 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 145.42302192434917 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr ALGO 0.3508527512952266 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo XLM 0.12049770010869333 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm BCH 120.22573455216414 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch BTCB 20059.76776641939 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb NEAR 3.650608062518831 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near CRO 0.1099067550955083 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro LUNC 0.000290719731748237 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.8035932783044732 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix FLOW 1.699651221961024 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow ENS 17.156454777297956 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FIL 5.538253629331978 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil ICP 6.040895547504492 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp VET 0.023573507140828676 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet CAKE 4.720556375462068 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake MANA 0.7008040361582227 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana IMX 0.7644336476628847 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx HBAR 0.057955556105098525 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar FRAX 1.0003993495790997 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax QNT 138.39087676538432 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt XTZ 1.4316486920645115 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz EGLD 54.906068498049464 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld CHZ 0.21561767129967355 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz SAND 0.848121674413878 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.509958655569204 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo EOS 1.1712453110782213 Icon Url: https://cdn.coinranking.com/PqOYrWSje/eos2.svg Rank Url: https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://sanikasha.github.io/superFastPages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter b is the 2 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter b is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) del newNumbers[0] print(&quot;list after deleteing 0: &quot;, newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] list after deleteing 0: [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99,} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Sanika&#39;s Diner Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #code should prompts the user multiple times, until they type &quot;Done&quot; while True: item = input(&quot;Please select an item from the menu, or type Done&quot;) if item == &quot;Done&quot; : break elif item in menu: total += menu[item] else: print (&quot;Invalid item!!!&quot;) #code adds price of the menu items selected by the user print(&quot;Your total bill is: $&quot; + str(total)) . Sanika&#39;s Diner Menu burger $3.99 fries $1.99 drink $0.99 Your total bill is: $5.98 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://sanikasha.github.io/superFastPages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "College Board Progress Checks",
            "content": "1.1 Collaboration: 3/3 . A company that develops educational software wants to assemble a collaborative team of developers from a variety of professional and cultural backgrounds. Which of the following is NOT considered a benefit of assembling such a team? . Collaboration that includes diverse backgrounds and perspectives can eliminate the need for software testing. . Three students in different locations are collaborating on the development of an application. Which of the following strategies is LEAST likely to facilitate collaboration among the students? . Having all three students write code independently and then having one student combine the code into a program . A company that develops mobile applications wants to involve users in the software development process. Which of the following best explains the benefit in having users participate? . Users can provide feedback that can be used to incorporate a variety of perspectives into the software. . 1.2 Program Design and Development Quiz: 1/3 *was a little confused, but later realized that I was supposed to watch the CB video detailing the information in the quiz . . Q1 . In the following procedure, the parameter max is a positive integer. . PROCEDURE printNums(max) { count ← 1 REPEAT UNTIL(count &gt; max) { DISPLAY(count) count ← count + 2 } } . Which of the following is the most appropriate documentation to appear with the printNums procedure? . Prints all positive odd integers that are less than or equal to max. . Q2 . In the following procedure, the parameters x and y are integers. . . Which of the following is the most appropriate documentation to appear with the calculate procedure? . Displays the value of (x + y) / x. The value of the parameter x must not be 0. . Q3 . In the following procedure, the parameter numList is a list of numbers and the parameters j and k are integers. . PROCEDURE swapListElements(numList, j, k) { newList ← numList newListj ← numListk newListk ← numListj RETURN(newList) } . Which of the following is the most appropriate documentation to appear with the swapListElements procedure? . Interchanges the values of the parameters j and k. The value of j must be between 0 and the value of k, inclusive. . 1.3 Program Design and Development Quiz: 4/6 . Q1 Consider the following code segment. . . Which of the following best describes the behavior of the code segment? . The code segment displays the value of 2(5^3) by initializing result to 2 and then multiplying result by 5 a total of three times. . Q2 In the following procedure, assume that the parameter x is an integer. . . Which of the following best describes the behavior of the procedure? . It displays true if x is negative and displays nothing otherwise. . Q3 DineOutHelper is a mobile application that people can use to select a restaurant for a group meal. Each user creates a profile with a unique username and a list of food allergies or dietary restrictions. Each user can then build a contact list of other users of the app. . A user who is organizing a meal with a group selects all the members of the group from the user’s contact list. The application then recommends one or more nearby restaurants based on whether the restaurant can accommodate all of the group members’ allergies and dietary restrictions. . Suppose that Alejandra is using DineOutHelper to organize a meal with Brandon and Cynthia. . Which of the following data are needed for DineOutHelper to recommend a restaurant for the group? . I. Each group member’s list of food allergies or dietary restrictions II. Alejandra’s geographic location III. The usernames of the people on Brandon and Cynthia’s contact lists . I and II only . Q4 DineOutHelper is a mobile application that people can use to select a restaurant for a group meal. Each user creates a profile with a unique username and a list of food allergies or dietary restrictions. Each user can then build a contact list of other users of the app. . A user who is organizing a meal with a group selects all the members of the group from the user’s contact list. The application then recommends one or more nearby restaurants based on whether the restaurant can accommodate all of the group members’ allergies and dietary restrictions. . Suppose that Alejandra is using DineOutHelper to organize a meal with Brandon and Cynthia. . Which of the following data is not provided by Alejandra but is necessary for DineOutHelper to recommend a restaurant for the group? . I. Brandon’s contact list II. Information about which restaurants Brandon and Cynthia have visited in the past III. Information about which food allergies and dietary restrictions can be accommodated at different restaurants near Alejandra . II and III only . Q5 A student wrote the following code segment, which displays true if the list myList contains any duplicate values and displays false otherwise. . . The code segment compares pairs of list elements, setting containsDuplicates to true if any two elements are found to be equal in value. Which of the following best describes the behavior of how pairs of elements are compared? . The code segment iterates through myList, comparing each element to all other elements in the list. . Q6 A student is creating an application that allows customers to order food for delivery from a local restaurant. Which of the following is LEAST likely to be an input provided by a customer using the application? . The cost of a food item currently available for order . Copy of Identifying and Correcting Errors Quiz 2/3 . . Q1 . In the following code segment, score and penalty are initially positive integers. The code segment is intended to reduce the value of score by penalty. However, if doing so would cause score to be negative, score should be assigned the value 0. . For example, if score is 20 and penalty is 5, the code segment should set score to 15. If score is 20 and penalty is 30, score should be set to 0. . The code segment does not work as intended. . Line 1: IF(score - penalty &lt; 0) Line 2: { Line 3: score ← score - penalty Line 4: } Line 5: ELSE Line 6: { Line 7: score ← 0 Line 8: } . Which of the following changes can be made so that the code segment works as intended? . Answer: Interchanging lines 3 and 7 . Q2 . The following procedure is intended to return true if the list of numbers myList contains only positive numbers and is intended to return false otherwise. The procedure does not work as intended. . PROCEDURE allPositive(myList) { index ← 1 len ← LENGTH(myList) REPEAT len TIMES { IF(myList[index] &gt; 0) { RETURN(true) } index ← index + 1 } RETURN(false) } . For which of the following contents of myList does the procedure NOT return the intended result? . Answer: [-1, 0, 1] The procedure traverses this list and eventually encounters the positive value 1. At this point, the procedure returns true when it should return false because the list does not contain only positive values. . Q3 . For which of the following values of numCorrect does the code segment NOT display the intended grade? . Answer: 6, 8 . Internet Quiz 4.1 . 4.1 Video 1 Notes: . 4.1 Video 2 Notes: . . Q1 . How are messages typically transmitted over internet? The message is broken into packets. The packets can be received in any order and still be reassembled by the recipient’s device. . Q2 . Which of the following is a primary reason for the use of open protocols on the Internet? Open protocols provide a way to standardize data transmission between different devices. . Q3 . Which of the following best describes the relationship between the World Wide Web and the Internet? The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet. .",
            "url": "https://sanikasha.github.io/superFastPages/week%206/2022/09/30/CB-Prog.html",
            "relUrl": "/week%206/2022/09/30/CB-Prog.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Attempted JavaScript Calc Analysis",
            "content": "function display(val) { document.getElementById(&quot;textval&quot;).value += val } function evaluate() { let x = document.getElementById(&quot;textval&quot;).value let y = eval(x) document.getElementById(&quot;textval&quot;).value = y } function clr() { document.getElementById(&quot;textval&quot;).value = &quot;&quot; } // defining our calculator function function myCalc() { var style1 = ( &quot;input[type=&#39;button&#39;]&quot; + &quot;{border-radius: 10px;background-color: blue;color: white; border-color: #pink; width: 100%;}&quot; ); var style2=( &quot;input[type=&#39;text&#39;]&quot; + &quot;{border-radius: 10px;text-align: right;background-color: yellow;color: white;border-color: white;width: 100%}&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // making a header body += &quot;&lt;p&gt;Calculator&lt;/p&gt;&quot;; body += &quot;&lt;div class=title&gt;A JS Calculator&lt;/div&gt;&quot;; body += &quot;&lt;table border=&#39;1&#39;&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;c&#39; onclick=&#39;clr()&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td colspan=&#39;3&#39;&gt;&lt;input type=&#39;text&#39; id=&#39;textval&#39; /&gt;&lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;+&#39; onclick=&#39;display(&#39;+&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;1&#39; onclick=&#39;display(&#39;1&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;2&#39; onclick=&#39;display(&#39;2&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;3&#39; onclick=&#39;display(&#39;3&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;-&#39; onclick=&#39;display(&#39;-&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;4&#39; onclick=&#39;display(&#39;4&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;5&#39; onclick=&#39;display(&#39;5&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;6&#39; onclick=&#39;display(&#39;6&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;*&#39; onclick=&#39;display(&#39;*&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;7&#39; onclick=&#39;display(&#39;7&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;8&#39; onclick=&#39;display(&#39;8&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;9&#39; onclick=&#39;display(&#39;9&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;/&#39; onclick=&#39;display(&#39;/&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;.&#39; onclick=&#39;display(&#39;.&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;0&#39; onclick=&#39;display(&#39;0&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;=&#39; onclick=&#39;evaluate()&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;/table&gt;&quot;; // Build and HTML fragment of div, table, table body return ( &quot;&lt;div&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(myCalc()); . &lt;divCalculator . A JS Calculator | | . &lt;input type=&#39;button&#39; value=&#39;+&#39; onclick=&#39;display(&#39;+&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;1&#39; onclick=&#39;display(&#39;1&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;2&#39; onclick=&#39;display(&#39;2&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;3&#39; onclick=&#39;display(&#39;3&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; value=&#39;-&#39; onclick=&#39;display(&#39;-&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;4&#39; onclick=&#39;display(&#39;4&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;5&#39; onclick=&#39;display(&#39;5&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;6&#39; onclick=&#39;display(&#39;6&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; value=&#39;*&#39; onclick=&#39;display(&#39;*&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;7&#39; onclick=&#39;display(&#39;7&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;8&#39; onclick=&#39;display(&#39;8&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;9&#39; onclick=&#39;display(&#39;9&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; value=&#39;/&#39; onclick=&#39;display(&#39;/&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;.&#39; onclick=&#39;display(&#39;.&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;0&#39; onclick=&#39;display(&#39;0&#39;)&#39; /&gt; | | . What did we notice in the code? . Functions and variables are defined to avoide repeating code | stands for table data x&lt;/li&gt; stands for table row&lt;/li&gt; is a container for HTML elements, and usually defines a second of the document&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; | . | | | .",
            "url": "https://sanikasha.github.io/superFastPages/week%205/2022/09/26/JSCalc.html",
            "relUrl": "/week%205/2022/09/26/JSCalc.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "SSJN Project Purpose",
            "content": "SSJN Group Project . Program Purpose . To help users discover new types of music, artists, and songs. To help users diversify their music listening experience. . Program Function . To match users with a list of songs to listen to depending on their current emotion. . How it will Work . Users enter their current emotion into a text entry box | The program outputs a list of songs that match their current emotion, with spotify links embedded, so the users can explore new music! | Spotify x SSJN! . . xxx . . Roles . Scrum Master: Shreya Sapkal | Frontend Developer: Noor Grewal | Backend Developers: Sanika Shahapurkar &amp; Jiya Savlani | .",
            "url": "https://sanikasha.github.io/superFastPages/ssjn/2022/09/25/team-project-purpose.html",
            "relUrl": "/ssjn/2022/09/25/team-project-purpose.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "HTML Play",
            "content": ". . Scrum Group (example HTML list) . Sanika | Jiya | Noor | Shreya | . HTML JavaScript Date . Click me to display Date and Time. . . Emoji in HTML . &#128512; .",
            "url": "https://sanikasha.github.io/superFastPages/week%205/2022/09/25/HTMLplay.html",
            "relUrl": "/week%205/2022/09/25/HTMLplay.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "JavaScript Play",
            "content": "Math.round(3.14159); . 3 . Math.floor(Math.random() * 400); . 261 .",
            "url": "https://sanikasha.github.io/superFastPages/week%205/2022/09/24/JSPlay.html",
            "relUrl": "/week%205/2022/09/24/JSPlay.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "JavaScript and HTML Table 1",
            "content": "function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); logItType(2020); logItType([1, 2, 3]); . function Person(name, ghID, scrum) { this.name = name; this.ghID = ghID; this.scrum = scrum; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, scrum: this.scrum, role: this.role}; const json = JSON.stringify(obj); return json; } var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, &quot;none&quot;); logItType(teacher); logItType(teacher.toJSON()); // ok to do this even though role is not yet defined teacher.setRole(&quot;Teacher&quot;); logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, scrum: &#39;none&#39;, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;scrum&#34;:&#34;none&#34;,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, scrum: &#39;none&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;scrum&#34;:&#34;none&#34;,&#34;role&#34;:&#34;Teacher&#34;} . var students = [ new Person(&quot;Sanika&quot;, &quot;sanikasha&quot;, &quot;Backend&quot;), new Person(&quot;Noor&quot;, &quot;Nope1013&quot;, &quot;Frontend&quot;), new Person(&quot;Shreya&quot;, &quot;rey444&quot;, &quot;Scrum Master&quot;), new Person(&quot;Jiya&quot;, &quot;jiya-sav&quot;, &quot;Backend&quot;) ]; function Classroom(teacher, students){ teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Classroom(teacher, students); logItType(compsci.classroom); logItType(compsci.classroom[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, scrum: &#39;none&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Sanika&#39;, ghID: &#39;sanikasha&#39;, scrum: &#39;Backend&#39;, role: &#39;Student&#39; }, Person { name: &#39;Noor&#39;, ghID: &#39;Nope1013&#39;, scrum: &#39;Frontend&#39;, role: &#39;Student&#39; }, Person { name: &#39;Shreya&#39;, ghID: &#39;rey444&#39;, scrum: &#39;Scrum Master&#39;, role: &#39;Student&#39; }, Person { name: &#39;Jiya&#39;, ghID: &#39;jiya-sav&#39;, scrum: &#39;Backend&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;scrum&#34;:&#34;none&#34;,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, scrum: &#39;none&#39;, role: &#39;Teacher&#39; } . Classroom.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;background:green;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Scrum&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of compsci.classroom) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.scrum + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(compsci._toHtml()); . NameGitHub IDScrumRole . Mr M | jm1021 | none | Teacher | Sanika | sanikasha | Backend | Student | Noor | Nope1013 | Frontend | Student | Shreya | rey444 | Scrum Master | Student | Jiya | jiya-sav | Backend | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://sanikasha.github.io/superFastPages/week%205/2022/09/21/JS-1.html",
            "relUrl": "/week%205/2022/09/21/JS-1.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Agile Methodology",
            "content": "Our group is committed to being productive and using agile methodology to our advantage! . .",
            "url": "https://sanikasha.github.io/superFastPages/week%205/2022/09/20/Agile-Methodology.html",
            "relUrl": "/week%205/2022/09/20/Agile-Methodology.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Scrum Board",
            "content": "Ideas for Performance Task: . Guess that song | Match the song to the artist | Finish the lyric | . Functions we want to include / What we need to learn: . Type-in answer | Error message | If/else to avoid having to repeat code for correct/incorrect answers | Score provided at end | Music in the background | . Rubric Row To do Doing Done Notes . 1, Program Purpose and Function | x | x | x |   | . 2, Data Abstraction | x | x | x |   | . 3, Managing Complexity | x | x | x |   | . 4, Procedural Abstraction | x | x | x |   | . 5, Algorithm Implementation | x | x | x |   | . 6, Testing | x | x | x |   | .",
            "url": "https://sanikasha.github.io/superFastPages/ssjn/2022/09/10/Scrum-Board.html",
            "relUrl": "/ssjn/2022/09/10/Scrum-Board.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Week 2 Quiz Using Dictionaries",
            "content": "q1 = &quot;&quot;&quot;Which of the following is a type of variable? (Select all that applyx) a. String b. Integer c. Float d. Number&quot;&quot;&quot; q2 = &quot;&quot;&quot;What is the purpose of lists and dictionaries? (Select all that apply) a. Transfer information b. Convert information c. Throw away information d. Collect information&quot;&quot;&quot; q3 = &quot;&quot;&quot;Which of the following apply to lists of dictionaries? (Select all that apply) a. They are a collection of many similar data patterns b. The output looks similar to Ruby (coding language) output c. The output looks similar to JavaScript Object Notation (coding language) output d. A &#39;list&#39; data type has the method &#39;.append(expression)&#39;&quot;&quot;&quot; q4 = &quot;&quot;&quot;In which file are you able to change the the me of your fastpage? (Select all that apply) a. _notebooks b. search.html c. _config.yml d. tags.html&quot;&quot;&quot; questions = {q1:&quot;a, b, c&quot;, q2:&quot;d&quot;, q3:&quot;a, c, d&quot;, q4:&quot;c&quot;} print(&quot;Hello, welcome to the APCSP Week 2 review!&quot;) score=0 for i in questions: print(i) ans = input(&quot;enter your answer (x, x, ...)&quot;) if ans==questions[i]: print(&quot;correct&quot;) score = score+1 else: print(&quot;incorrect&quot;) score = score-1 print(&quot;Your score is:&quot;, score, &quot;/ 4&quot;) . Hello, welcome to the APCSP Week 2 review! Which of the following is a type of variable? (Select all that apply) a. String b. Integer c. Float d. Number correct What is the purpose of lists and dictionaries? (Select all that apply) a. Transfer information b. Convert information c. Throw away information d. Collect information incorrect Which of the following apply to lists of dictionaries? (Select all that apply) a. They are a collection of many similar data patterns b. The output looks similar to Ruby (coding language) output c. The output looks similar to JavaScript Object Notation (coding language) output d. A &#39;list&#39; data type has the method &#39;.append(expression)&#39; correct In which file are you able to change the the me of your fastpage? (Select all that apply) a. _notebooks b. search.html c. _config.yml d. tags.html correct Your score is: 2 / 4 .",
            "url": "https://sanikasha.github.io/superFastPages/week%202/2022/09/01/Dictionary-Quiz.html",
            "relUrl": "/week%202/2022/09/01/Dictionary-Quiz.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Temporarily Changing Theme of Fastpage",
            "content": ". . .",
            "url": "https://sanikasha.github.io/superFastPages/week%202/2022/08/30/Theme.html",
            "relUrl": "/week%202/2022/08/30/Theme.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Sanika's Lists and Dictionaries",
            "content": "InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortenson&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Zodiac Sign&quot;: &quot;Scorpio&quot;, &quot;Most Famous Songs&quot;: [&quot;Code Code Code&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Taylor&quot;, &quot;LastName&quot;: &quot;Swift&quot;, &quot;DOB&quot;: &quot;December 13&quot;, &quot;Zodiac Sign&quot;: &quot;Sagittarius&quot;, &quot;Most Famous Songs&quot;: [&quot;Love Story&quot;, &quot;Bad Blood&quot;, &quot;You Belong With Me&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Harry&quot;, &quot;LastName&quot;: &quot;Styles&quot;, &quot;DOB&quot;: &quot;February 1&quot;, &quot;Zodiac Sign&quot;: &quot;Aquarius&quot;, &quot;Most Famous Songs&quot;: [&quot;Sign of the Times&quot;, &quot;Golden&quot;, &quot;Falling&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Noor&quot;, &quot;LastName&quot;: &quot;Grewal&quot;, &quot;DOB&quot;: &quot;October 27&quot;, &quot;Zodiac Sign&quot;: &quot;Scorpio&quot;, &quot;Most Famous Songs&quot;: [&quot;Wasting Love - Iron Maiden&quot;, &quot;Tear - Smashing Pumpkins&quot;, &quot;Everlong - Foo Fighters&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortenson&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Zodiac Sign&#39;: &#39;Scorpio&#39;, &#39;Most Famous Songs&#39;: [&#39;Code Code Code&#39;]}, {&#39;FirstName&#39;: &#39;Taylor&#39;, &#39;LastName&#39;: &#39;Swift&#39;, &#39;DOB&#39;: &#39;December 13&#39;, &#39;Zodiac Sign&#39;: &#39;Sagittarius&#39;, &#39;Most Famous Songs&#39;: [&#39;Love Story&#39;, &#39;Bad Blood&#39;, &#39;You Belong With Me&#39;]}, {&#39;FirstName&#39;: &#39;Harry&#39;, &#39;LastName&#39;: &#39;Styles&#39;, &#39;DOB&#39;: &#39;February 1&#39;, &#39;Zodiac Sign&#39;: &#39;Aquarius&#39;, &#39;Most Famous Songs&#39;: [&#39;Sign of the Times&#39;, &#39;Golden&#39;, &#39;Falling&#39;]}, {&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Zodiac Sign&#39;: &#39;Scorpio&#39;, &#39;Most Famous Songs&#39;: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Zodiac Sign:&quot;, d_rec[&quot;Zodiac Sign&quot;]) print(&quot; t&quot;, &quot;Famous Songs: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Most Famous Songs&quot;])) print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortenson Birthday: October 21 Zodiac Sign: Scorpio Famous Songs: Code Code Code Taylor Swift Birthday: December 13 Zodiac Sign: Sagittarius Famous Songs: Love Story, Bad Blood, You Belong With Me Harry Styles Birthday: February 1 Zodiac Sign: Aquarius Famous Songs: Sign of the Times, Golden, Falling Noor Grewal Birthday: October 27 Zodiac Sign: Scorpio Famous Songs: Wasting Love - Iron Maiden, Tear - Smashing Pumpkins, Everlong - Foo Fighters . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortenson Birthday: October 21 Zodiac Sign: Scorpio Famous Songs: Code Code Code Taylor Swift Birthday: December 13 Zodiac Sign: Sagittarius Famous Songs: Love Story, Bad Blood, You Belong With Me Harry Styles Birthday: February 1 Zodiac Sign: Aquarius Famous Songs: Sign of the Times, Golden, Falling Noor Grewal Birthday: October 27 Zodiac Sign: Scorpio Famous Songs: Wasting Love - Iron Maiden, Tear - Smashing Pumpkins, Everlong - Foo Fighters . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortenson Birthday: October 21 Zodiac Sign: Scorpio Famous Songs: Code Code Code Taylor Swift Birthday: December 13 Zodiac Sign: Sagittarius Famous Songs: Love Story, Bad Blood, You Belong With Me Harry Styles Birthday: February 1 Zodiac Sign: Aquarius Famous Songs: Sign of the Times, Golden, Falling Noor Grewal Birthday: October 27 Zodiac Sign: Scorpio Famous Songs: Wasting Love - Iron Maiden, Tear - Smashing Pumpkins, Everlong - Foo Fighters . Hacks . Add a couple of records to the InfoDb (Finished) | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://sanikasha.github.io/superFastPages/week%202/2022/08/30/Lists-and-Dictionaries.html",
            "relUrl": "/week%202/2022/08/30/Lists-and-Dictionaries.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Sanika's Lists and Dictionaries Reversed",
            "content": "InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortenson&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Zodiac Sign&quot;: &quot;Scorpio&quot;, &quot;Most Famous Songs&quot;: [&quot;Code Code Code&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Taylor&quot;, &quot;LastName&quot;: &quot;Swift&quot;, &quot;DOB&quot;: &quot;December 13&quot;, &quot;Zodiac Sign&quot;: &quot;Sagittarius&quot;, &quot;Most Famous Songs&quot;: [&quot;Love Story&quot;, &quot;Bad Blood&quot;, &quot;You Belong With Me&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Harry&quot;, &quot;LastName&quot;: &quot;Styles&quot;, &quot;DOB&quot;: &quot;February 1&quot;, &quot;Zodiac Sign&quot;: &quot;Aquarius&quot;, &quot;Most Famous Songs&quot;: [&quot;Sign of the Times&quot;, &quot;Golden&quot;, &quot;Falling&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Noor&quot;, &quot;LastName&quot;: &quot;Grewal&quot;, &quot;DOB&quot;: &quot;October 27&quot;, &quot;Zodiac Sign&quot;: &quot;Scorpio&quot;, &quot;Most Famous Songs&quot;: [&quot;Wasting Love - Iron Maiden&quot;, &quot;Tear - Smashing Pumpkins&quot;, &quot;Everlong - Foo Fighters&quot;] }) InfoDb = InfoDb[::-1] print((InfoDb)) . [{&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Zodiac Sign&#39;: &#39;Scorpio&#39;, &#39;Most Famous Songs&#39;: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;]}, {&#39;FirstName&#39;: &#39;Harry&#39;, &#39;LastName&#39;: &#39;Styles&#39;, &#39;DOB&#39;: &#39;February 1&#39;, &#39;Zodiac Sign&#39;: &#39;Aquarius&#39;, &#39;Most Famous Songs&#39;: [&#39;Sign of the Times&#39;, &#39;Golden&#39;, &#39;Falling&#39;]}, {&#39;FirstName&#39;: &#39;Taylor&#39;, &#39;LastName&#39;: &#39;Swift&#39;, &#39;DOB&#39;: &#39;December 13&#39;, &#39;Zodiac Sign&#39;: &#39;Sagittarius&#39;, &#39;Most Famous Songs&#39;: [&#39;Love Story&#39;, &#39;Bad Blood&#39;, &#39;You Belong With Me&#39;]}, {&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortenson&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Zodiac Sign&#39;: &#39;Scorpio&#39;, &#39;Most Famous Songs&#39;: [&#39;Code Code Code&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Zodiac Sign:&quot;, d_rec[&quot;Zodiac Sign&quot;]) print(&quot; t&quot;, &quot;Famous Songs: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Most Famous Songs&quot;])) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Noor Grewal Birthday: October 27 Zodiac Sign: Scorpio Famous Songs: Wasting Love - Iron Maiden, Tear - Smashing Pumpkins, Everlong - Foo Fighters Harry Styles Birthday: February 1 Zodiac Sign: Aquarius Famous Songs: Sign of the Times, Golden, Falling Taylor Swift Birthday: December 13 Zodiac Sign: Sagittarius Famous Songs: Love Story, Bad Blood, You Belong With Me John Mortenson Birthday: October 21 Zodiac Sign: Scorpio Famous Songs: Code Code Code . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Noor Grewal Birthday: October 27 Zodiac Sign: Scorpio Famous Songs: Wasting Love - Iron Maiden, Tear - Smashing Pumpkins, Everlong - Foo Fighters Harry Styles Birthday: February 1 Zodiac Sign: Aquarius Famous Songs: Sign of the Times, Golden, Falling Taylor Swift Birthday: December 13 Zodiac Sign: Sagittarius Famous Songs: Love Story, Bad Blood, You Belong With Me John Mortenson Birthday: October 21 Zodiac Sign: Scorpio Famous Songs: Code Code Code .",
            "url": "https://sanikasha.github.io/superFastPages/week%202/2022/08/30/Lists-and-Dictionaries-Reverse.html",
            "relUrl": "/week%202/2022/08/30/Lists-and-Dictionaries-Reverse.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Fun Calculator",
            "content": "# Addition def add(x, y): return x + y # Subtraction def subtract(x, y): return x - y # Multiplication def multiply(x, y): return x * y # Division def divide(x, y): return x / y print(&quot;Select operation and calculate away!&quot;) print(&quot;1.Add to your hearts desire&quot;) print(&quot;2.Subtract from the sadness in your life&quot;) print(&quot;3.Multiply the amount of smiles you cause&quot;) print(&quot;4.Divide, just like slices in a pie!&quot;) while True: # take input from the user choice = input(&quot;Enter fun operation (1/2/3/4): &quot;) # check if choice is one of the four options if choice in (&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;): num1 = float(input(&quot;Enter first number: &quot;)) num2 = float(input(&quot;Enter second number: &quot;)) if choice == &#39;1&#39;: print(num1, &quot;+&quot;, num2, &quot;=&quot;, add(num1, num2)) elif choice == &#39;2&#39;: print(num1, &quot;-&quot;, num2, &quot;=&quot;, subtract(num1, num2)) elif choice == &#39;3&#39;: print(num1, &quot;*&quot;, num2, &quot;=&quot;, multiply(num1, num2)) elif choice == &#39;4&#39;: print(num1, &quot;/&quot;, num2, &quot;=&quot;, divide(num1, num2)) next_calculation = input(&quot;Let&#39;s do next exciting calculation? (yes/no): &quot;) if next_calculation == &quot;no&quot;: break else: print(&quot;Invalid Input&quot;) . Select operation and calculate away! 1.Add to your hearts desire 2.Subtract from the sadness in your life 3.Multiply the amount of smiles you cause 4.Divide, just like slices in a pie! 4.0 * 8.0 = 32.0 .",
            "url": "https://sanikasha.github.io/superFastPages/week%202/2022/08/29/Calculator.html",
            "relUrl": "/week%202/2022/08/29/Calculator.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What is it called to group a sequence of commands?&quot;) if rsp == &quot;procedural abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;A string literal like &#39;Hello, World&#39; is referred to as...&quot;) if rsp == &quot;static text&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is Mr. Mortenson&#39;s famous catch phrase?&quot;) if rsp == &quot;code code code&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) .",
            "url": "https://sanikasha.github.io/superFastPages/week%201/2022/08/26/Python-Quiz.html",
            "relUrl": "/week%201/2022/08/26/Python-Quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /Users/johnmortensen/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.3.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: java /Users/johnmortensen/Library/Jupyter/kernels/java javascript /Users/johnmortensen/Library/Jupyter/kernels/javascript python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://sanikasha.github.io/superFastPages/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Fetch of Covid19 data with RapidAPI",
            "content": "| Overview | Covid19 RapidAPI | Songs API | Users Database | . Time All-time Cases Recorded Deaths Active Cases . | | | | Country All-time Cases Recorded Deaths Active Cases .",
            "url": "https://sanikasha.github.io/superFastPages/data/covid",
            "relUrl": "/data/covid",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://sanikasha.github.io/superFastPages/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Lesson Grades",
            "content": "Lesson Grade Feedback . 3.1 and 3.2 | .9 | did extra binary hacks and well organized | . 3.3 and 3.4 | 1 | Good explanations, showing effort of trying the problems, also did extra work because I formatted it bad. | .   |   |   | .   |   |   | .   |   |   | .   |   |   | .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/02/12/Lesson-Grades.html",
            "relUrl": "/lessons/2022/02/12/Lesson-Grades.html",
            "date": " • Feb 12, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "5.1 and 5.2 Questions Blog",
            "content": "5.3: Intentional or Purposeful bias (Crossover Group Up, 10 minutes) Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) As Pairs (5 minutes) Watch the video… HP computers are racist Come up with some thoughts on the video and be ready to discuss them as I call on you. Here are some ideas… Does the owner of the computer think this was intentional? If yes or no, justify you conclusion. How do you think this happened? Is this harmful? Was it intended to be harmful or exclude? Should it be corrected? . 5.4: CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. .",
            "url": "https://sanikasha.github.io/superFastPages/create%20performance%20task/2022/02/03/Lessons.html",
            "relUrl": "/create%20performance%20task/2022/02/03/Lessons.html",
            "date": " • Feb 3, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "5.1 and 5.2 Lesson Questions",
            "content": "Blog Post Reflection – Digital Empowerment . How does someone empower themself in a digital world? | . People with certain advantages in access to the digital world and use this access to further movements in increasing digitial accesiblity. To empower one’s self a person can ensure to seperate their digital lives from their real lives. Because nothing is good in excess, it is important that digital forms of media are used in moderation. . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. | . On a large scale, increased funding to public schools as well as increase in lower income wages will allow more people to access the technology. This would lessen the divide that puts some with advantage above others. On the smaller scale of Del Norte HS, we can encourage various students to utilize the resources of technology we are provided. Additionally, encouraging students to take computer science related courses is important. . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? | . In my opinion, red tape is blocking digital empowerment. Though paper is another major use of keeping track of and recording data, I feel it is more the traditionalist ideology and fear of vulnurability that prevents people from using technology to it’s highest potential. . Blog Post Reflection . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing | . sdfgh . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? | . zxg .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2022/01/24/Lesson5Qs.html",
            "relUrl": "/lessons/2022/01/24/Lesson5Qs.html",
            "date": " • Jan 24, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Lesson 16 Hacks",
            "content": "Notes . Simulation: a simpler abstraction of a complex natural phenomena . Simulation vs Experiment: . Safer | Less costly | Can make better predictions | . Why make a simulation? . Can manage complex situations without actually delving into the complexities of the real world problem | . Question Answer . Sanika Shahapurkar | | . 1 | no question | . 2 | no question | . 3 | C, random numbers are important in a variety of situations but will not make the simulation itself more accurate | . 4 | B, the other aircraft does not neccesarily have a direct impact on the functionality of a specific aircraft | . 5 | C, the situation when using and experiment or simulation could be the same but one is often more effective for the specific situation | . 6 | A, the car company can not put actual customers in car crashes | . 7 | A, infliciting harm on the environment is not tangible for the study | . 8 | no question | . 9 | B, a simple average calclulation is possible because values are already provided | .",
            "url": "https://sanikasha.github.io/superFastPages/lessons/2020/12/17/Lesson16.html",
            "relUrl": "/lessons/2020/12/17/Lesson16.html",
            "date": " • Dec 17, 2020"
        }
        
    
  
    
        ,"post67": {
            "title": "My first markdown and more",
            "content": "The link to my Github Insights: https://github.com/sanikasha/superFastPages/pulse . My Fastpages VS Code Project: . .",
            "url": "https://sanikasha.github.io/superFastPages/week%200/2020/08/21/my-first-markdown.html",
            "relUrl": "/week%200/2020/08/21/my-first-markdown.html",
            "date": " • Aug 21, 2020"
        }
        
    
  
    
        ,"post68": {
            "title": "Sanika's Jupyter Notebook 1",
            "content": "print(&quot;Hello from Sanika&quot;) . Hello from Sanika .",
            "url": "https://sanikasha.github.io/superFastPages/week%200/2020/08/21/Hello.html",
            "relUrl": "/week%200/2020/08/21/Hello.html",
            "date": " • Aug 21, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "API",
          "content": "| Overview | Covid19 RapidAPI | Songs API | Users Database | . Possible APIs that may be useful for Final Project : . Spotify API | Genius API | Burger API, that for some reason is the only data in readable format | Rapid API Example | . Errors: . As a group, we attempted several methods of formatting the JSON data. Some of these include using W3Schools to learn more about JSON syntax, trying commands like json.dumps(), json.loads(), and more. | .",
          "url": "https://sanikasha.github.io/superFastPages/api/",
          "relUrl": "/api/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Learning Targets",
          "content": "Vocab . Word Pseudocode Python Def/Purpose . Output | DISPLAY(expression) | print(expression, end=” “) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=” “ | . Input | a ← INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a. | . Assignment | a ← expression | a = expression | Evaluates expression and assigns the result to the variable a. | . Lists | N/A | [] | a way to group data into ordered sequences | . Dictionaries | N/A | {} | a way of grouping data into in key-value relationships | . HTML Fragments | N/A | N/A | HTML fragments are portions of code used in a greater coding system that enable functionality specific to the current page | . API | N/A | N/A | A Web API is an application programming interface typically for a web browser. | . Frontend | N/A | N/A | Front-end web development is the development of the graphical user interface of a website, utilize HTML and JavaScript | . Backend | N/A | N/A | Functionality, code that connects the web to a database, manages user connections, and powers the web application itself | . Deployment | N/A | N/A | Deploying a Web Application enables a Server and Web Application to be available to users on the Internetx | . Deployment Resources . Resources Purpose . EC2 | a cloud computing platform that the PUSD district has provided for their students to serve our Web Application | . GitHub | The leading open platform to share a code across the Internet. | . Docker and docker-compose | Docker container prepares an environment that contains the Web Application code and all the dependencies (requirements.txt for Python) Docker is an open platform for developing, shipping, and running applications. | . Nginx | Nginx is an open source software for web serving, reverse proxy, caching, load balancing, media streaming, and more. | . AWS . Start SSJN on Flask: cd ~/p3t2_ssjn_flask/ source webapp/bin/activate . Curl: http://localhost:8032 . Update from AWS: cd ~/p3t2_ssjn_flask/ sudo docker-compose ps sudo docker ps git status sudo docker-compose kill git pull sudo docker-compose build –no-cache sudo docker-compose up -d . Initial Targets, Important . Week Topics Learnings . 1 | Tools Setup | Create Fastpage, Creat first Jupyter notebook, Screen capture of VS Studio | . 2 | Intro Python, Jupyter, Fastpages | Productive Blogging, Jupyter Notebook using Bash, more | . 3 | Data Abstraction | List/Dictionaries Iteration, HTML/Markdown Fragments | .",
          "url": "https://sanikasha.github.io/superFastPages/learningtargets/",
          "relUrl": "/learningtargets/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "My name is Sanika Shahapurkar, and I am currently a senior in high school! I love playing my guitar, going to concerts, and taking pictures on my film camera. I am in several clubs including the DNHS Anti-racism and Equity Taskforce, Peer Counseling, and Theatre Society. . .",
          "url": "https://sanikasha.github.io/superFastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "My Photography",
          "content": "Here are some of my favorite film pictures I have taken! . .",
          "url": "https://sanikasha.github.io/superFastPages/photography/",
          "relUrl": "/photography/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page10": {
          "title": "",
          "content": "",
          "url": "https://sanikasha.github.io/superFastPages/temp",
          "relUrl": "/temp",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sanikasha.github.io/superFastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}